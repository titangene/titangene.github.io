<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python 爬蟲常用技巧 (持續更新)</title>
      <link href="/article/python-crawler-note.html"/>
      <url>/article/python-crawler-note.html</url>
      
        <content type="html"><![CDATA[<p>紀錄個人常用的 Python 爬蟲技巧，未來還會持續更新其他技巧。</p><a id="more"></a><h2 id="載入常用套件"><a class="header-anchor" href="#載入常用套件"></a>載入常用套件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, parse_qs<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> user_agent <span class="hljs-keyword">import</span> generate_user_agent<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="解析-html"><a class="header-anchor" href="#解析-html"></a>解析 HTML</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>response = requests.get(url)<br>soup = BeautifulSoup(response.text, <span class="hljs-string">'lxml'</span>)<br>html = soup.find(id=<span class="hljs-string">'some_id'</span>)<br></code></pre></td></tr></table></figure><h2 id="解析網址"><a class="header-anchor" href="#解析網址"></a>解析網址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, parse_qs<br><br>url = <span class="hljs-string">'http://xxx.com/api/data?id=123&amp;sub_code=06A1297'</span><br><br>link_parse = urlparse(url)<br>link_query = parse_qs(link_parse.query)<br><br>id = link_query[<span class="hljs-string">'id'</span>][<span class="hljs-number">0</span>]<br>sub_code = link_query[<span class="hljs-string">'sub_code'</span>][<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="隨機生成-user-agent"><a class="header-anchor" href="#隨機生成-user-agent"></a>隨機生成 user-agent</h2><h3 id="fake-useragent-套件"><a class="header-anchor" href="#fake-useragent-套件"></a>fake_useragent 套件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_header_user_agent</span><span class="hljs-params">()</span>:</span><br>    user_agent = UserAgent()<br>    <span class="hljs-keyword">return</span> user_agent.random<br><br>user_agent = set_header_user_agent()<br>response = requests.get(url, headers=&#123; <span class="hljs-string">'user-agent'</span>: user_agent &#125;)<br></code></pre></td></tr></table></figure><h3 id="user-agent-套件"><a class="header-anchor" href="#user-agent-套件"></a>user_agent 套件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> user_agent <span class="hljs-keyword">import</span> generate_user_agent<br><br>user_agent = generate_user_agent()<br>response = requests.get(url, headers=&#123; <span class="hljs-string">'user-agent'</span>: user_agent &#125;)<br></code></pre></td></tr></table></figure><h2 id="讀取表格資料"><a class="header-anchor" href="#讀取表格資料"></a>讀取表格資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>response = requests.get(url)<br>soup = BeautifulSoup(response.text, <span class="hljs-string">'lxml'</span>)<br>html = soup.find(id=<span class="hljs-string">'table_id'</span>)<br>df = pd.read_html(str(html), header=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="讀取-解析-json"><a class="header-anchor" href="#讀取-解析-json"></a>讀取/解析 JSON</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 讀取</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.json'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:<br>    datas = json.load(file)<br><br><span class="hljs-comment"># 解析</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:<br>    json.dump(datas, file, ensure_ascii=<span class="hljs-keyword">False</span>)<br></code></pre></td></tr></table></figure><h2 id="下載圖片"><a class="header-anchor" href="#下載圖片"></a>下載圖片</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>urls = [<br>  <span class="hljs-string">"http://www.xxx.com/xxx.png"</span>,<br>  <span class="hljs-string">"http://www.xxx.com/yyy.png"</span>,<br>  <span class="hljs-string">"http://www.xxx.com/zzz.png"</span><br>]<br><br>index = <span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>    r = requests.get(url)<br>    <span class="hljs-keyword">with</span> open(<span class="hljs-string">'&#123;&#125;.png'</span>.format(index), <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(r.content)<br>    index += <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python Requests </tag>
            
            <tag> Crawler </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Hexo 主題內新增程式碼片段複製功能</title>
      <link href="/article/hexo-copy-code-snippet-to-clipboard.html"/>
      <url>/article/hexo-copy-code-snippet-to-clipboard.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/hexo-copy-code-snippet-to-clipboard.jpg" alt=""></p><p>為了提高 blog 的使用體驗，本文將說明如何在 Hexo 主題內，提供程式碼片段複製至剪貼簿的功能。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// copy to clipboard</span><br><span class="hljs-keyword">var</span> clipboard = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'pre'</span>);<br></code></pre></td></tr></table></figure><h2 id="載入-clipboard-js"><a class="header-anchor" href="#載入-clipboard-js"></a>載入 clipboard.js</h2><p>在 <code>themes\material-flow\layout\_partial\scripts.ejs</code> 檔案內的載入 clipboard.js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="新增程式碼片段複製功能"><a class="header-anchor" href="#新增程式碼片段複製功能"></a>新增程式碼片段複製功能</h2><p>每個程式碼片段內都要新增複製功能按鈕，下面說明新增複製按鈕的處理邏輯：</p><ol><li>首先要找到所有程式碼區塊：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> snippets = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'figure.highlight'</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>準備要新增的按鈕結構：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlCopyButton = <span class="hljs-string">`<br>  &lt;button class="codecopy-btn tooltipped tooltipped-sw" aria-label="Copy to clipboard"&gt;<br>    &lt;i class="far fa-copy" aria-hidden="true"&gt;&lt;/i&gt;<br>  &lt;/button&gt;`</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>在原本的程式碼區塊的 <code>&lt;figure&gt;</code> 標籤外多包了一層 <code>&lt;div&gt;</code> 標籤</li><li>在 <code>&lt;div&gt;</code> 標籤上新增 <code>.code-highlight</code> class 樣式</li><li>在 <code>&lt;div&gt;</code> 標籤上新增 <code>data-lang</code> 屬性用於記錄此程式碼區塊內的程式碼是哪種程式語言</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">snippets.forEach(<span class="hljs-function">(<span class="hljs-params">snippet</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> parent = snippet.parentNode;<br>  <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);<br><br>  parent.replaceChild(wrapper, snippet);<br>  wrapper.appendChild(snippet);<br><br>  wrapper.classList.add(<span class="hljs-string">'code-highlight'</span>);<br>  wrapper.firstChild.insertAdjacentHTML(<span class="hljs-string">'beforebegin'</span>, htmlCopyButton);<br><br>  <span class="hljs-keyword">var</span> lang = (snippet.classList[<span class="hljs-number">1</span>] || <span class="hljs-string">'code'</span>).toUpperCase();<br>  wrapper.setAttribute(<span class="hljs-string">'data-lang'</span>, lang);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="6"><li>接著將名為 <code>.codecopy-btn</code> 的 element 上新增複製功能，複製的內容是 <code>&lt;figure&gt;</code> 標籤內的程式碼：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(<span class="hljs-string">'.codecopy-btn'</span>, &#123;<br>  <span class="hljs-attr">target</span>: <span class="hljs-function">(<span class="hljs-params">trigger</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> trigger.nextSibling;<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="7"><li>只要按複製按鈕且複製成功，就會顯示 <code>Copied!</code> 提示已成功複製程式碼片段：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">clipboard.on(<span class="hljs-string">'success'</span>, (e) =&gt; &#123;<br>  e.trigger.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copied!'</span>);<br>  e.clearSelection();<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="8"><li>將每個複製按鈕新增兩個監聽事件，分別是 <code>mouseleave</code> 和 <code>click</code>：<ul><li><code>mouseleave</code>：滑鼠離開按鈕就將提示文字變成 <code>Copy to clipboard</code></li><li><code>click</code>：取消事件的預設行為</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.codecopy-btn'</span>);<br><br>btns.forEach(<span class="hljs-function">(<span class="hljs-params">btn</span>) =&gt;</span> &#123;<br>  btn.addEventListener(<span class="hljs-string">'mouseleave'</span>, (e) =&gt; &#123;<br>    e.target.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copy to clipboard'</span>);<br>    e.target.blur();<br>  &#125;);<br><br>  btn.addEventListener(<span class="hljs-string">'click'</span>, (e) =&gt; &#123;<br>    e.preventDefault()<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="完整程式碼"><a class="header-anchor" href="#完整程式碼"></a>完整程式碼</h3><p>在 <code>themes\material-flow\source\js</code> 目錄內建立 <code>clipboard-use.js</code>，檔案內容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// ref: https://github.com/zenorocha/codecopy/blob/master/src/scripts/main.js</span><br>  <span class="hljs-keyword">var</span> snippets = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'figure.highlight'</span>);<br>  <span class="hljs-keyword">var</span> htmlCopyButton = <span class="hljs-string">`<br>    &lt;button class="codecopy-btn tooltipped tooltipped-sw" aria-label="Copy to clipboard"&gt;<br>      &lt;i class="far fa-copy" aria-hidden="true"&gt;&lt;/i&gt;<br>    &lt;/button&gt;`</span>;<br><br>  snippets.forEach(<span class="hljs-function">(<span class="hljs-params">snippet</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> parent = snippet.parentNode;<br>    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);<br><br>    parent.replaceChild(wrapper, snippet);<br>    wrapper.appendChild(snippet);<br><br>    wrapper.classList.add(<span class="hljs-string">'code-highlight'</span>);<br>    wrapper.firstChild.insertAdjacentHTML(<span class="hljs-string">'beforebegin'</span>, htmlCopyButton);<br><br>    <span class="hljs-keyword">var</span> lang = (snippet.classList[<span class="hljs-number">1</span>] || <span class="hljs-string">'code'</span>).toUpperCase();<br>    wrapper.setAttribute(<span class="hljs-string">'data-lang'</span>, lang);<br>  &#125;);<br><br>  <span class="hljs-comment">// Add copy to clipboard functionality and user feedback</span><br>  <span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(<span class="hljs-string">'.codecopy-btn'</span>, &#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-function">(<span class="hljs-params">trigger</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> trigger.nextSibling;<br>    &#125;<br>  &#125;);<br><br>  clipboard.on(<span class="hljs-string">'success'</span>, (e) =&gt; &#123;<br>    e.trigger.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copied!'</span>);<br>    e.clearSelection();<br>  &#125;);<br><br>  <span class="hljs-comment">// Replace tooltip message when mouse leaves button</span><br>  <span class="hljs-comment">// and prevent page refresh after click button</span><br>  <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.codecopy-btn'</span>);<br><br>  btns.forEach(<span class="hljs-function">(<span class="hljs-params">btn</span>) =&gt;</span> &#123;<br>    btn.addEventListener(<span class="hljs-string">'mouseleave'</span>, (e) =&gt; &#123;<br>      e.target.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copy to clipboard'</span>);<br>      e.target.blur();<br>    &#125;);<br><br>    btn.addEventListener(<span class="hljs-string">'click'</span>, (e) =&gt; &#123;<br>      e.preventDefault()<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>接著在 <code>themes\material-flow\layout\_partial\scripts.ejs</code> 檔案內的載入 <code>clipboard-use.js</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">js</span>('<span class="hljs-attr">js</span>/<span class="hljs-attr">clipboard-use.js</span>') %&gt;</span><br></code></pre></td></tr></table></figure><h2 id="css-樣式"><a class="header-anchor" href="#css-樣式"></a>CSS 樣式</h2><h3 id="提示文字樣式"><a class="header-anchor" href="#提示文字樣式"></a>提示文字樣式</h3><p>在 <code>themes\material-flow\source\less</code> 目錄內建立 <code>_tooltipped.less</code>，檔案內容如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// ref: https://github.com/primer/primer/blob/master/modules/primer-tooltips/lib/tooltips.scss</span><br><span class="hljs-selector-class">.tooltipped</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-comment">// This is the tooltip bubble</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000000</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">padding</span>: .<span class="hljs-number">5em</span> .<span class="hljs-number">75em</span>;<br>  <span class="hljs-attribute">-webkit-font-smoothing</span>: subpixel-antialiased;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">text-shadow</span>: none;<br>  <span class="hljs-attribute">text-transform</span>: none;<br>  <span class="hljs-attribute">letter-spacing</span>: normal;<br>  <span class="hljs-attribute">word-wrap</span>: break-word;<br>  <span class="hljs-attribute">white-space</span>: pre;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">content</span>: attr(aria-label);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#616161</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// This is the tooltip arrow</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000001</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#616161</span>;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">""</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">6px</span> solid transparent;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// delay animation for tooltip</span><br><span class="hljs-keyword">@keyframes</span> tooltip-appear &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// This will indicate when we'll activate the tooltip</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:active</span>,<br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span>,<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">animation-name</span>: tooltip-appear;<br>    <span class="hljs-attribute">animation-duration</span>: .<span class="hljs-number">1s</span>;<br>    <span class="hljs-attribute">animation-fill-mode</span>: forwards;<br>    <span class="hljs-attribute">animation-timing-function</span>: ease-in;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Tooltipped south</span><br><span class="hljs-selector-class">.tooltipped-s</span>,<br><span class="hljs-selector-class">.tooltipped-sw</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">6px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">top</span>: auto;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">7px</span>;<br>    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">border-bottom-color</span>: <span class="hljs-number">#616161</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.tooltipped-sw</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-comment">// Move the tooltip body to the center of the object.</span><br><span class="hljs-selector-class">.tooltipped-s</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">transform</span>: translateX(<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接著在 <code>themes\material-flow\source\style.less</code> 檔案內的載入 <code>_tooltipped.less</code>：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">"less/_tooltipped.less"</span>;<br></code></pre></td></tr></table></figure><h3 id="其他樣式"><a class="header-anchor" href="#其他樣式"></a>其他樣式</h3><p>可參考本站的完整樣式：<a href="https://github.com/titangene/hexo-blog/blob/master/themes/material-flow/source/less/_article.less" target="_blank" rel="noopener">原始碼</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">figure</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">22px</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.code-highlight</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: attr(data-lang);<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">"Roboto Mono"</span>, Consolas, monospace, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.6em</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#b1b1b1</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">7px</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.codecopy-btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: -<span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">box-shadow</span>: none;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span>;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#7bf</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="demo"><a class="header-anchor" href="#demo"></a>Demo</h2><p>下面是原本的 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight javascript"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"gutter"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"line"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs javascript"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用後的 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code-highlight"</span> <span class="hljs-attr">data-lang</span>=<span class="hljs-string">"JAVASCRIPT"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"codecopy-btn tooltipped tooltipped-sw"</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Copy to clipboard"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"far fa-copy"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight javascript"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"gutter"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"line"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs javascript"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>畫面：</p><p><img src="../images/hexo-copy-code-snippet-to-clipboard/copy-to-clipboard.gif" alt=""></p><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js — Copy to clipboard without Flash</a></li><li><a href="https://github.com/primer/primer/tree/master/modules/primer-tooltips" target="_blank" rel="noopener">GitHub’s Primer Tooltips</a></li><li><a href="https://github.com/zenorocha/codecopy" target="_blank" rel="noopener">zenorocha/codecopy: A browser extension that adds copy to clipboard buttons on every code block</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Code Snippet </tag>
            
            <tag> Clipboard </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在 Docker 下建立並使用 MSSQL Server for Linux</title>
      <link href="/article/docker-mssql-server-for-linux.html"/>
      <url>/article/docker-mssql-server-for-linux.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/docker-mssql-server-for-linux.jpg" alt=""></p><p>在 SQL Server 2017 時，微軟推出了 Linux 版，同時也在 Docker Hub 上提供了 <a href="https://hub.docker.com/r/microsoft/mssql-server-linux/" target="_blank" rel="noopener">microsoft/mssql-server-linux</a> 的 Docker image。本篇會介紹如何在 Docker 下，透過此 image 來建立並使用 MSSQL Server for Linux。</p><a id="more"></a><h2 id="mssql-server-for-linux-要求"><a class="header-anchor" href="#mssql-server-for-linux-要求"></a>MSSQL Server for Linux 要求</h2><ul><li>必須 Docker Engine 1.8+，支援任何平台 (Windows/Mac/Linux)</li><li>硬碟空間至少 2 GB</li><li>RAM 至少 2 GB</li><li>image 必要的環境變數：<ul><li><code>ACCEPT_EULA=Y</code>：確認同意授權合約</li><li><code>MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;</code>：設定 SA 密碼</li></ul></li><li>A strong system administrator (SA) 密碼必須符合以下規則：<ul><li>至少 8 個字元</li><li>必需包含英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可</li></ul></li></ul><blockquote><p>詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-setup?view=sql-server-2017#system" target="_blank" rel="noopener">SQL Server on Liunx 的系統需求</a> 文件。</p></blockquote><h2 id="建立-container"><a class="header-anchor" href="#建立-container"></a>建立 Container</h2><p>Docker Hub：<a href="https://hub.docker.com/r/microsoft/mssql-server-linux/" target="_blank" rel="noopener">microsoft/mssql-server-linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 從 Docker Hub 提取 SQL Server 2017 Linux container image<br><span class="hljs-meta">$</span> docker pull microsoft/mssql-server-linux:2017-latest<br><span class="hljs-meta"><br>#</span> 建立並執行 Docker container<br><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1401:1433 --name sql1 \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><ul><li><code>-e 'ACCEPT_EULA=Y'</code>：確認同意授權合約</li><li><code>-e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;'</code>：必需是強密碼並至少 8 個字元。強密碼英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可。</li><li><code>-p hostPort:containerPort</code>：host 對外開 1401 port，container 內開 1433 port</li><li><code>--name</code>：指定 container 名稱</li><li><code>-d</code>：背景執行</li><li><code>microsoft/mssql-server-linux:2017-latest</code>：使用 SQL Server 2017 Linux image 建立 container</li></ul><p>如果列表 <code>NAMES</code> 顯示 sql1 並且 <code>STATUS</code> 顯示 UP 就代表 SQL Server 已在背景執行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查看 container 的狀態<br><span class="hljs-meta">$</span> docker ps<br>CONTAINER ID   IMAGE                                      COMMAND                  CREATED          STATUS          PORTS                    NAMES<br>08e2f151d579   microsoft/mssql-server-linux:2017-latest   "/bin/sh -c /opt/mss…"   31 minutes ago   Up 31 minutes   0.0.0.0:1401-&gt;1433/tcp   sql1<br></code></pre></td></tr></table></figure><h2 id="連接至-sql-server"><a class="header-anchor" href="#連接至-sql-server"></a>連接至 SQL Server</h2><p>使用 SQL Server 命令列工具 <code>sqlcmd</code>，連接到 SQL Server container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 在外部向執行中的 container 內部下指令，啟動 Container 內部的互動式 bash shell，來執行你下的指令<br><span class="hljs-meta">$</span> docker exec -it sql1 bash<br><span class="hljs-meta"><br>#</span> 使用 SQL Server 命令列工具 `sqlcmd`，並登入帳號密碼連接到 SQL Server<br><span class="hljs-meta">$</span> /opt/mssql-tools/bin/sqlcmd -S localhost -U SA<br>Password:<br><span class="hljs-meta"><br>#</span> 出現 "1&gt;" 就代表已成功登入並已進入 sqlcmd<br><span class="hljs-meta">1&gt;</span><br></code></pre></td></tr></table></figure><h2 id="變更-sa-的密碼"><a class="header-anchor" href="#變更-sa-的密碼"></a>變更 SA 的密碼</h2><p>SA 帳號是在安裝期間建立的 SQL Server 實例上的系統管理員。建立 SQL Server container 之後，在 container 中執行 <code>echo $MSSQL_SA_PASSWORD</code>，即可查看 SA 的密碼：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql1 bash<br>root@xxx:/# echo $MSSQL_SA_PASSWORD<br>YourStrong!Passw0rd<br></code></pre></td></tr></table></figure><p>執行下面指令可以變更 SA 的密碼，而 <code>opt/mssql-tools/bin/sqlcmd</code> 是 <code>sqlcmd</code> 所在的路徑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \<br>  -S localhost -U SA -P '&lt;YourStrong!Passw0rd&gt;' \<br>  -Q 'ALTER LOGIN SA WITH PASSWORD="&lt;YourNewStrong!Passw0rd&gt;"'<br></code></pre></td></tr></table></figure><p>參數說明：</p><ul><li><code>-S</code>：server</li><li><code>-U</code>：user name</li><li><code>-P</code>：password</li><li><code>-Q</code>：query，執行 SQL 指令後結束 <code>sqlcmd</code></li></ul><h2 id="建立資料庫及查詢資料"><a class="header-anchor" href="#建立資料庫及查詢資料"></a>建立資料庫及查詢資料</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢 server 上所有 DB 名稱<br><span class="hljs-meta">1&gt;</span> SELECT Name from sys.Databases<br><span class="hljs-meta">#</span> 在 sqlcmd 指令模式下，要輸入 GO 指令才會執行<br><span class="hljs-meta">2&gt;</span> GO<br>Name<br>------------<br>master<br>tempdb<br>model<br>msdb<br><br>(4 rows affected)<br><span class="hljs-meta"><br>#</span> 建立資料庫<br><span class="hljs-meta">1&gt;</span> CREATE DATABASE TestDB<br><span class="hljs-meta">2&gt;</span> GO<br><span class="hljs-meta">#</span> 出現下面畫面 "1&gt;" 就代表已成功建立資料庫<br><span class="hljs-meta">1&gt;</span><br><span class="hljs-meta"><br>#</span> 離開 sqlcmd<br><span class="hljs-meta">1&gt;</span> quit<br></code></pre></td></tr></table></figure><h2 id="使用-azure-data-studio-連接-sql-server"><a class="header-anchor" href="#使用-azure-data-studio-連接-sql-server"></a>使用 Azure Data Studio 連接 SQL Server</h2><p><a href="https://github.com/Microsoft/azuredatastudio" target="_blank" rel="noopener">Azure Data Studio</a> (以前稱為 SQL Operations Studio) 是一個輕量且免費的跨平台 SQL Server 開源管理工具，支援 Windows、macOS、Linux。</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_21-20-32.png" alt=""></p><h3 id="安裝-azure-data-studio"><a class="header-anchor" href="#安裝-azure-data-studio"></a>安裝 Azure Data Studio</h3><h4 id="for-windows"><a class="header-anchor" href="#for-windows"></a>for Windows</h4><p>下載並解壓縮，接著執行 <code>\azuredatastudio-windows\sqlops.exe</code> 即可開始使用。</p><h4 id="for-linux"><a class="header-anchor" href="#for-linux"></a>for Linux</h4><p>下載並解壓縮，接著將 Azure Data Studio 執行檔加入 <code>PATH</code> 環境變數，以後即可在終端機輸入 <code>azuredatastudio</code> 開啟 Azure Data Studio：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> cd ~<br><span class="hljs-meta">$</span> cp ~/Downloads/azuredatastudio-linux-&lt;version string&gt;.tar.gz ~<br><span class="hljs-meta">$</span> tar -xvf ~/azuredatastudio-linux-&lt;version string&gt;.tar.gz<br><span class="hljs-meta">$</span> echo 'export PATH="$PATH:~/azuredatastudio-linux-x64"' &gt;&gt; ~/.bashrc<br><span class="hljs-meta">$</span> source ~/.bashrc<br><span class="hljs-meta">$</span> azuredatastudio<br></code></pre></td></tr></table></figure><h4 id="for-macos"><a class="header-anchor" href="#for-macos"></a>for macOS</h4><p>下載並解壓縮，然後將 Azure Data Studio 加入 Launchpad，將 <code>Studio.app</code> 拖曳到應用程式目錄 (Applications folder) 即可。</p><blockquote><p>安裝詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/azure-data-studio/download?view=sql-server-2017" target="_blank" rel="noopener">下載並安裝 - Azure Data Studio | Microsoft Docs</a> 文件。</p></blockquote><h3 id="登入-sql-server"><a class="header-anchor" href="#登入-sql-server"></a>登入 SQL Server</h3><p>Server name 的格式： <code>IP, Port</code></p><ul><li>IP：<ul><li>Linux：使用 <code>ifconfig</code> 指令查詢 IP</li><li>Windows：使用 <code>ipconfig</code> 指令查詢 IP</li></ul></li><li>Port：要看前面建立的 container 是設定多少 Port</li></ul><p>此範例 (也就是下面的指令) 是設定使用 1401 port，所以只要輸入 <code>YourIP, 1401</code> 就能與 SQL Server 連接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1401:1433 --name sql1 \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_23-02-20.png" alt=""></p><h2 id="建立資料表和資料-並查詢資料"><a class="header-anchor" href="#建立資料表和資料-並查詢資料"></a>建立資料表和資料，並查詢資料</h2><p>執行下面指令，建立資料表和資料，並查詢資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 切換至 TestDB 資料庫</span><br><span class="hljs-keyword">use</span> TestDB;<br><span class="hljs-comment">-- 建立資料表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> People(<span class="hljs-keyword">Name</span> <span class="hljs-keyword">nvarchar</span>(<span class="hljs-number">50</span>), Age <span class="hljs-built_in">int</span>);<br><span class="hljs-comment">-- 新增資料</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'Titan'</span>, <span class="hljs-number">18</span>), (<span class="hljs-string">'John'</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">'Alex'</span>, <span class="hljs-number">40</span>);<br><span class="hljs-comment">-- 查詢年齡小於 20 歲的人</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> People <span class="hljs-keyword">WHERE</span> Age &lt; <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>執行完的結果如下圖，看到此查詢結果就代表已成功新增資料：</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_21-20-32.png" alt=""></p><h2 id="刪除-container"><a class="header-anchor" href="#刪除-container"></a>刪除 Container</h2><p>指定刪除名為 <code>sql1</code> 的 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢目前的正在執行的 container<br><span class="hljs-meta">$</span> docker ps<br><span class="hljs-meta"><br>#</span> container 停止執行<br><span class="hljs-meta">$</span> docker stop sql<br><span class="hljs-meta"><br>#</span> 刪除 container<br><span class="hljs-meta">$</span> docker rm sql1<br></code></pre></td></tr></table></figure><p>或是可以在未停止執行 container 的情況下，直接強制刪除 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 強制刪除 container<br><span class="hljs-meta">$</span> docker rm -f sql1<br></code></pre></td></tr></table></figure><h2 id="透過-volume-將資料庫的資料儲存至主機"><a class="header-anchor" href="#透過-volume-將資料庫的資料儲存至主機"></a>透過 Volume 將資料庫的資料儲存至主機</h2><p>在 <code>docker run</code> 指令上加 <code>-v</code> 參數可以建立實體資料夾與 container 資料夾的對應關係，將主機上的指定目錄綁定到 container 的指定目錄，也就是可以存資料庫的資料至主機，參數語法為 <code>-v &lt;host directory&gt;:/var/opt/mssql</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 執行 Docker container image<br><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1402:1433 --name sql2 \<br>  -v `pwd`/mssql:/var/opt/mssql \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><h2 id="備份與還原資料庫"><a class="header-anchor" href="#備份與還原資料庫"></a>備份與還原資料庫</h2><h3 id="範例前置準備：建立資料庫-資料表和資料"><a class="header-anchor" href="#範例前置準備：建立資料庫-資料表和資料"></a>範例前置準備：建立資料庫、資料表和資料</h3><p>下面的 SQL 指令是用來立資料庫、資料表和資料，因為此 container 是剛剛另外新建的，之前的 container 已經刪除了 (因為沒有利用 Volume 儲存資料庫的資料)，所以需要重新建立資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立 資料庫</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> TestDB;<br>GO<br><span class="hljs-comment">-- 切換至 TestDB 資料庫</span><br><span class="hljs-keyword">use</span> TestDB;<br><span class="hljs-comment">-- 建立資料表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> People(<span class="hljs-keyword">Name</span> <span class="hljs-keyword">nvarchar</span>(<span class="hljs-number">50</span>), Age <span class="hljs-built_in">int</span>);<br><span class="hljs-comment">-- 新增資料</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'Titan'</span>, <span class="hljs-number">18</span>), (<span class="hljs-string">'John'</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">'Alex'</span>, <span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><h3 id="備份資料庫"><a class="header-anchor" href="#備份資料庫"></a>備份資料庫</h3><p>使用 sqlcmd 連接到 SQL Server，並完整備份 TestDB 資料庫，備份檔存至 <code>./data/testdb.bak</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql2 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \<br>  -Q "BACKUP DATABASE TestDB TO DISK = N'/var/opt/mssql/data/testdb.bak' WITH NOFORMAT, NOINIT, NAME = 'demodb-full', SKIP, NOREWIND, NOUNLOAD, STATS = 10"<br></code></pre></td></tr></table></figure><p>當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會備份完成，如果備份成功畫面就會顯示「BACKUP DATABASE successfully …」：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Password: <br>10 percent processed.<br>20 percent processed.<br>30 percent processed.<br>40 percent processed.<br>50 percent processed.<br>60 percent processed.<br>70 percent processed.<br>80 percent processed.<br>90 percent processed.<br>Processed 312 pages for database 'TestDB', file 'TestDB' on file 1.<br>100 percent processed.<br>Processed 6 pages for database 'TestDB', file 'TestDB_log' on file 1.<br>BACKUP DATABASE successfully processed 318 pages in 0.348 seconds (7.139 MB/sec).<br></code></pre></td></tr></table></figure><h3 id="範例前置處理：刪除-container-和資料庫資料"><a class="header-anchor" href="#範例前置處理：刪除-container-和資料庫資料"></a>範例前置處理：刪除 container 和資料庫資料</h3><p>下面是要模擬把 container 刪除後，要如何將剛剛備份的資料庫資料 (也就是 <code>./data/testdb.bak</code> ) 還原，因此也要刪除透過 Volume 儲存的資料庫資料，如以下步驟：</p><ol><li>刪除 container</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢目前的正在執行的 container<br><span class="hljs-meta">$</span> docker ps<br><span class="hljs-meta">#</span> 強制刪除 container<br><span class="hljs-meta">$</span> docker rm -f sql2<br></code></pre></td></tr></table></figure><ol start="2"><li>刪除透過 Volume 儲存的資料庫資料</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查看剛剛刪除的 container 保存下來的 DB 資料檔 (TestDB_log.ldf 和 TestDB.mdf)<br><span class="hljs-meta">$</span> cd mssql/data<br><span class="hljs-meta">$</span> pwd<br>/home/titan/project/mssql/data<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>├── testdb.bak<br>├── TestDB_log.ldf   &lt;---<br>└── TestDB.mdf       &lt;---<br><span class="hljs-meta"><br>#</span> 刪除 TestDB.mdf 和 TestDB_log.ldf<br><span class="hljs-meta">$</span> sudo rm TestDB*<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>└── testdb.bak<br></code></pre></td></tr></table></figure><ol start="3"><li>在建立一個新的 container (用來做還原資料庫用的)</li></ol><p>先回到專案的根目錄：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> pwd<br>/home/titan/project/mssql/data<br><span class="hljs-meta">$</span> cd ../..<br><span class="hljs-meta">$</span> pwd<br>/home/titan/project<br></code></pre></td></tr></table></figure><p>接著建立一個新的 container，名稱叫做 sql3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1403:1433 --name sql3 \<br>  -v `pwd`/mssql:/var/opt/mssql \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><h3 id="還原資料庫"><a class="header-anchor" href="#還原資料庫"></a>還原資料庫</h3><p>使用 sqlcmd 連接到 SQL Server，並還原 TestDB 資料庫 (要還原的備份檔存至 <code>./data/testdb.bak</code> )：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql3 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \<br>  -Q "RESTORE DATABASE TestDB FROM DISK = N'/var/opt/mssql/data/testdb.bak' WITH  FILE = 1, NOUNLOAD, REPLACE, STATS = 5"<br></code></pre></td></tr></table></figure><p>當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會還原完成，如果還原成功畫面就會顯示「RESTORE DATABASE successfully …」：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">Password: <br>6 percent processed.<br>11 percent processed.<br>15 percent processed.<br>20 percent processed.<br>25 percent processed.<br>31 percent processed.<br>36 percent processed.<br>41 percent processed.<br>45 percent processed.<br>50 percent processed.<br>57 percent processed.<br>61 percent processed.<br>66 percent processed.<br>70 percent processed.<br>75 percent processed.<br>82 percent processed.<br>86 percent processed.<br>91 percent processed.<br>95 percent processed.<br>100 percent processed.<br>Processed 344 pages for database 'TestDB', file 'TestDB' on file 1.<br>Processed 7 pages for database 'TestDB', file 'TestDB_log' on file 1.<br>RESTORE DATABASE successfully processed 351 pages in 0.321 seconds (8.530 MB/sec).<br></code></pre></td></tr></table></figure><p>檢查一下剛剛刪除的 <code>TestDB.mdf</code> 和 <code>TestDB_log.ldf</code> 都正確的還原了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> cd mssql/data<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>├── testdb.bak<br>├── TestDB_log.ldf   &lt;---<br>└── TestDB.mdf       &lt;---<br></code></pre></td></tr></table></figure><p>使用 <code>select</code> SQL 指令可以看到資料確實已還原：</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_22-04-08.png" alt=""></p><h2 id="使用-azure-data-studio-備份或還原資料庫"><a class="header-anchor" href="#使用-azure-data-studio-備份或還原資料庫"></a>使用 Azure Data Studio 備份或還原資料庫</h2><p>如果覺得打指令很麻煩，其實 Azure Data Studio、<a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-manage-ssms?view=sql-server-2017" target="_blank" rel="noopener">SQL Server Management Studio (SSMS)</a>、<a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-develop-use-ssdt?view=sql-server-2017" target="_blank" rel="noopener">SQL Server Data Tools (SSDT)</a> 或 <a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-develop-use-vscode?view=sql-server-2017" target="_blank" rel="noopener">Visual Studio Code (VS Code) 的 mssql 擴充功能</a> 都有提供 GUI 的介面，可以直接備份或還原資料庫。</p><p>下圖是 Azure Data Studio 備份或還原資料庫的畫面：</p><p><img src="https://i.imgur.com/wexszt5.png" alt=""></p><blockquote><p>詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/azure-data-studio/tutorial-backup-restore-sql-server?view=sql-server-2017" target="_blank" rel="noopener">備份與還原的資料庫 - Azure Data Studio | Microsoft Docs</a> 文件。</p></blockquote><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/quickstart-install-connect-docker?view=sql-server-2017" target="_blank" rel="noopener">開始使用 Docker （Linux 上執行 SQL Server） 上的 SQL Server 容器 - SQL Server | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-configure-docker?view=sql-server-2017" target="_blank" rel="noopener">在 Docker 上的 SQL Server 組態選項 - SQL Server | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/tutorial-restore-backup-in-sql-server-container?view=sql-server-2017" target="_blank" rel="noopener">在 Docker 中的 SQL Server 資料庫還原 - SQL Server | Microsoft Docs</a></li><li><a href="https://github.com/Microsoft/mssql-docker/tree/master/linux/preview" target="_blank" rel="noopener">Github repo: Microsoft/mssql-docker</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> DevOps </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Container </tag>
            
            <tag> SQL Server </tag>
            
            <tag> Linux </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>將 Hexo 的 Markdown 渲染引擎換成 markdown-it</title>
      <link href="/article/hexo-markdown-it.html"/>
      <url>/article/hexo-markdown-it.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/hexo.jpg" alt=""></p><p>個人很常用 HackMD 紀錄筆記，希望 blog 也可以支援 HackMD 的 Markdown 格式，因此本篇的目標就是要將 Hexo 原本的 Markdown 渲染引擎 <code>marked</code>，換成 HackMD 的 Markdown 渲染引擎：<code>markdown-it</code>。</p><a id="more"></a><h2 id="更換渲染引擎"><a class="header-anchor" href="#更換渲染引擎"></a>更換渲染引擎</h2><p>Hexo 預設的 markdown 渲染引擎是 <a href="https://github.com/markedjs/marked" target="_blank" rel="noopener"><code>marked</code></a>，並使用 <a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener"><code>hexo-renderer-marked</code></a> 此 Hexo 外掛來將 Markdown 轉換成靜態檔案 HTML，但因前面提到的需求，所以要刪除原本的渲染引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm uninstall hexo-renderer-marked --save<br></code></pre></td></tr></table></figure><p>安裝我們要改用的 Markdown 渲染引擎：<code>markdown-it</code>，而使用此渲染引擎的 Hexo 外掛就是 <a href="https://github.com/hexojs/hexo-renderer-markdown-it" target="_blank" rel="noopener"><code>hexo-renderer-markdown-it</code></a>，所以要在 hexo 的專案中安裝此外掛：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm install git+https://github.com/hexojs/hexo-renderer-markdown-it.git --save<br></code></pre></td></tr></table></figure><p>為何安裝 NPM 套件時要指定 github 的 repo 呢？因為 <code>hexo-renderer-markdown-it</code> 此 NPM 套件的程式沒有更新成 Github 上面的程式版本，請確定剛剛安裝套件中，<code>node_modules\hexo-renderer-markdown-it\lib\renderer.js</code> 這個檔案內的下面這段程式碼是否相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (opt.plugins) &#123;<br>  parser = opt.plugins.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">parser, pugs</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (pugs <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> &amp;&amp; pugs.name) &#123;<br>      <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs.name), pugs.options);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs));<br>    &#125;<br>  &#125;, parser);<br>&#125;<br></code></pre></td></tr></table></figure><p>若是從 NPM 下載的套件版本 (也就是直接使用 <code>npm install hexo-renderer-markdown-it --save</code> 此指令)，會少幾句程式，少了可在載入 <code>markdown-it</code> 的外掛時為該外掛設定所需的 options：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (opt.plugins) &#123;<br>  parser = opt.plugins.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">parser, pugs</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs));<br>  &#125;, parser);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安裝渲染引擎外掛套件"><a class="header-anchor" href="#安裝渲染引擎外掛套件"></a>安裝渲染引擎外掛套件</h2><p>我們可以參考 <a href="https://github.com/hackmdio/codimd/blob/master/package.json" target="_blank" rel="noopener">HackMD</a> 的相依套件，只要是名為 <code>markdown-it-xxx</code> 的套件就是渲染引擎 <code>markdown-it</code> 的外掛：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  "dependencies": &#123;<br>    // ...<br>    "markdown-it": "^8.2.2",<br>    "markdown-it-abbr": "^1.0.4",<br>    "markdown-it-container": "^2.0.0",<br>    "markdown-it-deflist": "^2.0.1",<br>    "markdown-it-emoji": "^1.3.0",<br>    "markdown-it-footnote": "^3.0.1",<br>    "markdown-it-imsize": "^2.0.1",<br>    "markdown-it-ins": "^2.0.0",<br>    "markdown-it-mark": "^2.0.0",<br>    "markdown-it-mathjax": "^2.0.0",<br>    "markdown-it-regexp": "^0.4.0",<br>    "markdown-it-sub": "^1.0.0",<br>    "markdown-it-sup": "^1.0.0",<br>    // ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而下列是我選擇要安裝的外掛：</p><ul><li><a href="https://github.com/markdown-it/markdown-it-abbr" target="_blank" rel="noopener">markdown-it-abbr</a></li><li><a href="https://github.com/markdown-it/markdown-it-container" target="_blank" rel="noopener">markdown-it-container</a></li><li><a href="https://github.com/markdown-it/markdown-it-deflist" target="_blank" rel="noopener">markdown-it-deflist</a></li><li><a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="noopener">markdown-it-emoji</a></li><li><a href="https://github.com/markdown-it/markdown-it-footnote" target="_blank" rel="noopener">markdown-it-footnote</a></li><li><a href="https://github.com/tatsy/markdown-it-imsize" target="_blank" rel="noopener">markdown-it-imsize</a></li><li><a href="https://github.com/markdown-it/markdown-it-ins" target="_blank" rel="noopener">markdown-it-ins</a></li><li><a href="https://github.com/markdown-it/markdown-it-mark" target="_blank" rel="noopener">markdown-it-mark</a></li><li><a href="https://github.com/rlidwka/markdown-it-regexp" target="_blank" rel="noopener">markdown-it-regexp</a></li><li><a href="https://github.com/markdown-it/markdown-it-sub" target="_blank" rel="noopener">markdown-it-sub</a></li><li><a href="https://github.com/markdown-it/markdown-it-sup" target="_blank" rel="noopener">markdown-it-sup</a></li><li><a href="https://github.com/linsir/markdown-it-task-checkbox" target="_blank" rel="noopener">markdown-it-task-checkbox</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm i markdown-it-abbr markdown-it-checkbox markdown-it-container markdown-it-deflist markdown-it-emoji markdown-it-footnote markdown-it-imsize markdown-it-ins markdown-it-mark markdown-it-regexp markdown-it-sub markdown-it-sup --save<br></code></pre></td></tr></table></figure><h3 id="markdown-it-mathjax"><a class="header-anchor" href="#markdown-it-mathjax"></a>markdown-it-mathjax</h3><p>為何我未安裝 <code>markdown-it-mathjax</code> 這個外掛？這是因為…我之後再單獨寫一篇文章來介紹如何在 Markdown 加上數學式 MathJax。</p><h3 id="markdown-it-task-checkbox"><a class="header-anchor" href="#markdown-it-task-checkbox"></a>markdown-it-task-checkbox</h3><p>為何我會比 HackMD 多安裝 <code>markdown-it-task-checkbox</code> 這個外掛？</p><p>有使用過 HackMD 的朋友都知道，只要在 HackMD 輸入下列 Markdown 語法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown">[ ] task 1<br>[x] task 2<br></code></pre></td></tr></table></figure><p>就會被轉換成 HTML 的 checkbox：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item-checkbox "</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>task 1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item-checkbox"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">""</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>task 2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>畫面會看到一個未被勾選以及一個已被勾選的 checkbox：</p><p><img src="../images/hexo-markdown-it/markdown-it_checkbox.png" alt=""></p><p>不過 HackMD 不是靠著 Markdown 渲染引擎 <code>markdown-it</code> 的外掛來轉換成 HTML 的，而是直接利用正規表示法 (Regular Expression) 找到 <code>[ ]</code> 或 <code>[x]</code> 的文字，再將這些文字直接轉換成 HTML 的 checkbox。我擷取了 HackMD 的這段程式邏輯，若想看詳細的原始碼可至 HackMD 的原始碼內的 <a href="https://github.com/hackmdio/codimd/blob/master/public/js/extra.js#L263" target="_blank" rel="noopener"><code>public/js/extra.js</code> 檔案中的第 263 行左右</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\s*\[[x ]\]\s*/</span>.test(html)) &#123;<br>  li.innerHTML = html.replace(<span class="hljs-regexp">/^\s*\[ \]\s*/</span>, <span class="hljs-string">`&lt;input type="checkbox" class="task-list-item-checkbox" <span class="hljs-subst">$&#123;disabled&#125;</span>&gt;&lt;label&gt;&lt;/label&gt;`</span>)<br>            .replace(<span class="hljs-regexp">/^\s*\[x\]\s*/</span>, <span class="hljs-string">`&lt;input type="checkbox" class="task-list-item-checkbox" checked <span class="hljs-subst">$&#123;disabled&#125;</span>&gt;&lt;label&gt;&lt;/label&gt;`</span>)<br>  <span class="hljs-keyword">if</span> (li.tagName.toLowerCase() !== <span class="hljs-string">'li'</span>) &#123;<br>    li.parentElement.setAttribute(<span class="hljs-string">'class'</span>, <span class="hljs-string">'task-list-item'</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    li.setAttribute(<span class="hljs-string">'class'</span>, <span class="hljs-string">'task-list-item'</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="設定-config-yml"><a class="header-anchor" href="#設定-config-yml"></a>設定 _config.yml</h2><p>將下面這些設定在根目錄的 <code>_config.yml</code> 設定檔中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment"># Docs: https://github.com/hexojs/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br><span class="hljs-attr">  render:</span><br><span class="hljs-attr">    html:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    xhtmlOut:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    breaks:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    linkify:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    typographer:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    quotes:</span> <span class="hljs-string">'“”‘’'</span><br><span class="hljs-attr">  plugins:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-abbr</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-footnote</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-ins</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-sub</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-sup</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-deflist</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-imsize</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-mark</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-regexp</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-task-checkbox</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">success</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">warning</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">danger</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-deflist</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-emoji</span><br><span class="hljs-attr">      options:</span><br><span class="hljs-attr">        shortcuts:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  anchors:</span><br><span class="hljs-attr">    level:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">    collisionSuffix:</span> <span class="hljs-string">'v'</span><br><span class="hljs-attr">    permalink:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    permalinkClass:</span> <span class="hljs-string">header-anchor</span><br><span class="hljs-attr">    permalinkSymbol:</span> <span class="hljs-string">''</span><br></code></pre></td></tr></table></figure><blockquote><p>想了解設定詳情可參考 <a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Advanced-Configuration" target="_blank" rel="noopener">Advanced Configuration | hexojs/hexo-renderer-markdown-it Wiki</a> 官方文件。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 載入圖片</title>
      <link href="/article/flutter-loading-images.html"/>
      <url>/article/flutter-loading-images.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>要如何在 Flutter 內載入圖片？這篇做個小記錄。</p><a id="more"></a><h2 id="指定資源"><a class="header-anchor" href="#指定資源"></a>指定資源</h2><p>Flutter 是在根目錄內的 <code>pubspec.yaml</code> 檔案來設定應用程式所需的資源，設定的資源沒有順序關係。</p><p>若要指定某些資源，資源的路徑是相對於 <code>pubspec.yaml</code> 檔案的相對路徑：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/avatar.jpg</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/background.jpg</span><br></code></pre></td></tr></table></figure><p>也可以指定某個目錄，代表可以存取到這個目錄下的所有資源，但記得要在目錄的最後加上 <code>/</code> 這個符號：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/</span><br></code></pre></td></tr></table></figure><p>若要存取子目錄內的資源，請記得要另外為子目錄設定，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/</span><br></code></pre></td></tr></table></figure><h2 id="載入圖片"><a class="header-anchor" href="#載入圖片"></a>載入圖片</h2><p>可使用 <code>Image.asset()</code> 來載入圖片，裡面的參數就是圖片的路徑：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> Image.asset(<span class="hljs-string">'assets/images/background.jpg'</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或是在 <code>Image()</code> 內的 <code>image</code> 參數使用 <code>AssetImage()</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> Image(<br>    image: AssetImage(<span class="hljs-string">'assets/images/background.jpg'</span>),<br>  );<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最後顯示的結果會一樣：</p><p><img src="../images/flutter-loading-images/flutter_loading-images.png" alt=""></p><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://flutter.io/docs/development/ui/assets-and-images" target="_blank" rel="noopener">Adding assets and images - Flutter</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Native App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
            <tag> Native App </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python - 日誌 (logging) 模組</title>
      <link href="/article/python-logging.html"/>
      <url>/article/python-logging.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/python.png" alt=""></p><p>開發 Python 時，很常使用 <code>print()</code> 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 <code>print()</code>。而 Python 內建提供了 <code>logging</code> 模組可以用來取代 <code>print()</code>，<code>logging</code> 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 <code>logging</code> 模組。</p><a id="more"></a><h2 id="載入-logging-模組"><a class="header-anchor" href="#載入-logging-模組"></a>載入 logging 模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br></code></pre></td></tr></table></figure><h2 id="logging-等級"><a class="header-anchor" href="#logging-等級"></a>logging 等級</h2><p><code>logging</code> 模組預先定義了 6 種等級以及對應的 log 輸出函數 (除了 <code>logging.NOTSET</code> 沒有對應的輸出函數)：</p><table><thead><tr><th>等級</th><th>等級數值</th><th>輸出函數</th><th>說明</th></tr></thead><tbody><tr><td>NOTSET</td><td>0</td><td>無對應的輸出函數</td><td>未設定</td></tr><tr><td>DEBUG</td><td>10</td><td><code>logging.debug()</code></td><td>除錯</td></tr><tr><td>INFO</td><td>20</td><td><code>logging.info()</code></td><td>訊息</td></tr><tr><td>WARNING</td><td>30</td><td><code>logging.warning()</code></td><td>警告</td></tr><tr><td>ERROR</td><td>40</td><td><code>logging.error()</code></td><td>錯誤</td></tr><tr><td>CRITICAL</td><td>50</td><td><code>logging.critical()</code></td><td>嚴重錯誤</td></tr></tbody></table><p>若要查詢各等級的數值，可直接呼叫該等級：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>print(logging.NOTSET)   <span class="hljs-comment"># 0</span><br>print(logging.DEBUG)    <span class="hljs-comment"># 10</span><br>print(logging.INFO)     <span class="hljs-comment"># 20</span><br>print(logging.WARNING)  <span class="hljs-comment"># 30</span><br>print(logging.ERROR)    <span class="hljs-comment"># 40</span><br>print(logging.CRITICAL) <span class="hljs-comment"># 50</span><br></code></pre></td></tr></table></figure><p>若要用等級數值來查詢是哪個等級的訊息，可使用 <code>logging.getLevelName(level)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>print(logging.getLevelName(<span class="hljs-number">0</span>))    <span class="hljs-comment"># NOTSET</span><br>print(logging.getLevelName(<span class="hljs-number">10</span>))   <span class="hljs-comment"># DEBUG</span><br>print(logging.getLevelName(<span class="hljs-number">20</span>))   <span class="hljs-comment"># INFO</span><br>print(logging.getLevelName(<span class="hljs-number">30</span>))   <span class="hljs-comment"># WARNING</span><br>print(logging.getLevelName(<span class="hljs-number">40</span>))   <span class="hljs-comment"># ERROR</span><br>print(logging.getLevelName(<span class="hljs-number">50</span>))   <span class="hljs-comment"># CRITICAL</span><br></code></pre></td></tr></table></figure><h2 id="輸出-logging"><a class="header-anchor" href="#輸出-logging"></a>輸出 logging</h2><p><code>logging</code> 模組預設等級為 <code>WARNING</code>，大於或等於 <code>WARNING</code> 等級的訊息才會被記錄：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果，可以看到比 <code>WARNING</code> 等級還要低的訊息有 <code>DEBUG</code> 和 <code>INFO</code> 就不會被輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">WARNING:root:warning message<br>ERROR:root:error message<br>CRITICAL:root:critical message<br></code></pre></td></tr></table></figure><p>若將等級設為 <code>DEBUG</code>，就會將所有等級的訊息都輸出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果，預設的訊息輸出格式是 <code>%(levelname)s:%(name)s:%(message)s</code> (後面會介紹如何自訂輸出格式)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEBUG:root:debug message<br>INFO:root:info message<br>WARNING:root:warning message<br>ERROR:root:error message<br>CRITICAL:root:critical message<br></code></pre></td></tr></table></figure><h2 id="紀錄堆疊追蹤資訊"><a class="header-anchor" href="#紀錄堆疊追蹤資訊"></a>紀錄堆疊追蹤資訊</h2><p><code>logging</code> 模組也提供可以紀錄完整的堆疊追蹤 (stack traces)，若在 <code>logging.error()</code> 加上 <code>exc_info</code> 參數，並將該參數設為 <code>True</code>，就可以紀錄 Exception，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.error(<span class="hljs-string">"Catch an exception."</span>, exc_info=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p>若沒有加上 <code>exc_info=True</code> 則無法紀錄 Exception：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.error(<span class="hljs-string">"Catch an exception."</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br></code></pre></td></tr></table></figure><p>若要在 logging 內紀錄 exception 訊息，可使用 <code>logging.exception()</code>，它會將 exception 添加至訊息中，此方法的等級為 <code>ERROR</code>，也就是說 <code>logging.exception()</code> 就等同於 <code>logging.error(exc_info=True)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.exception(<span class="hljs-string">'Catch an exception.'</span>)<br></code></pre></td></tr></table></figure><p>輸出結果和 <code>logging.error(exc_info=True)</code> 相同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p>若不想使用 <code>ERROR</code> 級別紀錄 exception 訊息，可使用 <code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>CRITICAL</code> 級別並加上參數 <code>exc_info=True</code> 的設定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG)<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.debug(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.info(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.warning(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.critical(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEBUG:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>INFO:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>WARNING:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>CRITICAL:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><h2 id="自訂-logging-輸出格式"><a class="header-anchor" href="#自訂-logging-輸出格式"></a>自訂 logging 輸出格式</h2><p>預設的訊息輸出格式只有 <code>levelname</code>、<code>name</code>、<code>message</code>，下面是其他相關的資訊：</p><table><thead><tr><th>格式化字串</th><th>說明</th></tr></thead><tbody><tr><td><code>%(asctime)s</code></td><td>日期時間, 格式為 <code>YYYY-MM-DD HH:mm:SS,ms</code>，例如：2018-12-13 17:20:30,567</td></tr><tr><td><code>%(filename)s</code></td><td>模組檔名</td></tr><tr><td><code>%(funcName)s</code></td><td>函數名稱</td></tr><tr><td><code>%(levelname)s</code></td><td>日誌的等級名稱</td></tr><tr><td><code>%(levelno)s</code></td><td>日誌的等級數值</td></tr><tr><td><code>%(lineno)d</code></td><td>呼叫日誌函數所在的行數</td></tr><tr><td><code>%(message)s</code></td><td>訊息</td></tr><tr><td><code>%(module)s</code></td><td>模組名稱</td></tr><tr><td><code>%(name)s</code></td><td>logger 的名稱</td></tr><tr><td><code>%(pathname)s</code></td><td>檔案的完整路徑 (如果可用)</td></tr><tr><td><code>%(process)d</code></td><td>process ID (如果可用)</td></tr><tr><td><code>%(thread)d</code></td><td>執行緒 ID (如果可用)</td></tr><tr><td><code>%(threradName)s</code></td><td>執行緒名稱</td></tr></tbody></table><p>可將這些資訊加入 <code>logging.basicConfig()</code> 內的 <code>format</code> 參數：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>logging.basicConfig(level=logging.DEBUG, format=FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是自訂訊息的輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">2018-12-13 17:40:34,604 DEBUG: debug message<br>2018-12-13 17:40:34,604 INFO: info message<br>2018-12-13 17:40:34,604 WARNING: warning message<br>2018-12-13 17:40:34,604 ERROR: error message<br>2018-12-13 17:40:34,608 CRITICAL: critical message<br></code></pre></td></tr></table></figure><h3 id="自訂輸出的時間格式"><a class="header-anchor" href="#自訂輸出的時間格式"></a>自訂輸出的時間格式</h3><p>在 <code>logging.basicConfig()</code> 內的 <code>datefmt</code> 參數可設定所需的時間格式，要使用 <code>time.strftime()</code> 接受的時間格式：</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td>%Y</td><td>長年份，例如：2019</td></tr><tr><td>%y</td><td>短年份，例如：19</td></tr><tr><td>%m</td><td>月份：01 ~ 12</td></tr><tr><td>%B</td><td>月份完整名稱，例如：February</td></tr><tr><td>%b</td><td>月份縮寫名稱，例如：Feb</td></tr><tr><td>%d</td><td>日期：01 ~ 31</td></tr><tr><td>%H</td><td>小時 (24 小時制)：00 ~ 23</td></tr><tr><td>%I</td><td>小時 (12 小時制)：01 ~ 12</td></tr><tr><td>%w</td><td>星期：0 ~ 6，0 代表星期日</td></tr><tr><td>%A</td><td>星期完整名稱，例如：Friday</td></tr><tr><td>%a</td><td>星期縮寫名稱，例如：Fri</td></tr><tr><td>%P</td><td>AM 或 PM</td></tr><tr><td>%M</td><td>分鐘：00 ~ 59</td></tr><tr><td>%S</td><td>秒：00 ~ 61</td></tr></tbody></table><blockquote><p><code>time.strftime()</code> 的時間參數詳情可參考 Python 官方的 <a href="https://docs.python.org/3/library/time.html#time.strftime" target="_blank" rel="noopener">time — Time access and conversions — Python 3.7.2 documentation</a> 文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>LOGGING_FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>DATE_FORMAT = <span class="hljs-string">'%Y%m%d %H:%M:%S'</span><br>logging.basicConfig(level=logging.DEBUG, format=LOGGING_FORMAT, datefmt=DATE_FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是自訂訊息的輸出結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">20190107 08:57:07 DEBUG: debug message<br>20190107 08:57:07 INFO: info message<br>20190107 08:57:07 WARNING: warning message<br>20190107 08:57:07 ERROR: error message<br>20190107 08:57:07 CRITICAL: critical message<br></code></pre></td></tr></table></figure><h2 id="儲存-logging"><a class="header-anchor" href="#儲存-logging"></a>儲存 logging</h2><p>只要在 <code>logging.basicConfig()</code> 內的 <code>filename</code> 參數設定要儲存的日誌檔名，就可以將 logging 儲存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>logging.basicConfig(level=logging.DEBUG, filename=<span class="hljs-string">'myLog.log'</span>, filemode=<span class="hljs-string">'w'</span>, format=FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>預設 <code>filemode</code> 參數是設為 <code>a</code>，代表 append (附加) 的意思，每次執行程式時，Logging 會將新的訊息加在舊的訊息後面，不會覆蓋舊的訊息。若要改成新訊息覆蓋就訊息，那可以將 <code>filemode</code> 參數設為 <code>w</code>，代表 write 的意思。</p><p>下面是剛剛執行後儲存的 <code>myLog.log</code> 日誌檔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">2018-12-13 17:47:18,686 DEBUG: debug message<br>2018-12-13 17:47:18,687 INFO: info message<br>2018-12-13 17:47:18,687 WARNING: warning message<br>2018-12-13 17:47:18,687 ERROR: error message<br>2018-12-13 17:47:18,687 CRITICAL: critical message<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方文件 <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener">Logging facility for Python — Python documentation</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Logging </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>設定 Windows 工作排程定期執行 Python 爬蟲程式</title>
      <link href="/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html"/>
      <url>/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/python_crawler.png" alt=""></p><p>如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。</p><a id="more"></a><p>最近有些資料想透過爬蟲來擷取，而且希望可以定期 (例如：每 10 分鐘一次) 自動執行爬蟲程式，因此就有了這篇筆記。下面介紹如何以 Windows 工作排程器來定期執行爬蟲程式。</p><h2 id="目標"><a class="header-anchor" href="#目標"></a>目標</h2><p>每 10 分鐘自動執行 Python 爬蟲程式，將爬蟲抓到的最新降雨量資料存入 CSV 檔內收集。</p><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><ul><li>Windows</li><li>Python 環境：建議安裝 Anaconda，可參考 <a href="./create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a></li><li>Python 套件 (這是本篇爬蟲範例所需的相依套件，可依各自需求來選擇)<ul><li><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a></li><li><a href="http://www.numpy.org/" target="_blank" rel="noopener">Numpy</a></li><li><a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">Requests</a></li></ul></li></ul><h2 id="python-爬蟲程式原始碼"><a class="header-anchor" href="#python-爬蟲程式原始碼"></a>Python 爬蟲程式原始碼</h2><p>source code: <a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.py" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo/crawler.py</a></p><p>簡單說明一下程式的執行步驟：</p><ol><li>利用 Python 的 <a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">Requests</a> 套件來建立 HTTP 的 GET 請求，從中央氣象局提供的開放資料 API 中取得資料，回傳的格式是 JSON</li><li>解析 API 回傳的 JSON 資料，並將 JSON 轉成 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 的 <code>DataFrame</code> 型別的資料格式</li><li>將 <code>DataFrame</code> 儲存成 CSV 檔保存資料</li></ol><blockquote><p>若想了解中央氣象局開放資料的相關內容，詳情可參考 <a href="https://opendata.cwb.gov.tw/devManual/insrtuction" target="_blank" rel="noopener">中央氣象局開放資料 - 開發指南</a>。</p></blockquote><h2 id="python-爬蟲程式的批次檔"><a class="header-anchor" href="#python-爬蟲程式的批次檔"></a>Python 爬蟲程式的批次檔</h2><p>建立一個副檔名為 <code>.bat</code> 的批次檔，批次檔是用來執行 Python 爬蟲程式，因此就能讓 Windows 工作排程器在定期時間自動執行批次檔，以達成自動化執行爬蟲的目的。</p><p>下面就來說明批次檔每行都做了甚麼：</p><ul><li>第一行：切到指定目錄</li><li>第二行：指定 Python 虛擬環境 (可參考 <a href="./create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a>。如果要在全域環境下執行就不需要這行)</li><li>第三行：執行 Python 爬蟲程式</li><li>第四行：若想查看 Python 爬蟲程式執行過程中所輸出 (也就是執行 <code>print</code> 方法的部分) 內容，就需要取消這行的註解<ul><li><code>REM</code>：單行註解</li><li><code>pause</code>：用來暫停批次檔的執行</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /d D:/Project/Python/cwb-opendata-crawler<br>call activate dev<br>call python crawler.py<br>REM pause<br></code></pre></td></tr></table></figure><p>source code: <a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.bat" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo/crawler.bat</a></p><h2 id="windows-工作排程器-簡介"><a class="header-anchor" href="#windows-工作排程器-簡介"></a>Windows 工作排程器 簡介</h2><p>可預先設定工作在特定時間或指定時間時，會自動執行程式或批次檔以達成工作自動化。下圖為 Windows 10 的工作排程器介面：</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-46-33.png" alt=""></p><h2 id="建立工作-設定定期執行爬蟲程式"><a class="header-anchor" href="#建立工作-設定定期執行爬蟲程式"></a>建立工作，設定定期執行爬蟲程式</h2><p>開啟 Windows 的「工作排程器」，點擊右上角的「建立工作」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-47-29.png" alt=""></p><p>自訂工作名稱，若有權限需求可勾選「以最高權限執行」選項</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-48-27.png" alt=""></p><p>接著新增「觸發程序」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_22-13-47.png" alt=""></p><p>設定工作的開始時間，並選擇「僅一次」，以及設定工作要每隔多久就執行一次，並且要持續多久時間</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-49-02.png" alt=""></p><p>然後新增「動作」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_22-14-07.png" alt=""></p><p>設定要自動執行的程式，這邊選擇的就是剛剛提到的 <a href="#Python-%E7%88%AC%E8%9F%B2%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%89%B9%E6%AC%A1%E6%AA%94">批次檔</a> (<a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.bat" target="_blank" rel="noopener">原始碼</a>)</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-49-54.png" alt=""></p><p>如果設定好了就可以按確定完成建立工作，此時就會看到在「工作排程器程式庫」內的工作清單中，多了剛剛新增的工作</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-46-05.png" alt=""></p><h2 id="成果"><a class="header-anchor" href="#成果"></a>成果</h2><p>可以看到爬蟲程式會在定期自動執行，執行的時候會跳出一個 <code>cmd</code> 視窗。若剛剛提到的 <a href="#Python-%E7%88%AC%E8%9F%B2%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%89%B9%E6%AC%A1%E6%AA%94">批次檔</a> 內沒有將 <code>REM pause</code> 這行註解，就會看到爬蟲程式執行完成後，不會自動關閉 <code>cmd</code> 視窗，這是為了可以立即看到該次爬蟲執行過程中輸出的訊息。</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-12-01_00-19-10.png" alt=""></p><p>下圖就是自動執行爬蟲所抓到的資料：</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-12-01_09-14-48.png" alt=""></p><blockquote><p>完整 source code：<a href="https://github.com/titangene/cwb-opendata-crawler-demo" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Python Requests </tag>
            
            <tag> Crawler </tag>
            
            <tag> Windows </tag>
            
            <tag> Windows 工作排程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Conda 建立虛擬環境和管理相依套件</title>
      <link href="/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html"/>
      <url>/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/python_anaconda.png" alt=""></p><p>學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。</p><a id="more"></a><h2 id="anaconda"><a class="header-anchor" href="#anaconda"></a>Anaconda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/anaconda-logo.png" alt=""></p><p>Anaconda 是最受歡迎的 Python 資料科學 (Data Science) 平台，它特點就是本來就包含了各種數據分析、科學計算的相關套件 (例如：NumPy、SciPy、Matplotlib、SymPy、Pandas … 等)，而 Anaconda 的套件管理工具就是 conda。</p><h2 id="conda"><a class="header-anchor" href="#conda"></a>Conda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/conda-logo.png" alt=""></p><p>Conda 是一個開源的套件與環境管理的系統，可以在 Windows、macOS 和 Linux 上使用。可利用 Conda 來安裝、執行、更新套件以及其相依的套件，並且還可用來建立不同的開發環境 (例如：不同環境有不同的 Python 版本)。</p><!-- more --><h2 id="安裝-anaconda"><a class="header-anchor" href="#安裝-anaconda"></a>安裝 Anaconda</h2><p>至 <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda</a> 官網下載並安裝，建議選擇 Python 3.x 的版本。</p><h2 id="建立虛擬環境"><a class="header-anchor" href="#建立虛擬環境"></a>建立虛擬環境</h2><p>從指定套件列表中建立新的 conda 環境：</p><ul><li><code>-n</code>，<code>--name</code>：設定環境名稱</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 安裝包含 Anaconda 發行版的套件<br><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; anaconda<br><span class="hljs-meta"><br>#</span> 指定 Python 版本<br><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; python=3.6<br></code></pre></td></tr></table></figure><ul><li><code>-e</code>，<code>--envs</code>：列出已建立的環境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 顯示虛擬環境列表，並顯示正在使用的虛擬環境<br><span class="hljs-meta">$</span> conda info -e<br><span class="hljs-meta">#</span> conda environments:<br><span class="hljs-meta">#</span><br>base                  *  D:\Users\Titan\Anaconda3<br>hello                    D:\Users\Titan\Anaconda3\envs\hello<br></code></pre></td></tr></table></figure><p>使用或 <code>activate</code> 至指定環境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> Windows<br><span class="hljs-meta">$</span> activate &lt;environment&gt;<br><span class="hljs-meta"><br>#</span> Linux and macOS<br><span class="hljs-meta">$</span> source activate &lt;environment&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 顯示虛擬環境列表，並顯示正在使用的虛擬環境<br><span class="hljs-meta">$</span> conda info -e<br><span class="hljs-meta">#</span> conda environments:<br><span class="hljs-meta">#</span><br>base                     D:\Users\Titan\Anaconda3<br>hello                 *  D:\Users\Titan\Anaconda3\envs\hello<br></code></pre></td></tr></table></figure><blockquote><p><code>*</code> 代表目前正在使用的虛擬環境</p></blockquote><h2 id="離開虛擬環境"><a class="header-anchor" href="#離開虛擬環境"></a>離開虛擬環境</h2><p>如果要將現在環境改回預設值 <code>base</code> (離開目前環境) 可使用下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> Windows<br><span class="hljs-meta">$</span> deactivate<br><span class="hljs-meta"><br>#</span> Linux and macOS<br><span class="hljs-meta">$</span> source deactivate<br></code></pre></td></tr></table></figure><h2 id="利用-conda-安裝套件"><a class="header-anchor" href="#利用-conda-安裝套件"></a>利用 conda 安裝套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 安裝多個套件<br><span class="hljs-meta">$</span> conda install &lt;package-1&gt; &lt;package-2&gt;<br></code></pre></td></tr></table></figure><h2 id="查看資訊"><a class="header-anchor" href="#查看資訊"></a>查看資訊</h2><p>查看 conda 目前版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda -V<br>conda 4.5.11<br></code></pre></td></tr></table></figure><p>查看目前環境已安裝的套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda list<br><span class="hljs-meta">#</span> packages in environment at D:\Users\Titan\Anaconda3:<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span> Name                    Version                   Build  Channel<br>...<br>jupyter                   1.0.0                    py35_3<br>jupyter_client            5.2.3                    py35_0<br>jupyter_console           4.1.1                    py35_0<br>jupyter_core              4.4.0            py35h629ba7f_0<br>jupyterlab                0.32.1                    &lt;pip&gt;<br>jupyterlab-launcher       0.10.5                    &lt;pip&gt;<br>...<br></code></pre></td></tr></table></figure><p>查看 conda 是否有某套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda search &lt;package&gt;<br><span class="hljs-meta"><br>$</span> conda search pandas<br>Loading channels: done<br><span class="hljs-meta">#</span> Name                  Version           Build  Channel<br>pandas                    0.9.0      np16py27_0  pkgs/free<br>pandas                    0.9.1      np16py27_0  pkgs/free<br>...<br></code></pre></td></tr></table></figure><p>如果 conda 沒有該套件，可以使用 pip 來安裝套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 安裝套件<br><span class="hljs-meta">$</span> pip install &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 更新套件<br><span class="hljs-meta">$</span> pip install --upgrade &lt;package&gt;<br></code></pre></td></tr></table></figure><h2 id="刪除套件"><a class="header-anchor" href="#刪除套件"></a>刪除套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 刪除環境內的套件<br><span class="hljs-meta">$</span> conda remove -n &lt;environment&gt; &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 刪除目前環境內的套件<br><span class="hljs-meta">$</span> conda remove &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 刪除多個套件<br><span class="hljs-meta">$</span> conda remove &lt;package-1&gt; &lt;package-2&gt;<br></code></pre></td></tr></table></figure><h2 id="更新套件"><a class="header-anchor" href="#更新套件"></a>更新套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 更新 conda<br><span class="hljs-meta">$</span> conda update conda<br><span class="hljs-meta"><br>#</span> 更新 Anaconda<br><span class="hljs-meta">$</span> conda update anaconda<br><span class="hljs-meta"><br>#</span> 更新 Python<br><span class="hljs-meta">$</span> conda update python<br><span class="hljs-meta"><br>#</span> 更新特定套件<br><span class="hljs-meta">$</span> conda update &lt;package&gt;<br></code></pre></td></tr></table></figure><h2 id="刪除虛擬環境"><a class="header-anchor" href="#刪除虛擬環境"></a>刪除虛擬環境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda env remove -n &lt;environment&gt;<br></code></pre></td></tr></table></figure><h2 id="更新-python"><a class="header-anchor" href="#更新-python"></a>更新 Python</h2><h3 id="更新全域環境"><a class="header-anchor" href="#更新全域環境"></a>更新全域環境</h3><p>若目前 Python 版本是 3.6.1，下面指令只會將 Python 更新至 3.6.x 的最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update python<br></code></pre></td></tr></table></figure><p>若是要更新到其他版本可指定 Python 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install python=3.6<br></code></pre></td></tr></table></figure><h2 id="更新-anaconda"><a class="header-anchor" href="#更新-anaconda"></a>更新 Anaconda</h2><p>更新套件管理器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update conda<br></code></pre></td></tr></table></figure><div class="warning"><p>注意：Conda 會更新該版本列表中的最高版本，因此 Python 2.7 更新到 2.x 中的最高版本，而 3.x 系列依此類推。</p></div><p>更新 anaconda 此 meta-package，可更新 Anaconda 發行版包含的套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update anaconda<br></code></pre></td></tr></table></figure><p>如果要更新 Python 的特定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install python==$pythonversion$<br></code></pre></td></tr></table></figure><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://conda.io/docs/user-guide/tasks/manage-pkgs.html" target="_blank" rel="noopener">Managing packages | Conda documentation</a></li><li><a href="https://stackoverflow.com/questions/41535881/how-do-i-upgrade-to-python-3-6-with-conda" target="_blank" rel="noopener">macos - How do I upgrade to Python 3.6 with conda? - Stack Overflow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Anaconda </tag>
            
            <tag> Conda </tag>
            
            <tag> Virtual Environment </tag>
            
            <tag> Package Management </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows Subsystem for Linux (WSL)</title>
      <link href="/article/windows-subsystem-for-linux.html"/>
      <url>/article/windows-subsystem-for-linux.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/windows-subsystem-for-linux.png" alt=""></p><p>Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。</p><a id="more"></a><h2 id="啟用-windows-subsystem-for-linux"><a class="header-anchor" href="#啟用-windows-subsystem-for-linux"></a>啟用 Windows Subsystem for Linux</h2><p>使用系統管理者權限開啟 PowerShell，並執行下面命令啟用 <code>Windows Subsystem for Linux</code> 功能：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux<br></code></pre></td></tr></table></figure><p>如果顯示下面訊息就代表你沒有使用系統管理員開啟 PowerShell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Enable-WindowsOptionalFeature : 要求的作業需要提升的權限。<br>位於 線路:1 字元:1<br>+ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows- ...<br>+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>    + CategoryInfo          : NotSpecified: (:) [Enable-WindowsOptionalFeature], COMException<br>    + FullyQualifiedErrorId : Microsoft.Dism.Commands.EnableWindowsOptionalFeatureCommand<br></code></pre></td></tr></table></figure><p><img src="../images../images/windows-subsystem-for-linux/2018-11-17-19-04-25.png" alt=""></p><p>接著等他跑一下…：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-04-37.png" alt=""></p><p>接著他會問是否要重啟電腦，因為預設是 Yes，所以可以直接按 <code>Enter</code>：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-04-47.png" alt=""></p><p>其實上面指令就等於去「控制台 &gt; 程式集 &gt; 開啟或關閉 Windows 功能」開啟「適用於 Linux 的 Windows 子系統」。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-10.png" alt=""></p><h2 id="安裝-linux-發行版"><a class="header-anchor" href="#安裝-linux-發行版"></a>安裝 Linux 發行版</h2><p>系統組建 (build) 必須要 Windows build 16215 或更新版本。若要想知道系統組建，可至 Windows 的「設定」內的「關於」即可查看。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-23.png" alt=""></p><p>你可以選擇你想安裝的 Linux 發行版：</p><ul><li><a href="https://www.microsoft.com/zh-tw/p/ubuntu-1604-lts/9pjn388hp8c9" target="_blank" rel="noopener">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/zh-tw/p/ubuntu-1804-lts/9n9tngvndl3q" target="_blank" rel="noopener">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/zh-tw/p/debian-gnu-linux/9msvkqc78pk6" target="_blank" rel="noopener">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/zh-tw/p/opensuse-leap-42/9njvjts82tjx" target="_blank" rel="noopener">OpenSUSE Leap 42</a></li><li><a href="https://www.microsoft.com/zh-tw/p/suse-linux-enterprise-server-12/9p32mwbh6cns" target="_blank" rel="noopener">SUSE Linux Enterprise Server 12</a></li><li><a href="https://blogs.msdn.microsoft.com/commandline/2018/03/05/kali-linux-for-wsl/" target="_blank" rel="noopener">Kali Linux</a></li></ul><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-41.png" alt=""></p><p>如果在安裝後直接開啟 Ubuntu，就會顯示 <code>Error: 0x8007007e</code> 錯誤就代表你沒有啟用 <code>Windows Subsystem for Linux</code> 功能，詳情請參考上面：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">The WSL optional component is not enabled. Please enable it and try again.<br>See https://aka.ms/wslinstall for details.<br>Error: 0x8007007e<br>Press any key to continue...<br></code></pre></td></tr></table></figure><p>安裝後啟動 Linux 發行版，此時會開啟一個 console 視窗。因為是第一次開啟，所以會先安裝 WSL，等它安裝完後，就會看到下面畫面，系統要你建立一個新的 Unix 使用者名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">Installing, this may take a few minutes...<br>Installation successful!<br>Please create a default UNIX user account. The username does not need to match your Windows username.<br>For more information visit: https://aka.ms/wslusers<br>Enter new UNIX username:<br></code></pre></td></tr></table></figure><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-06.png" alt=""></p><p>接著是設定此使用者的密碼，這邊的使用者與你的 Windows 使用者名稱和密碼沒有任何關係。詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/user-support" target="_blank" rel="noopener">Linux User Account and Permissions | Microsoft Docs</a> 文件。</p><p>如果顯示 <code>$</code> 就代表設定完成囉！</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-17.png" alt=""></p><p>執行 <code>lsb_release -a</code> 指令就會看到 Linux 的系統版本：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-28.png" alt=""></p><h2 id="在其他終端使用-bash"><a class="header-anchor" href="#在其他終端使用-bash"></a>在其他終端使用 Bash</h2><p>如果在使用 CMD 、 PowerShell 或其他終端 (例如我常用的 Cmder) 時想用 bash shell，可使用 <code>bash</code> 指令就可以啟動新的 Ubuntu shell：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> bash<br></code></pre></td></tr></table></figure><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-42.png" alt=""></p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-53.png" alt=""></p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-07-01.png" alt=""></p><h2 id="存取目錄"><a class="header-anchor" href="#存取目錄"></a>存取目錄</h2><p>如果想存取 <code>D:\project</code>，在此環境下的路徑就是 <code>/mnt/d/project</code>。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-07-14.png" alt=""></p><h2 id="小結"><a class="header-anchor" href="#小結"></a>小結</h2><p>如果有在跨平台開發或維運的朋友，這個功能應該是一直以來的願望吧？讓你在 Windows 上可以直接處理事情，不用再多開 VM 來使用，不只省資源，也省硬碟空間，重點是不用等 VM 開機…</p><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10" target="_blank" rel="noopener">Install the Linux Subsystem on Windows 10 | Microsoft Docs</a></li><li><a href="https://blogs.msdn.microsoft.com/microsoft_student_partners_in_taiwan/2017/10/03/wsltune/" target="_blank" rel="noopener">【WSL】Windows Subsystem for Linux 安裝及基本配置！ | 台灣微軟學生大使</a></li><li><a href="https://kheresy.wordpress.com/2016/04/12/bash-on-ubuntu-on-windows/" target="_blank" rel="noopener">Bash on Ubuntu on Windows 的簡單使用 | Heresy’s Space</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows 10 </tag>
            
            <tag> WSL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub 縮網址服務 Git.io</title>
      <link href="/article/github-url-shortener.html"/>
      <url>/article/github-url-shortener.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/github-url-shortener.png" alt=""></p><p>最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「<a href="https://git.io/" target="_blank" rel="noopener">Git.io</a>」，它只適用於 <code>gist.github.com</code> 及 <code>github.com</code> 兩個 hostname。</p><a id="more"></a><p>下列網址都可以透過 <a href="http://Git.io" target="_blank" rel="noopener">Git.io</a> 來建立縮網址：</p><ul><li>Github 個人或組織專業 ( <code>https://github.com/&lt;github-id&gt;</code> )</li><li>Github repository ( <code>https://github.com/&lt;github-id&gt;/&lt;repo-name&gt;</code> ) 或 repository 內目錄或檔案</li><li>Gist ( <code>https://gist.github.com/&lt;github-id&gt;/&lt;gist-id&gt;</code> )</li></ul><p><a href="http://Git.io" target="_blank" rel="noopener">Git.io</a> 有兩種建立短網址的方法，下面會分別介紹：</p><ul><li>直接到 <a href="https://git.io/" target="_blank" rel="noopener">Git.io</a> 線上設定</li><li>使用 <code>curl</code> 指令設定：<a href="https://blog.github.com/2011-11-10-git-io-github-url-shortener/" target="_blank" rel="noopener">Git.io: GitHub URL Shortener | GitHub Blog</a></li></ul><h2 id="git-io-線上設定"><a class="header-anchor" href="#git-io-線上設定"></a><a href="https://git.io/" target="_blank" rel="noopener">Git.io</a> 線上設定</h2><p>最簡單的方法當然是直接打開 <a href="https://git.io/" target="_blank" rel="noopener">Git.io</a>，接著輸入網址並點擊「shorten」按鈕就會將你剛剛輸入的網址變成短網址，短網址的格式是 <code>git.io/xxx</code>。</p><p>但缺點是無法自訂短網址名稱，預設是自動隨機英文 + 數字的字串。</p><p><img src="../images/github-url-shortener/github-url-shortener.png" alt=""></p><h2 id="使用-curl-指令建立短網址"><a class="header-anchor" href="#使用-curl-指令建立短網址"></a>使用 <code>curl</code> 指令建立短網址</h2><ul><li><code>-i</code>、<code>--include</code>：顯示 HTTP response headers</li><li><code>-F</code>、<code>--form &lt;name=content&gt;</code>：設定表單資料，<code>Content-Type</code> 會被設為 <code>multipart/form-data</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> curl -i https://git.io -F "url=&lt;想縮短的網址&gt;" -F "code=&lt;自訂短網址名稱&gt;"<br></code></pre></td></tr></table></figure><p>例如我想將自己的 Github profile URL：<code>github.com/titangene</code> 縮短成 <code>git.io/titan</code>，就要執行下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> curl -i https://git.io -F "url=https://github.com/titangene" -F "code=titan"<br>HTTP/1.1 201 Created<br>...<br>Location: https://git.io/titan<br>...<br><span class="hljs-meta"><br>$</span> curl -i https://git.io -F "url=https://titangene.github.io/" -F "code=titan-blog"<br></code></pre></td></tr></table></figure><p>只要輸入下面指令就可以確認是否建立成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> curl -i https://git.io/titan<br>HTTP/1.1 302 Found<br>...<br>Location: https://github.com/titangene<br>...<br></code></pre></td></tr></table></figure><h2 id="小插曲-縮網址不小心設定錯誤"><a class="header-anchor" href="#小插曲-縮網址不小心設定錯誤"></a>[小插曲] 縮網址不小心設定錯誤</h2><p>一開始在 <a href="http://Git.io" target="_blank" rel="noopener">Git.io</a> 測試時，直接用自己的 Github profile URL ( <code>github.com/titangene</code> ) 來產生預設隨機英文 + 數字的短網址，想要修改成 <code>git.io/titan</code> 卻沒辦法！這是因為 <a href="http://Git.io" target="_blank" rel="noopener">Git.io</a> 沒有直接提供修改短網址的功能。</p><p>後來 Google 一下才發現只能聯繫 <a href="https://github.com/contact" target="_blank" rel="noopener">Github 客服</a>來幫忙刪除短網址，然後再自行重新設定。過了不到半天客服就回信幫我解決了！真是太感謝 Github 客服了！</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> URL </tag>
            
            <tag> URL Shortener </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 自訂字型</title>
      <link href="/article/flutter-custom-fonts.html"/>
      <url>/article/flutter-custom-fonts.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。</p><a id="more"></a><h2 id="將字型檔放入專案資料夾內"><a class="header-anchor" href="#將字型檔放入專案資料夾內"></a>將字型檔放入專案資料夾內</h2><p>此範例是放在 <code>./assets/fonts</code> 資料夾內：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">assets/<br>  fonts/<br>    FiraCode-Medium.ttf<br>    mononoki-Bold.ttf<br>    mononoki-BoldItalic.ttf<br>    mononoki-Italic.ttf<br>    mononoki-Regular.ttf<br></code></pre></td></tr></table></figure><h2 id="在-pubspec-yaml-定義字型資訊"><a class="header-anchor" href="#在-pubspec-yaml-定義字型資訊"></a>在 <code>pubspec.yaml</code> 定義字型資訊</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  fonts:</span><br><span class="hljs-attr">    - family:</span> <span class="hljs-string">FiraCode</span><br><span class="hljs-attr">      fonts:</span><br><span class="hljs-attr">        - asset:</span> <span class="hljs-string">assets/fonts/FiraCode-Medium.ttf</span><br><span class="hljs-attr">    - family:</span> <span class="hljs-string">Mononoki</span><br><span class="hljs-attr">      fonts:</span><br><span class="hljs-attr">        - asset:</span> <span class="hljs-string">assets/fonts/mononoki-Regular.ttf</span><br><span class="hljs-attr">        - asset:</span> <span class="hljs-string">assets/fonts/mononoki-Bold.ttf</span><br><span class="hljs-attr">          weight:</span> <span class="hljs-number">700</span><br><span class="hljs-attr">        - asset:</span> <span class="hljs-string">assets/fonts/mononoki-Italic.ttf</span><br><span class="hljs-attr">          style:</span> <span class="hljs-string">italic</span><br><span class="hljs-attr">        - asset:</span> <span class="hljs-string">assets/fonts/mononoki-BoldItalic.ttf</span><br><span class="hljs-attr">          weight:</span> <span class="hljs-number">700</span><br><span class="hljs-attr">          style:</span> <span class="hljs-string">italic</span><br></code></pre></td></tr></table></figure><h2 id="設定預設字型"><a class="header-anchor" href="#設定預設字型"></a>設定預設字型</h2><p><img src="../images/flutter-custom-fonts/flutter_set-default-font.png" alt=""></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">MaterialApp(<br>  title: <span class="hljs-string">'Custom Fonts'</span>,<br>  theme: ThemeData(fontFamily: <span class="hljs-string">'FiraCode'</span>),<br>  home: MyHomePage(title: <span class="hljs-string">'Custom Fonts'</span>),<br>);<br></code></pre></td></tr></table></figure><h2 id="在特定-widget-設定字型"><a class="header-anchor" href="#在特定-widget-設定字型"></a>在特定 Widget 設定字型</h2><p><img src="../images/flutter-custom-fonts/flutter_set-the-font-on-a-specific-widget.png" alt=""></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart">Text(<br>  <span class="hljs-string">'Custom Fonts'</span>,<br>  style: TextStyle(<br>    fontFamily: <span class="hljs-string">'Mononoki'</span>,<br>    fontSize: <span class="hljs-number">30.0</span>,<br>    fontWeight: FontWeight.w700,<br>    fontStyle: FontStyle.italic,<br>  ),<br>)<br></code></pre></td></tr></table></figure><h2 id="完整範例程式碼"><a class="header-anchor" href="#完整範例程式碼"></a>完整範例程式碼</h2><p><img src="../images/flutter-custom-fonts/flutter_custom-fonts_demo.png" alt=""></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> <span class="hljs-string">'package:flutter/material.dart'</span>;<br><br><span class="hljs-keyword">void</span> main() =&gt; runApp(<span class="hljs-keyword">new</span> MyApp());<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> MaterialApp(<br>      title: <span class="hljs-string">'Custom Fonts'</span>,<br>      theme: <span class="hljs-keyword">new</span> ThemeData(<br>        primarySwatch: Colors.blue,<br>        fontFamily: <span class="hljs-string">'FiraCode'</span>,<br>      ),<br>      home: <span class="hljs-keyword">new</span> MyHomePage(title: <span class="hljs-string">'Custom Fonts'</span>),<br>    );<br>  &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHomePage</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">StatelessWidget</span> </span>&#123;<br>  MyHomePage(&#123;Key key, <span class="hljs-keyword">this</span>.title&#125;) : <span class="hljs-keyword">super</span>(key: key);<br><br>  <span class="hljs-keyword">final</span> <span class="hljs-built_in">String</span> title;<br><br>  <span class="hljs-meta">@override</span><br>  Widget build(BuildContext context) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Scaffold(<br>      appBar: <span class="hljs-keyword">new</span> AppBar(<br>        title: <span class="hljs-keyword">new</span> Text(<span class="hljs-keyword">this</span>.title),<br>      ),<br>      body: Column(<br>        children: &lt;Widget&gt;[<br>          <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">'&lt;-- Custom Fonts -&gt;&gt;'</span>,<br>            style: TextStyle(fontSize: <span class="hljs-number">30.0</span>),<br>          ),<br>          <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">'Custom Fonts'</span>,<br>            style: TextStyle(<br>              fontFamily: <span class="hljs-string">'Mononoki'</span>,<br>              fontSize: <span class="hljs-number">30.0</span>,<br>            ),<br>          ),<br>          <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">'Custom Fonts'</span>,<br>            style: TextStyle(<br>              fontFamily: <span class="hljs-string">'Mononoki'</span>,<br>              fontSize: <span class="hljs-number">30.0</span>,<br>              fontWeight: FontWeight.w700,<br>            ),<br>          ),<br>          <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">'Custom Fonts'</span>,<br>            style: TextStyle(<br>              fontFamily: <span class="hljs-string">'Mononoki'</span>,<br>              fontSize: <span class="hljs-number">30.0</span>,<br>              fontStyle: FontStyle.italic,<br>            ),<br>          ),<br>          <span class="hljs-keyword">new</span> Text(<br>            <span class="hljs-string">'Custom Fonts'</span>,<br>            style: TextStyle(<br>              fontFamily: <span class="hljs-string">'Mononoki'</span>,<br>              fontSize: <span class="hljs-number">30.0</span>,<br>              fontWeight: FontWeight.w700,<br>              fontStyle: FontStyle.italic,<br>            ),<br>          ),<br>        ],<br>      ),<br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考 <a href="https://flutter.io/cookbook/design/fonts/" target="_blank" rel="noopener">Using custom fonts - Flutter</a> 官方文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Native App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
            <tag> Native App </tag>
            
            <tag> Font </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 環境建置 (Windows)</title>
      <link href="/article/flutter-install-on-windows.html"/>
      <url>/article/flutter-install-on-windows.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。</p><a id="more"></a><p>詳情可參考官方連結：<a href="https://flutter.io/setup-windows/" target="_blank" rel="noopener">Get Started: Install on Windows | Flutter</a></p><h2 id="系統要求"><a class="header-anchor" href="#系統要求"></a>系統要求</h2><ul><li>OS：Windows 7 SP1 或以上 (64-bit)</li><li>硬碟空間：400 MB (不包括 IDE 和工具的空間)</li><li>工具<ul><li><a href="https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-windows-powershell?view=powershell-6#upgrading-existing-windows-powershell" target="_blank" rel="noopener">PowerShell 5.0</a> 或更新版</li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git for Windows</a> (勾選 <code>Use Git from the Windows Command Prompt</code> 選項，若沒打勾可自行將 Git 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數，預設目錄為 <code>C:\Program Files\Git\bin</code> )</li></ul></li></ul><h2 id="安裝-flutter-sdk"><a class="header-anchor" href="#安裝-flutter-sdk"></a>安裝 Flutter SDK</h2><ol><li>下載 Flutter SDK，可下載<a href="https://flutter.io/sdk-archive/#windows" target="_blank" rel="noopener">歷史版本</a>，但建議安裝新版。</li><li>解壓檔內有一個 <code>flutter</code> 資瞭夾，將此資料夾放在 Flutter SDK 所需的安裝目錄 (e.g <code>D:\dev\flutter</code>，請勿將 <code>flutter</code> 資瞭夾放在需要提高權限之類的目錄內，e.g. <code>C:\Program Files\</code> )。</li><li>將 <code>flutter\bin</code> 的完整目錄 (e.g. <code>D:\dev\flutter\bin</code> ) 加入 <code>Path</code> 環境變數 (各完整路徑記得用 <code>;</code> 分號分隔)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-09-08.png" alt=""></p><ol start="4"><li>接著就可以在 Console 內執行 Flutter commands</li><li>執行 <code>flutter --version</code> 指令確定已成功安裝 Flutter SDK</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter --version<br>Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git<br>Framework • revision 3b309bda07 (12 days ago) • 2018-08-28 12:39:24 -0700<br>Engine • revision af42b6dc95<br>Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282<br></code></pre></td></tr></table></figure><ol start="6"><li>之後請定期執行 <code>flutter upgrade</code> 指令更新 Flutter (因為目前還在 beta，大約幾週就會有新版)</li></ol><p>執行 <code>flutter --version</code> 指令後，若看到下面畫面就代表現在有新版可以更新：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter --version<br>  ╔════════════════════════════════════════════════════════════════════════════╗<br>  ║ A new version of Flutter is available!                                     ║<br>  ║                                                                            ║<br>  ║ To update to the latest version, run "flutter upgrade".                    ║<br>  ╚════════════════════════════════════════════════════════════════════════════╝<br><br><br>Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git<br>Framework • revision 3b309bda07 (3 weeks ago) • 2018-08-28 12:39:24 -0700<br>Engine • revision af42b6dc95<br>Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282<br></code></pre></td></tr></table></figure><p>執行 <code>flutter upgrade</code> 指令更新 Flutter：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter upgrade<br>Upgrading Flutter from D:\dev\flutter...<br>...<br>Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git<br>Framework • revision 3b309bda07 (3 weeks ago) • 2018-09-07 12:33:05 -0700<br>Engine • revision 58a1894a1c<br>Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282<br><br>Running flutter doctor...<br>Doctor summary (to see all details, run flutter doctor -v):<br>[√] Flutter (Channel beta, v0.8.2, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)<br>[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)<br>[√] Android Studio (version 3.1)<br>[√] VS Code (version 1.27.2)<br>[!] Connected devices<br>    ! No devices available<br><br>! Doctor found issues in 1 category.<br></code></pre></td></tr></table></figure><p>在執行一次 <code>flutter --version</code> 確認已更新至新的版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter --version<br>Flutter 0.8.2 • channel beta • https://github.com/flutter/flutter.git<br>Framework • revision 5ab9e70727 (13 days ago) • 2018-09-07 12:33:05 -0700<br>Engine • revision 58a1894a1c<br>Tools • Dart 2.1.0-dev.3.1.flutter-760a9690c2<br></code></pre></td></tr></table></figure><h2 id="flutter-doctor"><a class="header-anchor" href="#flutter-doctor"></a>flutter doctor</h2><p>下面指令是用來查看是否需要安裝任何依賴才能完成設定，因此他會檢查你的環境並顯示檢查報告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter doctor<br></code></pre></td></tr></table></figure><p>Dart SDK is bundled with Flutter，不用另外安裝 Dart。從檢查報告的輸出中可以了解需要安裝的其他軟體或執行的其他任務 (以粗體顯示)。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter doctor<br>Doctor summary (to see all details, run flutter doctor -v):<br>[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.228], locale zh-TW)<br>[!] Android toolchain - develop for Android devices (Android SDK 28.0.2)<br>    X Android license status unknown.<br>[√] Android Studio (version 3.1)<br>    X Flutter plugin not installed; this adds Flutter specific functionality.<br>    X Dart plugin not installed; this adds Dart specific functionality.<br>[!] Connected devices<br>    ! No devices available<br><br>! Doctor found issues in 2 categories.<br></code></pre></td></tr></table></figure><p>下面會介紹如何執行這些任務並完成設定過程。可再次執行 <code>flutter doctor</code> 指令來驗證是否已正確設定所有內容。</p><p>如果已驗證設定所有內容，就會看到下面輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter doctor<br>Doctor summary (to see all details, run flutter doctor -v):<br>[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)<br>[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)<br>[√] Android Studio (version 3.1)<br>[√] Connected devices (1 available)<br><br>• No issues found!<br></code></pre></td></tr></table></figure><p>加上參數 <code>-v</code>，可以看更詳細的驗證說明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter doctor -v<br>[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)<br>    • Flutter version 0.7.3 at D:\dev\flutter<br>    • Framework revision 3b309bda07 (3 weeks ago), 2018-08-28 12:39:24 -0700<br>    • Engine revision af42b6dc95<br>    • Dart version 2.1.0-dev.1.0.flutter-ccb16f7282<br><br>[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)<br>    • Android SDK at C:\Users\Titan\AppData\Local\Android\sdk<br>    • Android NDK location not configured (optional; useful for native profiling support)<br>    • Platform android-28, build-tools 28.0.2<br>    • ANDROID_HOME = C:\Users\Titan\AppData\Local\Android\sdk<br>    • Java binary at: C:\Program Files\Android\Android Studio\jre\bin\java<br>    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)<br>    • All Android licenses accepted.<br><br>[√] Android Studio (version 3.1)<br>    • Android Studio at C:\Program Files\Android\Android Studio<br>    • Flutter plugin version 28.0.1<br>    • Dart plugin version 173.4700<br>    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)<br><br>[√] Connected devices (1 available)<br>    • SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)<br><br>• No issues found!<br></code></pre></td></tr></table></figure><h2 id="android-設定"><a class="header-anchor" href="#android-設定"></a>Android 設定</h2><div class="info"><p>Flutter 依賴於 Android Studio 以提供 Android 平台的依賴性。但也可以使用其他編輯器來寫 Flutter App。</p></div><h3 id="安裝-java-jdk"><a class="header-anchor" href="#安裝-java-jdk"></a>安裝 Java JDK</h3><ol><li>安裝 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a></li><li>將 Java JDK 安裝目錄設定為 <code>JAVA_HOME</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151</code> )，並在將 Java JDK 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151\bin</code>，也可設定為 <code>%JAVA_HOME%\bin</code> )</li></ol><h3 id="安裝-android-studio"><a class="header-anchor" href="#安裝-android-studio"></a>安裝 Android Studio</h3><ol><li>安裝 <a href="https://developer.android.com/studio/" target="_blank" rel="noopener">Android Studio</a>，請安裝 Recommended (建議) 版</li><li>執行 Android Studio，並瀏覽 <code>Android Studio Setup Wizard</code>，安裝最新的 Android SDK、Android SDK Platform-Tools、Android SDK Build-Tools，這些都是 Flutter 在開發 Android 時所必須的。</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-14.png" alt=""></p><ol start="3"><li>將 Android SDK 目錄設定為 <code>ANDROID_HOME</code> 環境變數 (預設目錄為 <code>C:\Users\Titan\AppData\Local\Android\sdk</code> )</li><li>定期更新 Android SDK (於 <code>Android Studio</code> &gt; <code>Configure</code> &gt; <code>SDK Manager</code> 安裝)</li></ol><h3 id="設定你的-android-裝置"><a class="header-anchor" href="#設定你的-android-裝置"></a>設定你的 Android 裝置</h3><p>想在 Android 裝置上執行和測試 Flutter App，需要 Android 4.1 (API level 16) 或更高版本的 Android 設備。</p><ol><li>裝置請開啟 <code>開發者模式</code> 內的 <code>USB 偵錯</code>，詳情可參考 <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener">Configure on-device developer options  |  Android Developers</a> 此 Android 官方文件</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-23.png" alt=""></p><ol start="2"><li>安裝 <a href="https://developer.android.com/studio/run/win-usb" target="_blank" rel="noopener">Google USB Driver</a> (限 Windows)</li><li>使用 USB 線將裝置連接至電腦，如果你的裝置有出現提示，請授權你的電腦可訪問你的裝置</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-36.png" alt=""></p><ol start="4"><li>開啟終端機，執行 <code>flutter devices</code> 指令以驗證 Flutter 是否成功連結 Android 裝置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 像我連接到 Note 8<br><span class="hljs-meta">$</span> flutter devices<br>1 connected device:<br><br>SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)<br></code></pre></td></tr></table></figure><p>Flutter 預設會以 <code>adb</code> 工具基於的 Android SDK 版本來使用，若想用其他版本的 Android SDK，可設定你所需的 Android SDK 目錄為 <code>ANDROID_HOME</code> 環境變數。</p><p>如果執行 <code>flutter run</code>指令，而且成功將 App 安置手機並執行，就會看到 App 的畫面</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-45.png" alt=""></p><h3 id="設定-android-模擬器-emulator"><a class="header-anchor" href="#設定-android-模擬器-emulator"></a>設定 Android 模擬器 (emulator)</h3><p>想在 Android 模擬器上執行和測試 Flutter App，請依照下面步驟：</p><ol><li>在主機上啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">VM acceleration</a></li><li>啟動 <strong>Android Studio</strong> &gt; <strong>Tools</strong> &gt; <strong>AVD Manager</strong> 並點選 <strong>Create Virtual Device</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-55.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-05.png" alt=""></p><ol><li>選擇設備定義，然後點擇 <strong>Next</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-14.png" alt=""></p><ol start="2"><li>選擇你所需的 Android 版本的 OS image，然後點選 <strong>Next</strong> (建議選擇 <em>x86</em> 或 x86_64 image)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-23.png" alt=""></p><ol start="3"><li>在 Emulated Performance 欄位請選擇 <strong>Hardware - GLES 2.0</strong> 以啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">hardware acceleration</a></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-38.png" alt=""></p><ol start="4"><li>驗證 AVD 設定是否正確，若確定請點選 <strong>Finish</strong></li><li>在 Android Virtual Device Manager 中，選擇某台模擬器並點擊 Run</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-12-30.png" alt=""></p><p>有關上述步驟的詳情可參考 <a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">Managing AVDs</a></p><h2 id="設定編輯器"><a class="header-anchor" href="#設定編輯器"></a>設定編輯器</h2><h3 id="設定-android-studio"><a class="header-anchor" href="#設定-android-studio"></a>設定 Android Studio</h3><p>安裝 Flutter 和 Dart plugins (外掛)，有兩個 plugin 支援 Flutter：</p><ul><li><code>Flutter</code> 外掛：支持 Flutter 開發人員工作流程 (running, debugging, hot reload … 等)</li><li><code>Dart</code> 外掛：提供程式碼分析 (輸入時的程式碼驗證、程式碼自動補全)</li></ul><p>安裝步驟：</p><ol><li>執行 Android Studio</li><li>開啟外掛選項 (<strong>File</strong> &gt; <strong>Settings</strong> &gt; <strong>Plugins</strong>)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-00.png" alt=""></p><ol start="3"><li>點選 <strong>Browse repositories…</strong>，接著搜尋 <code>Flutter</code> 並選擇並安裝名為 <code>Flutter</code> 的 plugin (請注意，安裝 <code>Flutter</code> 外掛時會同時安裝 <code>Dart</code> 語言外掛)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-06.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-13.png" alt=""></p><ol start="4"><li>點擊 <strong>Restart Android Studio</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-20.png" alt=""></p><h3 id="設定-vs-code"><a class="header-anchor" href="#設定-vs-code"></a>設定 VS Code</h3><ul><li>安裝 Flutter plugin：<ul><li>安裝 <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter" target="_blank" rel="noopener">Flutter</a> 此擴充功能，並重啟 VS Code。</li></ul></li></ul><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-30.png" alt=""></p><ul><li>使用 Flutter Doctor 驗證你的設定環境：<ul><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: Run Flutter Doctor</strong> 即可至 <strong>OUTPUT (輸出)</strong> 查看驗證結果。</li></ul></li></ul><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-39.png" alt=""></p><h1 id="入門"><a class="header-anchor" href="#入門"></a>入門</h1><h2 id="android-studio"><a class="header-anchor" href="#android-studio"></a>Android Studio</h2><h3 id="建立新-app"><a class="header-anchor" href="#建立新-app"></a>建立新 app</h3><p>在 Android Studio 中建立 Flutter 專案 ( <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>New Flutter Project…</strong> )</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-04.png" alt=""></p><p>接著選擇 <strong>Flutter Application</strong>，並點選 <strong>Next</strong></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-10.png" alt=""></p><p>請設定專案名稱、確定 Flutter SDK 目錄、設定專案儲存位置與填寫專案的簡單描述後，點選 <strong>Next</strong></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-17.png" alt=""></p><p>最後輸入公司網域 (e.g. <a href="http://example.com" target="_blank" rel="noopener">example.com</a>) 後，點選 <strong>Finish</strong> 即可建立新的 Flutter 專案</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-23.png" alt=""></p><h3 id="執行-app"><a class="header-anchor" href="#執行-app"></a>執行 app</h3><p>下圖為 Android Studio 的工具列：</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-29.png" alt=""></p><p>圖片來源：<a href="https://flutter.io/get-started/test-drive/#androidstudio" target="_blank" rel="noopener">Get Started: Test Drive | Flutter</a></p><ol><li>在 <strong>target selector</strong> 中，選擇已執行的 Android 裝置，若當前未啟動或未連接任何 Android 裝置，選擇某一模擬器時，Android Studio 就會開啟該選擇的模擬器。如果沒有可用的裝置，可至前面介紹的 <a href="#%E8%A8%AD%E5%AE%9A-Android-%E6%A8%A1%E6%93%AC%E5%99%A8-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</li><li>點擊 <strong>Run</strong> 圖示執行 app</li><li>稍後就會在模擬器或裝置上看到下圖的 app 畫面<ol><li>等待的過程中會初始化 gradle</li><li>gradle 會 resolve dependencies</li><li>將專案轉成 apk</li><li>將 apk 安裝並執行於裝置上</li></ol></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-41.png" alt=""></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">Launching lib\main.dart on Android SDK built for x86 64 in debug mode...<br>Initializing gradle...<br>Resolving dependencies...<br>Running 'gradlew assembleDebug'...<br>Built build\app\outputs\apk\debug\app-debug.apk.<br>Installing build\app\outputs\apk\app.apk...<br>D/OpenGLRenderer( 4777): HWUI GL Pipeline<br>I/OpenGLRenderer( 4777): Initialized EGL, version 1.4<br>D/OpenGLRenderer( 4777): Swap behavior 1<br>D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e5b00, tid 4831<br>W/OpenGLRenderer( 4777): Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...<br>D/OpenGLRenderer( 4777): Swap behavior 0<br>D/EGL_emulation( 4777): eglCreateContext: 0x7073cf2a7600: maj 2 min 0 rcv 2<br>D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)<br>D/EGL_emulation( 4777): eglCreateContext: 0x7073cf3b10a0: maj 2 min 0 rcv 2<br>D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c2fe87c0)<br>Syncing files to device Android SDK built for x86 64...<br>D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)<br>D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e65e0, tid 4813<br>D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c560d6c0)<br></code></pre></td></tr></table></figure><h3 id="嘗試-hot-reload"><a class="header-anchor" href="#嘗試-hot-reload"></a>嘗試 hot reload</h3><p>修改一些內容並儲存，app 就會自動做 hot reload，就會很快地看到最新的更新。</p><h2 id="vs-code"><a class="header-anchor" href="#vs-code"></a>VS Code</h2><h3 id="建立新-app-v2"><a class="header-anchor" href="#建立新-app-v2"></a>建立新 app</h3><ol><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: New Project</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-50.png" alt=""></p><ol start="2"><li>輸入專案名稱後，按 <code>enter</code> 鍵</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-56.png" alt=""></p><ol start="3"><li>選擇專案目錄的儲存位置</li><li>等待專案建立完成，並在畫面顯示 <code>lib/main.dart</code> 檔案</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-01.png" alt=""></p><h3 id="執行-app-v2"><a class="header-anchor" href="#執行-app-v2"></a>執行 app</h3><ol><li>從 VS Code 底部的藍色狀態欄中點選 <strong>Device Selector</strong><ul><li><p>若要使用實體裝置，詳情至 <a href="#%E8%A8%AD%E5%AE%9A%E4%BD%A0%E7%9A%84-Android-%E8%A3%9D%E7%BD%AE">設定你的 Android 裝置</a> 參考。若連結成功會在 VS Code 底部的藍色狀態欄中看到你的裝置名稱</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-14.png" alt=""></p></li><li><p>如果沒有可用的裝置，請點選 <strong>No Devices</strong> 並啟動模擬器</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-34.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-41.png" alt=""></p></li></ul></li><li>執行 <strong>Debug</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-46.png" alt=""></p><ol start="3"><li>等待 App 執行，可在偵錯主控台 (Debug Console) 看到執行進度，稍後就會在模擬器或裝置上看到下圖的 app 畫面</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-52.png" alt=""></p><h2 id="terminal-editor"><a class="header-anchor" href="#terminal-editor"></a>Terminal + editor</h2><h3 id="建立新-app-v3"><a class="header-anchor" href="#建立新-app-v3"></a>建立新 app</h3><p>使用 <code>flutter create</code> 指令來建立 Flutter 專案，裡面包含 <a href="https://material.io/design/" target="_blank" rel="noopener">Material Components</a> 的範例 app。app 的程式碼在 <code>lib/main.dart</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter create &lt;prject-name&gt;<br><span class="hljs-meta">$</span> cd &lt;prject-name&gt;<br></code></pre></td></tr></table></figure><h3 id="執行-app-v3"><a class="header-anchor" href="#執行-app-v3"></a>執行 app</h3><p>使用 <code>flutter devices</code> 指令可檢查是否有正在執行的模擬器或裝置。如果沒有可用的裝置，可至前面介紹的 <a href="#%E8%A8%AD%E5%AE%9A-Android-%E6%A8%A1%E6%93%AC%E5%99%A8-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter devices<br>1 connected device:<br><br>Android SDK built for x86 64 • emulator-5554 • android-x64 • Android 8.0.0 (API 26) (emulator)<br></code></pre></td></tr></table></figure><p>使用 <code>flutter run</code> 指令可執行 app，並提供以下功能的快速鍵：</p><ul><li><code>r</code>：hot reload</li><li><code>R</code>：hot restart (and rebuild state)</li><li><code>h</code>：顯示更多幫助訊息</li><li><code>q</code>：停止執行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> flutter run<br>Using hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with "--enable-software-rendering".<br>Launching lib/main.dart on Android SDK built for x86 64 in debug mode...<br>Initializing gradle...                                       1.7s<br>Resolving dependencies...                                   48.1s<br>Running 'gradlew assembleDebug'...                          88.5s<br>Built build\app\outputs\apk\debug\app-debug.apk.<br>Installing build\app\outputs\apk\app.apk...                 11.4s<br>Syncing files to device Android SDK built for x86 64...<br>D/        ( 5458): HostConnection::get() New Host Connection established 0x7073c31aabe0, tid 5513<br>D/EGL_emulation( 5458): eglMakeCurrent: 0x7073cf3b1280: ver 2 0 (tinfo 0x7073c2ab65c0)                                       12.3s<br><br>🔥  To hot reload changes while running, press "r". To hot restart (and rebuild state), press "R".<br>An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:2158/<br>For a more detailed help message, press "h". To quit, press "q".<br></code></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Native App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dart </tag>
            
            <tag> Flutter </tag>
            
            <tag> Native App </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 加入 Disqus 留言版 (包含留言數)</title>
      <link href="/article/hexo-disqus.html"/>
      <url>/article/hexo-disqus.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/hexo-disqus.png" alt=""></p><p>Blog 最重要的是可以增進技術的交流，而交流就可以透過留言版來達成。大部分的 Blog 在每篇文章下面都會有留言板，而最常見的就是 Disqus 留言板，因此本篇會說明如何將 Disqus 留言板和各文章的留言數加入 Hexo 的主題中。</p><a id="more"></a><h2 id="申請網站留言版帳號"><a class="header-anchor" href="#申請網站留言版帳號"></a>申請網站留言版帳號</h2><p>至 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 首頁註冊帳號後並登入，接著點擊首頁的「GET STARTED」：</p><p><img src="../images/hexo-disqus/disqus-home-page.png" alt=""></p><p>選擇「I want to install Disqus on my site」選項：</p><p><img src="../images/hexo-disqus/disqus-on-my-site.png" alt=""></p><p>需要輸入的欄位：</p><ul><li>Websit Name：自訂 short name，且是唯一，像我是設定 titangene-blog。short name 會在設定 Hexo 時需要</li><li>Category：類別，自行選擇</li><li>Language：語言，自行選擇</li></ul><p>填寫後點擊「Create Site」：</p><p><img src="../images/hexo-disqus/disqus-create-a-new-site.png" alt=""></p><h2 id="設定-hexo"><a class="header-anchor" href="#設定-hexo"></a>設定 Hexo</h2><p>在 <a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">material-flow</a> 主題內的 <code>_config.yml</code> 原有設定是使用 <code>disqus_shortname</code> 參數來設定 Disqus 的 short name：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">disqus_shortname:</span> <span class="hljs-string">your_disqus_short_name</span><br></code></pre></td></tr></table></figure><p>但我想在 blog 加上留言數，所以才將參數設定改成下面內容：</p><ul><li><code>enable</code>：設定 <code>true</code> 或 <code>false</code> 來決定是否要啟用 Disqus 的留言版功能</li><li><code>shortname</code>：設定你的 Disqus 的 short name</li><li><code>count</code>：設定 <code>true</code> 或 <code>false</code> 來決定是否要顯示文章的留言數</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Comments</span><br><span class="hljs-attr">disqus:</span><br><span class="hljs-attr">  enable:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">  shortname:</span> <span class="hljs-string">your_disqus_short_name</span><br><span class="hljs-attr">  count:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>那接著就是將 Disqus 的留言版功能加入主題中，主要分成幾個步驟：</p><ol><li>加入 Disqus script</li><li>新增 Disqus 留言版</li><li>新增 Disqus 留言數</li></ol><p>如果在剛剛上面的 <code>count</code> 參數設定為 <code>false</code> 則可以跳過第三個步驟 <a href="#%E6%96%B0%E5%A2%9E-disqus-%E7%95%99%E8%A8%80%E6%95%B8">新增 Disqus 留言數</a>。</p><p>下面提供的程式碼可適用於 Hexo 的 <a href="https://github.com/stkevintan/hexo-theme-material-flow" target="_blank" rel="noopener">material-flow</a> 主題，HTML 結構可依各自使用的版型或需求來修改。若想直接看我設定的原始碼，可至此 Blog 的 GitHub Repo「<a href="https://github.com/titangene/hexo-blog/tree/master/themes/material-flow/layout" target="_blank" rel="noopener">titangene/hexo-blog</a>」查看。</p><h3 id="加入-disqus-script"><a class="header-anchor" href="#加入-disqus-script"></a>加入 Disqus script</h3><p>在 <code>themes\material-flow\layout\_partial\script\disqus.ejs</code> 檔案內加入以下程式碼，當頁面載入時，會以非同步的方式將 Disqus 的 script 加入 <code>&lt;head&gt;</code> 或 <code>&lt;body&gt;</code> 標籤中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">config.disqus.enable</span>) &#123; %&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">page.comments</span>) &#123; %&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>      <span class="hljs-keyword">var</span> disqus_shortname = <span class="hljs-string">'&lt;%= config.disqus.shortname %&gt;'</span>;<br>      <span class="hljs-keyword">var</span> disqus_config = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">this</span>.page.url = <span class="hljs-string">'&lt;%= page.permalink %&gt;'</span>;<br>        <span class="hljs-keyword">this</span>.page.identifier = <span class="hljs-string">'&lt;%= page.path %&gt;'</span>;<br>        <span class="hljs-keyword">this</span>.page.title = <span class="hljs-string">'&lt;%= page.title %&gt;'</span>;<br>      &#125;;<br>      (<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">var</span> dsq = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>);<br>        dsq.async = <span class="hljs-literal">true</span>;<br>        dsq.src = <span class="hljs-string">'//'</span> + disqus_shortname + <span class="hljs-string">'.disqus.com/embed.js'</span>;<br>        dsq.setAttribute(<span class="hljs-string">'data-timestamp'</span>, <span class="hljs-string">''</span> + <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());<br>        (<span class="hljs-built_in">document</span>.head || <span class="hljs-built_in">document</span>.body).appendChild(dsq);<br>      &#125;)();<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">config.disqus.count</span>) &#123; %&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"dsq-count-scr"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://&lt;%= config.disqus.shortname %&gt;.disqus.com/count.js"</span> <span class="hljs-attr">async</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br></code></pre></td></tr></table></figure><p>接著在 <code>themes\material-flow\layout\layout.ejs</code> 檔案內的 <code>&lt;body&gt;</code> 標籤中將剛剛新增的 <code>disqus.ejs</code> 載入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">partial</span>('<span class="hljs-attr">script</span>/<span class="hljs-attr">disqus</span>') %&gt;</span><br></code></pre></td></tr></table></figure><h3 id="新增-disqus-留言版"><a class="header-anchor" href="#新增-disqus-留言版"></a>新增 Disqus 留言版</h3><p>在 <code>themes\material-flow\layout\_partial\article.ejs</code> 檔案內找到適當的位置加入以下程式碼，就可以在文章內新增 Disqus 留言版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">post.comments</span> &amp;&amp; <span class="hljs-attr">config.disqus.enable</span>) &#123; %&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">section</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"comments"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"comments"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>留言版<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"disqus_thread"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">section</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br></code></pre></td></tr></table></figure><p>上面程式碼中最重要的是 <code>&lt;div id=&quot;disqus_thread&quot;&gt;</code> 這句，因為當頁面載入並將 Disqus 的 script 載入後，就會將此標籤內的內容取代成 Disqus 留言版，而 Disqus 留言版是使用 <code>&lt;iframe&gt;</code> 標籤的方式嵌入在頁面中：</p><p><img src="../images/hexo-disqus/disqus-comments-iframe.png" alt=""></p><h3 id="新增-disqus-留言數"><a class="header-anchor" href="#新增-disqus-留言數"></a>新增 Disqus 留言數</h3><p>在 <code>themes\material-flow\layout\_partial\article.ejs</code> 檔案內找到適當的位置加入以下程式碼，就可以在文章內新增 Disqus 留言數：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%</span> <span class="hljs-attr">if</span> (<span class="hljs-attr">post.comments</span> &amp;&amp; <span class="hljs-attr">config.disqus.enable</span> &amp;&amp; <span class="hljs-attr">config.disqus.count</span>) &#123; %&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"comments-count"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"post-meta-item-icon"</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"fas fa-comment"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span><br>      <span class="hljs-attr">href</span>=<span class="hljs-string">"&lt;%- post.permalink %&gt;#disqus_thread"</span><br>      <span class="hljs-attr">class</span>=<span class="hljs-string">"article-comment-count"</span><br>      <span class="hljs-attr">data-disqus-identifier</span>=<span class="hljs-string">"&lt;%= post.path %&gt;"</span><br>      <span class="hljs-attr">itemprop</span>=<span class="hljs-string">"discussionUrl"</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">%</span> &#125; %&gt;</span><br></code></pre></td></tr></table></figure><p>也可以在 <code>themes\material-flow\layout\_partial\post.ejs</code> 檔案內新增 Disqus 留言數，這樣就可以在首頁看到各文章的留言數。</p><p>上面程式碼中最重要的是 <code>&lt;a href=&quot;&lt;%- post.permalink %&gt;#disqus_thread&quot;...&gt;</code> 這句，因為在連結的最後加上 <code>#disqus_thread</code>，就代表要告訴 Disqus 要找哪個連結的留言數，並將留言數設為連結名稱 (例如：1 留言)。而 <code>data-disqus-identifier</code> 屬性需設為此頁面的識別名稱：</p><p><img src="../images/hexo-disqus/disqus-comments-count-link.png" alt=""></p><blockquote><p>可參考 Disqus 的 <a href="https://help.disqus.com/developer/javascript-configuration-variables" target="_blank" rel="noopener">JavaScript configuration variables | Disqus</a> 文件。</p></blockquote><p>若要設定顯示在頁面上的留言數文字，可至 Disqus 的「Setting &gt; Community &gt; Comment Count Link」內設定，可分別設定三種情況：</p><ul><li>0 則留言</li><li>1 則留言</li><li>多則留言：<code>{num}</code> 是作為留言數的變數</li></ul><p><img src="../images/hexo-disqus/disqus-setting.png" alt=""></p><h2 id="demo"><a class="header-anchor" href="#demo"></a>Demo</h2><p>設定後就可以看到每篇文章下面都可以留言囉！</p><p><img src="../images/hexo-disqus/disqus-hexo.png" alt=""></p><p>可在每篇文章看到留言數：</p><p><img src="../images/hexo-disqus/disqus-comment-count.png" alt=""></p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://disqus.com/admin/install/platforms/universalcode/" target="_blank" rel="noopener">Install instructions for Universal Code | Disqus</a></li><li><a href="https://help.disqus.com/developer/adding-comment-count-links-to-your-home-page" target="_blank" rel="noopener">Adding comment count links to your home page | Disqus</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Blog </tag>
            
            <tag> Comment </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
