<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python Selenium 學習筆記</title>
      <link href="/article/python-selenium.html"/>
      <url>/article/python-selenium.html</url>
      
        <content type="html"><![CDATA[<p>Python</p><a id="more"></a><h2 id="安裝-Selenium"><a href="#安裝-Selenium" class="headerlink" title="安裝 Selenium"></a>安裝 Selenium</h2><pre><code class="shell">$ pip install selenium# or$ conda install -c conda-forge selenium</code></pre><h2 id="下載-webdriver"><a href="#下載-webdriver" class="headerlink" title="下載 webdriver"></a>下載 webdriver</h2><ul><li>Firefox web driver：<a href="https://github.com/mozilla/geckodriver/releases/" target="_blank" rel="noopener">https://github.com/mozilla/geckodriver/releases/</a></li><li>Chrome web driver：<a href="https://sites.google.com/a/chromium.org/chromedriver/" target="_blank" rel="noopener">https://sites.google.com/a/chromium.org/chromedriver/</a></li></ul><p>如要下載其他瀏覽器的 web driver，可至 <a href="https://www.seleniumhq.org/about/platforms.jsp" target="_blank" rel="noopener">Platforms Supported by Selenium</a> 此頁面下載。</p><p>將 webdriver 放在你想放的目錄內，可以選擇放在 global 或 local：</p><ul><li>global：為了要讓所有專案都可以使用，需要為 webdriver 設定環境變數。像我是放在 <code>D:\dev\webdriver</code> 此目錄中。</li><li>local：放在該專案目錄中，在程式碼中需要指定 webdriver 的路徑位置，因為考慮到每個專案所使用的 webdriver 版本不同，需要各別管理。</li></ul><h3 id="為-webdriver-設定環境變數"><a href="#為-webdriver-設定環境變數" class="headerlink" title="為 webdriver 設定環境變數"></a>為 webdriver 設定環境變數</h3><p>將 webdriver 的所在目錄設定在 <code>Path</code> 環境目錄</p><p><img src="../images/python-selenium/python-selenium_set-env.png" alt=""></p><h2 id="使用-Selenium"><a href="#使用-Selenium" class="headerlink" title="使用 Selenium"></a>使用 Selenium</h2><pre><code class="python">from selenium import webdriver</code></pre><p>使用 chrome 或 firefox 的 driver</p><pre><code class="python">driver = webdriver.Firefox()driver = webdriver.Chrome()</code></pre><p>指定 webdriver 的位置</p><pre><code class="python">driver = webdriver.Firefox(executable_path=&#39;D:\dev\webdriver\geckodriver&#39;)driver = webdriver.Chrome(executable_path=&#39;D:\dev\webdriver\chromedriver&#39;)</code></pre><p>開啟某網頁</p><pre><code class="python">driver.get(&#39;https://www.google.com.tw&#39;)</code></pre><p>回傳頁面的標題，方便確認目前 driver 跑到哪一頁面</p><pre><code class="python">driver.title</code></pre><p>瀏覽器的上一頁和下一頁</p><pre><code class="python">driver.back()driver.forward()</code></pre><p>螢幕截圖</p><pre><code class="python">driver.save_screenshot(&#39;screenshot.png&#39;)</code></pre><p>回傳網頁原始碼，之後就可以利用 BeautifulSoup 來解析 HTML 原始碼</p><pre><code class="python">driver.page_source</code></pre><p>移動並點擊至指定文字的某連結</p><pre><code class="python">driver.find_element_by_link_text(&#39;你想找的文字連結&#39;)driver.find_element_by_partial_link_text(&#39;部分連結文字&#39;)driver.find_elements_by_link_text(&#39;你想找的文字連結&#39;)driver.find_elements_by_partial_link_text(&#39;部分連結文字&#39;)</code></pre><p>點擊指定 element</p><pre><code class="python">element = driver.find_element_by_link_text(&#39;你想找的文字連結&#39;)element.click()</code></pre><p>在輸入欄位輸入文字</p><pre><code class="python">element = driver.find_element_by_name(&#39;search&#39;)element.send_keys(&#39;some text&#39;)</code></pre><p>清空輸入欄位內的文字</p><pre><code class="python">element.clear()</code></pre><p>找 element</p><pre><code class="python"># 用各種方式找一個 elementdriver.find_element_by_id()driver.find_element_by_name()driver.find_element_by_xpath()driver.find_element_by_tag_name()driver.find_element_by_class_name()driver.find_element_by_css_selector()# 用各種方式找多個 elementdriver.find_elements_by_name()driver.find_elements_by_xpath()driver.find_elements_by_tag_name()driver.find_elements_by_class_name()driver.find_elements_by_css_selector()</code></pre><p>執行最後記得要關閉 webdriver</p><pre><code class="python">driver.close()</code></pre><h2 id="爬蟲範例"><a href="#爬蟲範例" class="headerlink" title="爬蟲範例"></a>爬蟲範例</h2><pre><code class="python">from selenium import webdriverdriver = webdriver.Chrome(executable_path=&#39;D:\dev\webdriver\chromedriver&#39;)driver.get(&#39;https://www.google.com.tw&#39;)print(driver.title)   # Googlesearch_element = driver.find_element_by_name(&#39;q&#39;)search_element.send_keys(&#39;python&#39;)search_element.submit()print(driver.title)   # python - Google 搜尋</code></pre><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul><li><a href="https://hk.saowen.com/a/7644c8e3c82a21827c1fc25737e0588a5842275e6f88095df5ad60cf546a8558" target="_blank" rel="noopener">Python+selenium鼠標、鍵盤事件 - 掃文資訊</a></li><li><a href="https://selenium-python-zh.readthedocs.io/en/latest/waits.html" target="_blank" rel="noopener">5. 等待頁面加載完成(Waits) — Selenium-Python中文文檔 2 documentation</a></li></ul>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>在 VS Code 上使用 Jupyter Notebook</title>
      <link href="/article/vscode-jupyter-python.html"/>
      <url>/article/vscode-jupyter-python.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/vscode-jupyter-python.png" alt=""></p><p>學習如何在 VS Code 內獲得 Jupyter 的開發體驗。</p><a id="more"></a><p>Jupyter (以前稱為 IPython) 是一個開源專案，可以讓你簡單的將 Markdown 和可執行的 Python code 一起寫在 Notebook 上，透過將文件或程式碼分成不同段落，以便於在各段落中查看各別的執行結果，而且還可直接查看資料視覺化。因此 Jupyter 讓很多 Python 的開發者愛不釋手。</p><p>以前要使用 Jupyter Notebook 或 Jupyter Lab，都需要另外開啟 terminal 執行 <code>jupyter notebook</code> 或 <code>jupyter lab</code> 指令才能開始使用 Jupyter 開發 Python (或是透過 shell script 來執行)，無法在常用的 VS Code 內獲得 Jupyter 的開發體驗 (最多只能安裝擴充功能來預覽 <code>.ipynb</code> 檔)。</p><p>最近在 VS Code 中終於達成可以像 Jupyter 那樣的分段執行，而且不是使用以前常用的 <code>.ipynb</code> 檔，而是使用 <code>.py</code>。那要如何使用呢？</p><p>需要準備：</p><ul><li>Jupyter 套件<ul><li>建議用 Conda 安裝，所以需要先安裝 Anaconda</li><li>建立一個新的虛擬環境</li><li>可參考 <a href="https://titangene.github.io/create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a>)</li></ul></li><li>VS Code<ul><li>extension：<a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python" target="_blank" rel="noopener">Python</a></li><li>指定 Python 虛擬環境</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Visual Studio Code </tag>
            
            <tag> Editor </tag>
            
            <tag> Jupyter </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>用 Conda 建立虛擬環境和管理相依套件</title>
      <link href="/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html"/>
      <url>/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/python_anaconda.png" alt=""></p><p>學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。</p><a id="more"></a><h2 id="Anaconda"><a href="#Anaconda" class="headerlink" title="Anaconda"></a>Anaconda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/anaconda-logo.png" alt=""></p><p>Anaconda 是最受歡迎的 Python 資料科學 (Data Science) 平台，它特點就是本來就包含了各種數據分析、科學計算的相關套件 (例如：NumPy、SciPy、Matplotlib、SymPy、Pandas … 等)，而 Anaconda 的套件管理工具就是 conda。</p><h2 id="Conda"><a href="#Conda" class="headerlink" title="Conda"></a>Conda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/conda-logo.png" alt=""></p><p>Conda 是一個開源的套件與環境管理的系統，可以在 Windows、macOS 和 Linux 上使用。可利用 Conda 來安裝、執行、更新套件以及其相依的套件，並且還可用來建立不同的開發環境 (例如：不同環境有不同的 Python 版本)。</p><!-- more --><h2 id="安裝-Anaconda"><a href="#安裝-Anaconda" class="headerlink" title="安裝 Anaconda"></a>安裝 Anaconda</h2><p>至 <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda</a> 官網下載並安裝，建議選擇 Python 3.x 的版本。</p><h2 id="建立虛擬環境"><a href="#建立虛擬環境" class="headerlink" title="建立虛擬環境"></a>建立虛擬環境</h2><p>從指定套件列表中建立新的 conda 環境：</p><ul><li><code>-n</code>，<code>--name</code>：設定環境名稱</li></ul><pre><code class="shell">$ conda create -n &lt;environment&gt; &lt;package&gt;# 安裝整套 Anaconda$ conda create -n &lt;environment&gt; anaconda# 指定 Python 版本$ conda create -n &lt;environment&gt; python=3.6</code></pre><ul><li><code>-e</code>，<code>--envs</code>：列出已建立的環境</li></ul><pre><code class="shell"># 顯示虛擬環境列表，並顯示正在使用的虛擬環境$ conda info -e# conda environments:#base                  *  D:\Users\Titan\Anaconda3hello                    D:\Users\Titan\Anaconda3\envs\hello</code></pre><p>使用或 <code>activate</code> 至指定環境：</p><pre><code class="shell"># Windows$ activate &lt;environment&gt;# Linux and macOS$ source activate &lt;environment&gt;</code></pre><pre><code class="shell"># 顯示虛擬環境列表，並顯示正在使用的虛擬環境$ conda info -e# conda environments:#base                     D:\Users\Titan\Anaconda3hello                 *  D:\Users\Titan\Anaconda3\envs\hello</code></pre><blockquote><p><code>*</code> 代表目前正在使用的虛擬環境</p></blockquote><h2 id="離開虛擬環境"><a href="#離開虛擬環境" class="headerlink" title="離開虛擬環境"></a>離開虛擬環境</h2><p>如果要將現在環境改回預設值 <code>base</code> (離開目前環境) 可使用下面指令：</p><pre><code class="shell"># Windows$ deactivate# Linux and macOS$ source deactivate</code></pre><h2 id="利用-conda-安裝套件"><a href="#利用-conda-安裝套件" class="headerlink" title="利用 conda 安裝套件"></a>利用 conda 安裝套件</h2><pre><code class="shell">$ conda install &lt;package&gt;# 安裝多個套件$ conda install &lt;package-1&gt; &lt;package-2&gt;</code></pre><h2 id="查看資訊"><a href="#查看資訊" class="headerlink" title="查看資訊"></a>查看資訊</h2><p>查看 conda 目前版本</p><pre><code class="shell">$ conda -Vconda 4.5.11</code></pre><p>查看目前環境已安裝的套件</p><pre><code class="shell">$ conda list# packages in environment at D:\Users\Titan\Anaconda3:## Name                    Version                   Build  Channel...jupyter                   1.0.0                    py35_3jupyter_client            5.2.3                    py35_0jupyter_console           4.1.1                    py35_0jupyter_core              4.4.0            py35h629ba7f_0jupyterlab                0.32.1                    &lt;pip&gt;jupyterlab-launcher       0.10.5                    &lt;pip&gt;...</code></pre><p>查看 conda 是否有某套件：</p><pre><code class="shell">$ conda search &lt;package&gt;$ conda search pandasLoading channels: done# Name                  Version           Build  Channelpandas                    0.9.0      np16py27_0  pkgs/freepandas                    0.9.1      np16py27_0  pkgs/free...</code></pre><p>如果 conda 沒有該套件，可以使用 pip 來安裝套件：</p><pre><code class="shell"># 安裝套件$ pip install &lt;package&gt;# 更新套件$ pip install --upgrade &lt;package&gt;</code></pre><h2 id="刪除套件"><a href="#刪除套件" class="headerlink" title="刪除套件"></a>刪除套件</h2><pre><code class="shell"># 刪除環境內的套件$ conda remove -n &lt;environment&gt; &lt;package&gt;# 刪除目前環境內的套件$ conda remove &lt;package&gt;# 刪除多個套件$ conda remove &lt;package-1&gt; &lt;package-2&gt;</code></pre><h2 id="更新套件"><a href="#更新套件" class="headerlink" title="更新套件"></a>更新套件</h2><pre><code class="shell"># 更新 conda$ conda update conda# 更新 Anaconda$ conda update anaconda# 更新 Python$ conda update python# 更新特定套件$ conda update &lt;package&gt;</code></pre><h2 id="刪除虛擬環境"><a href="#刪除虛擬環境" class="headerlink" title="刪除虛擬環境"></a>刪除虛擬環境</h2><pre><code class="shell">$ conda env remove -n &lt;environment&gt;</code></pre><h3 id="更新-Python"><a href="#更新-Python" class="headerlink" title="更新 Python"></a>更新 Python</h3><h4 id="更新全域環境"><a href="#更新全域環境" class="headerlink" title="更新全域環境"></a>更新全域環境</h4><pre><code class="shell">$ conda update python$ conda update anaconda</code></pre><p>如果要更新 Python 的特定版本：</p><pre><code class="shell">$ conda install python==$pythonversion$</code></pre><h4 id="建立新環境-最佳方案"><a href="#建立新環境-最佳方案" class="headerlink" title="建立新環境 (最佳方案)"></a>建立新環境 (最佳方案)</h4><pre><code class="shell">$ conda create --name py36 python=3.6</code></pre><h4 id="取得-Python-的最新版本"><a href="#取得-Python-的最新版本" class="headerlink" title="取得 Python 的最新版本"></a>取得 Python 的最新版本</h4><pre><code class="shell">$ conda create --name py365 python=3.6.5 --channel conda-forge</code></pre><p>:::warning<br>注意：Conda 會更新該版本列表中的最高版本，因此 Python 2.7 更新到 2.x 中的最高版本，而 3.x 系列依此類推。<br>:::</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul><li><a href="https://conda.io/docs/user-guide/tasks/manage-pkgs.html" target="_blank" rel="noopener">Managing packages | Conda documentation</a></li><li><a href="https://stackoverflow.com/questions/41535881/how-do-i-upgrade-to-python-3-6-with-conda" target="_blank" rel="noopener">macos - How do I upgrade to Python 3.6 with conda? - Stack Overflow</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anaconda </tag>
            
            <tag> Conda </tag>
            
            <tag> Virtual Environment </tag>
            
            <tag> Package Management </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Windows Subsystem for Linux (WSL)</title>
      <link href="/article/windows-subsystem-for-linux.html"/>
      <url>/article/windows-subsystem-for-linux.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/windows-subsystem-for-linux.png" alt=""></p><p>Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。</p><a id="more"></a><h2 id="啟用-Windows-Subsystem-for-Linux"><a href="#啟用-Windows-Subsystem-for-Linux" class="headerlink" title="啟用 Windows Subsystem for Linux"></a>啟用 Windows Subsystem for Linux</h2><p>使用系統管理者權限開啟 PowerShell，並執行下面命令啟用 <code>Windows Subsystem for Linux</code> 功能：</p><pre><code class="shell">$ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux</code></pre><p>如果顯示下面訊息就代表你沒有使用系統管理員開啟 PowerShell：</p><pre><code class="shell">Enable-WindowsOptionalFeature : 要求的作業需要提升的權限。位於 線路:1 字元:1+ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows- ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    + CategoryInfo          : NotSpecified: (:) [Enable-WindowsOptionalFeature], COMException    + FullyQualifiedErrorId : Microsoft.Dism.Commands.EnableWindowsOptionalFeatureCommand</code></pre><p><img src="../images../images/windows-subsystem-for-linux/2018-11-17-19-04-25.png" alt=""></p><p>接著等他跑一下…：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-04-37.png" alt=""></p><p>接著他會問是否要重啟電腦，因為預設是 Yes，所以可以直接按 <code>Enter</code>：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-04-47.png" alt=""></p><p>其實上面指令就等於去「控制台 &gt; 程式集 &gt; 開啟或關閉 Windows 功能」開啟「適用於 Linux 的 Windows 子系統」。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-10.png" alt=""></p><h2 id="安裝-Linux-發行版"><a href="#安裝-Linux-發行版" class="headerlink" title="安裝 Linux 發行版"></a>安裝 Linux 發行版</h2><p>系統組建 (build) 必須要 Windows build 16215 或更新版本。若要想知道系統組建，可至 Windows 的「設定」內的「關於」即可查看。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-23.png" alt=""></p><p>你可以選擇你想安裝的 Linux 發行版：</p><ul><li><a href="https://www.microsoft.com/zh-tw/p/ubuntu-1604-lts/9pjn388hp8c9" target="_blank" rel="noopener">Ubuntu 16.04 LTS</a></li><li><a href="https://www.microsoft.com/zh-tw/p/ubuntu-1804-lts/9n9tngvndl3q" target="_blank" rel="noopener">Ubuntu 18.04 LTS</a></li><li><a href="https://www.microsoft.com/zh-tw/p/debian-gnu-linux/9msvkqc78pk6" target="_blank" rel="noopener">Debian GNU/Linux</a></li><li><a href="https://www.microsoft.com/zh-tw/p/opensuse-leap-42/9njvjts82tjx" target="_blank" rel="noopener">OpenSUSE Leap 42</a></li><li><a href="https://www.microsoft.com/zh-tw/p/suse-linux-enterprise-server-12/9p32mwbh6cns" target="_blank" rel="noopener">SUSE Linux Enterprise Server 12</a></li><li><a href="https://blogs.msdn.microsoft.com/commandline/2018/03/05/kali-linux-for-wsl/" target="_blank" rel="noopener">Kali Linux</a></li></ul><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-05-41.png" alt=""></p><p>如果在安裝後直接開啟 Ubuntu，就會顯示 <code>Error: 0x8007007e</code> 錯誤就代表你沒有啟用 <code>Windows Subsystem for Linux</code> 功能，詳情請參考上面：</p><pre><code class="shell">The WSL optional component is not enabled. Please enable it and try again.See https://aka.ms/wslinstall for details.Error: 0x8007007ePress any key to continue...</code></pre><p>安裝後啟動 Linux 發行版，此時會開啟一個 console 視窗。因為是第一次開啟，所以會先安裝 WSL，等它安裝完後，就會看到下面畫面，系統要你建立一個新的 Unix 使用者名稱：</p><pre><code class="shell">Installing, this may take a few minutes...Installation successful!Please create a default UNIX user account. The username does not need to match your Windows username.For more information visit: https://aka.ms/wslusersEnter new UNIX username:</code></pre><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-06.png" alt=""></p><p>接著是設定此使用者的密碼，這邊的使用者與你的 Windows 使用者名稱和密碼沒有任何關係。詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/windows/wsl/user-support" target="_blank" rel="noopener">Linux User Account and Permissions | Microsoft Docs</a> 文件。</p><p>如果顯示 <code>$</code> 就代表設定完成囉！</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-17.png" alt=""></p><p>執行 <code>lsb_release -a</code> 指令就會看到 Linux 的系統版本：</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-28.png" alt=""></p><h2 id="在其他終端使用-Bash"><a href="#在其他終端使用-Bash" class="headerlink" title="在其他終端使用 Bash"></a>在其他終端使用 Bash</h2><p>如果在使用 CMD 、 PowerShell 或其他終端 (例如我常用的 Cmder) 時想用 bash shell，可使用 <code>bash</code> 指令就可以啟動新的 Ubuntu shell：</p><pre><code class="shell">$ bash</code></pre><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-42.png" alt=""></p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-06-53.png" alt=""></p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-07-01.png" alt=""></p><h2 id="存取目錄"><a href="#存取目錄" class="headerlink" title="存取目錄"></a>存取目錄</h2><p>如果想存取 <code>D:\project</code>，在此環境下的路徑就是 <code>/mnt/d/project</code>。</p><p><img src="../images/windows-subsystem-for-linux/2018-11-17-19-07-14.png" alt=""></p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>如果有在跨平台開發或維運的朋友，這個功能應該是一直以來的願望吧？讓你在 Windows 上可以直接處理事情，不用再多開 VM 來使用，不只省資源，也省硬碟空間，重點是不用等 VM 開機…</p><h2 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/windows/wsl/install-win10" target="_blank" rel="noopener">Install the Linux Subsystem on Windows 10 | Microsoft Docs</a></li><li><a href="https://blogs.msdn.microsoft.com/microsoft_student_partners_in_taiwan/2017/10/03/wsltune/" target="_blank" rel="noopener">【WSL】Windows Subsystem for Linux 安裝及基本配置！ | 台灣微軟學生大使</a></li><li><a href="https://kheresy.wordpress.com/2016/04/12/bash-on-ubuntu-on-windows/" target="_blank" rel="noopener">Bash on Ubuntu on Windows 的簡單使用 | Heresy’s Space</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WSL </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Windows 10 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub 縮網址服務 Git.io</title>
      <link href="/article/github-url-shortener.html"/>
      <url>/article/github-url-shortener.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/github-url-shortener.png" alt=""></p><p>最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「<a href="https://git.io/" target="_blank" rel="noopener">Git.io</a>」，它只適用於 <code>gist.github.com</code> 及 <code>github.com</code> 兩個 hostname。</p><a id="more"></a><p>下列網址都可以透過 Git.io 來建立縮網址：</p><ul><li>Github 個人或組織專業 ( <code>https://github.com/&lt;github-id&gt;</code> )</li><li>Github repository ( <code>https://github.com/&lt;github-id&gt;/&lt;repo-name&gt;</code> ) 或 repository 內目錄或檔案</li><li>Gist ( <code>https://gist.github.com/&lt;github-id&gt;/&lt;gist-id&gt;</code> )</li></ul><p>Git.io 有兩種建立短網址的方法，下面會分別介紹：</p><ul><li>直接到 <a href="https://git.io/" target="_blank" rel="noopener">Git.io</a> 線上設定</li><li>使用 <code>curl</code> 指令設定：<a href="https://blog.github.com/2011-11-10-git-io-github-url-shortener/" target="_blank" rel="noopener">Git.io: GitHub URL Shortener | GitHub Blog</a></li></ul><h2 id="Git-io-線上設定"><a href="#Git-io-線上設定" class="headerlink" title="Git.io 線上設定"></a><a href="https://git.io/" target="_blank" rel="noopener">Git.io</a> 線上設定</h2><p>最簡單的方法當然是直接打開 <a href="https://git.io/" target="_blank" rel="noopener">Git.io</a>，接著輸入網址並點擊「shorten」按鈕就會將你剛剛輸入的網址變成短網址，短網址的格式是 <code>git.io/xxx</code>。</p><p>但缺點是無法自訂短網址名稱，預設是自動隨機英文 + 數字的字串。</p><p><img src="../images/github-url-shortener/github-url-shortener.png" alt=""></p><h2 id="使用-curl-指令建立短網址"><a href="#使用-curl-指令建立短網址" class="headerlink" title="使用 curl 指令建立短網址"></a>使用 <code>curl</code> 指令建立短網址</h2><ul><li><code>-i</code>、<code>--include</code>：顯示 HTTP response headers</li><li><code>-F</code>、<code>--form &lt;name=content&gt;</code>：設定表單資料，<code>Content-Type</code> 會被設為 <code>multipart/form-data</code></li></ul><pre><code class="shell">$ curl -i https://git.io -F &quot;url=&lt;想縮短的網址&gt;&quot; -F &quot;code=&lt;自訂短網址名稱&gt;&quot;</code></pre><p>例如我想將自己的 Github profile URL：<code>github.com/titangene</code> 縮短成 <code>git.io/titan</code>，就要執行下面指令：</p><pre><code class="shell">$ curl -i https://git.io -F &quot;url=https://github.com/titangene&quot; -F &quot;code=titan&quot;HTTP/1.1 201 Created...Location: https://git.io/titan...$ curl -i https://git.io -F &quot;url=https://titangene.github.io/&quot; -F &quot;code=titan-blog&quot;</code></pre><p>只要輸入下面指令就可以確認是否建立成功</p><pre><code class="shell">$ curl -i https://git.io/titanHTTP/1.1 302 Found...Location: https://github.com/titangene...</code></pre><h2 id="小插曲-縮網址不小心設定錯誤"><a href="#小插曲-縮網址不小心設定錯誤" class="headerlink" title="[小插曲] 縮網址不小心設定錯誤"></a>[小插曲] 縮網址不小心設定錯誤</h2><p>一開始在 Git.io 測試時，直接用自己的 Github profile URL ( <code>github.com/titangene</code> ) 來產生預設隨機英文 + 數字的短網址，想要修改成 <code>git.io/titan</code> 卻沒辦法！這是因為 Git.io 沒有直接提供修改短網址的功能。</p><p>後來 Google 一下才發現只能聯繫 <a href="https://github.com/contact" target="_blank" rel="noopener">Github 客服</a>來幫忙刪除短網址，然後再自行重新設定。過了不到半天客服就回信幫我解決了！真是太感謝 Github 客服了！</p>]]></content>
      
      
      <categories>
          
          <category> Other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> URL </tag>
            
            <tag> URL Shortener </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 自訂字型</title>
      <link href="/article/flutter-custom-fonts.html"/>
      <url>/article/flutter-custom-fonts.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。</p><a id="more"></a><h2 id="將字型檔放入專案資料夾內"><a href="#將字型檔放入專案資料夾內" class="headerlink" title="將字型檔放入專案資料夾內"></a>將字型檔放入專案資料夾內</h2><p>此範例是放在 <code>./assets/fonts</code> 資料夾內：</p><pre><code>assets/  fonts/    FiraCode-Medium.ttf    mononoki-Bold.ttf    mononoki-BoldItalic.ttf    mononoki-Italic.ttf    mononoki-Regular.ttf</code></pre><h2 id="在-pubspec-yaml-定義字型資訊"><a href="#在-pubspec-yaml-定義字型資訊" class="headerlink" title="在 pubspec.yaml 定義字型資訊"></a>在 <code>pubspec.yaml</code> 定義字型資訊</h2><pre><code class="yaml">flutter:  fonts:    - family: FiraCode      fonts:        - asset: assets/fonts/FiraCode-Medium.ttf    - family: Mononoki      fonts:        - asset: assets/fonts/mononoki-Regular.ttf        - asset: assets/fonts/mononoki-Bold.ttf          weight: 700        - asset: assets/fonts/mononoki-Italic.ttf          style: italic        - asset: assets/fonts/mononoki-BoldItalic.ttf          weight: 700          style: italic</code></pre><h2 id="設定預設字型"><a href="#設定預設字型" class="headerlink" title="設定預設字型"></a>設定預設字型</h2><p><img src="../images/flutter-custom-fonts/flutter_set-default-font.png" alt=""></p><pre><code class="dart">MaterialApp(  title: &#39;Custom Fonts&#39;,  theme: ThemeData(fontFamily: &#39;FiraCode&#39;),  home: MyHomePage(title: &#39;Custom Fonts&#39;),);</code></pre><h2 id="在特定-Widget-設定字型"><a href="#在特定-Widget-設定字型" class="headerlink" title="在特定 Widget 設定字型"></a>在特定 Widget 設定字型</h2><p><img src="../images/flutter-custom-fonts/flutter_set-the-font-on-a-specific-widget.png" alt=""></p><pre><code class="dart">Text(  &#39;Custom Fonts&#39;,  style: TextStyle(    fontFamily: &#39;Mononoki&#39;,    fontSize: 30.0,    fontWeight: FontWeight.w700,    fontStyle: FontStyle.italic,  ),)</code></pre><h2 id="完整範例程式碼"><a href="#完整範例程式碼" class="headerlink" title="完整範例程式碼"></a>完整範例程式碼</h2><p><img src="../images/flutter-custom-fonts/flutter_custom-fonts_demo.png" alt=""></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return new MaterialApp(      title: &#39;Custom Fonts&#39;,      theme: new ThemeData(        primarySwatch: Colors.blue,        fontFamily: &#39;FiraCode&#39;,      ),      home: new MyHomePage(title: &#39;Custom Fonts&#39;),    );  }}class MyHomePage extends StatelessWidget {  MyHomePage({Key key, this.title}) : super(key: key);  final String title;  @override  Widget build(BuildContext context) {    return new Scaffold(      appBar: new AppBar(        title: new Text(this.title),      ),      body: Column(        children: &lt;Widget&gt;[          new Text(            &#39;&lt;-- Custom Fonts -&gt;&gt;&#39;,            style: TextStyle(fontSize: 30.0),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontWeight: FontWeight.w700,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontStyle: FontStyle.italic,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontWeight: FontWeight.w700,              fontStyle: FontStyle.italic,            ),          ),        ],      ),    );  }}</code></pre><blockquote><p>詳情可參考 <a href="https://flutter.io/cookbook/design/fonts/" target="_blank" rel="noopener">Using custom fonts - Flutter</a> 官方文件</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Native App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Flutter 環境建置 (Windows)</title>
      <link href="/article/flutter-install-on-windows.html"/>
      <url>/article/flutter-install-on-windows.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。</p><a id="more"></a><p>詳情可參考官方連結：<a href="https://flutter.io/setup-windows/" target="_blank" rel="noopener">Get Started: Install on Windows | Flutter</a></p><h2 id="系統要求"><a href="#系統要求" class="headerlink" title="系統要求"></a>系統要求</h2><ul><li>OS：Windows 7 SP1 或以上 (64-bit)</li><li>硬碟空間：400 MB (不包括 IDE 和工具的空間)</li><li>工具<ul><li><a href="https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-windows-powershell?view=powershell-6#upgrading-existing-windows-powershell" target="_blank" rel="noopener">PowerShell 5.0</a> 或更新版</li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git for Windows</a> (勾選 <code>Use Git from the Windows Command Prompt</code> 選項，若沒打勾可自行將 Git 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數，預設目錄為 <code>C:\Program Files\Git\bin</code> )</li></ul></li></ul><h2 id="安裝-Flutter-SDK"><a href="#安裝-Flutter-SDK" class="headerlink" title="安裝 Flutter SDK"></a>安裝 Flutter SDK</h2><ol><li>下載 Flutter SDK，可下載<a href="https://flutter.io/sdk-archive/#windows" target="_blank" rel="noopener">歷史版本</a>，但建議安裝新版。</li><li>解壓檔內有一個 <code>flutter</code> 資瞭夾，將此資料夾放在 Flutter SDK 所需的安裝目錄 (e.g <code>D:\dev\flutter</code>，請勿將 <code>flutter</code> 資瞭夾放在需要提高權限之類的目錄內，e.g. <code>C:\Program Files\</code> )。</li><li>將 <code>flutter\bin</code> 的完整目錄 (e.g. <code>D:\dev\flutter\bin</code> ) 加入 <code>Path</code> 環境變數 (各完整路徑記得用 <code>;</code> 分號分隔)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-09-08.png" alt=""></p><ol start="4"><li>接著就可以在 Console 內執行 Flutter commands</li><li>執行 <code>flutter --version</code> 指令確定已成功安裝  Flutter SDK<pre><code class="shell">$ flutter --versionFlutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (12 days ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282</code></pre></li><li>之後請定期執行 <code>flutter upgrade</code> 指令更新 Flutter (因為目前還在 beta，大約幾週就會有新版)</li></ol><p>執行 <code>flutter --version</code> 指令後，若看到下面畫面就代表現在有新版可以更新：</p><pre><code class="shell">$ flutter --version  ╔════════════════════════════════════════════════════════════════════════════╗  ║ A new version of Flutter is available!                                     ║  ║                                                                            ║  ║ To update to the latest version, run &quot;flutter upgrade&quot;.                    ║  ╚════════════════════════════════════════════════════════════════════════════╝Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282</code></pre><p>執行 <code>flutter upgrade</code> 指令更新 Flutter：</p><pre><code class="shell">$ flutter upgradeUpgrading Flutter from D:\dev\flutter......Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282Running flutter doctor...Doctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.8.2, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] VS Code (version 1.27.2)[!] Connected devices    ! No devices available! Doctor found issues in 1 category.</code></pre><p>在執行一次 <code>flutter --version</code> 確認已更新至新的版本：</p><pre><code class="shell">$ flutter --versionFlutter 0.8.2 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 5ab9e70727 (13 days ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.3.1.flutter-760a9690c2</code></pre><h2 id="flutter-doctor"><a href="#flutter-doctor" class="headerlink" title="flutter doctor"></a>flutter doctor</h2><p>下面指令是用來查看是否需要安裝任何依賴才能完成設定，因此他會檢查你的環境並顯示檢查報告：</p><pre><code class="shell">$ flutter doctor</code></pre><p>Dart SDK is bundled with Flutter，不用另外安裝 Dart。從檢查報告的輸出中可以了解需要安裝的其他軟體或執行的其他任務 (以粗體顯示)。例如：</p><pre><code class="shell">$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.228], locale zh-TW)[!] Android toolchain - develop for Android devices (Android SDK 28.0.2)    X Android license status unknown.[√] Android Studio (version 3.1)    X Flutter plugin not installed; this adds Flutter specific functionality.    X Dart plugin not installed; this adds Dart specific functionality.[!] Connected devices    ! No devices available! Doctor found issues in 2 categories.</code></pre><p>下面會介紹如何執行這些任務並完成設定過程。可再次執行 <code>flutter doctor</code> 指令來驗證是否已正確設定所有內容。</p><p>如果已驗證設定所有內容，就會看到下面輸出結果：</p><pre><code class="shell">$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] Connected devices (1 available)• No issues found!</code></pre><p>加上參數 <code>-v</code>，可以看更詳細的驗證說明：</p><pre><code class="shell">$ flutter doctor -v[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)    • Flutter version 0.7.3 at D:\dev\flutter    • Framework revision 3b309bda07 (3 weeks ago), 2018-08-28 12:39:24 -0700    • Engine revision af42b6dc95    • Dart version 2.1.0-dev.1.0.flutter-ccb16f7282[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)    • Android SDK at C:\Users\Titan\AppData\Local\Android\sdk    • Android NDK location not configured (optional; useful for native profiling support)    • Platform android-28, build-tools 28.0.2    • ANDROID_HOME = C:\Users\Titan\AppData\Local\Android\sdk    • Java binary at: C:\Program Files\Android\Android Studio\jre\bin\java    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)    • All Android licenses accepted.[√] Android Studio (version 3.1)    • Android Studio at C:\Program Files\Android\Android Studio    • Flutter plugin version 28.0.1    • Dart plugin version 173.4700    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)[√] Connected devices (1 available)    • SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)• No issues found!</code></pre><h2 id="Android-設定"><a href="#Android-設定" class="headerlink" title="Android 設定"></a>Android 設定</h2><p>:::info<br>Flutter 依賴於 Android Studio 以提供 Android 平台的依賴性。但也可以使用其他編輯器來寫 Flutter App。<br>:::</p><h3 id="安裝-Java-JDK"><a href="#安裝-Java-JDK" class="headerlink" title="安裝 Java JDK"></a>安裝 Java JDK</h3><ol><li>安裝 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a></li><li>將 Java JDK 安裝目錄設定為 <code>JAVA_HOME</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151</code> )，並在將 Java JDK 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151\bin</code>，也可設定為 <code>%JAVA_HOME%\bin</code> )</li></ol><h3 id="安裝-Android-Studio"><a href="#安裝-Android-Studio" class="headerlink" title="安裝 Android Studio"></a>安裝 Android Studio</h3><ol><li>安裝 <a href="https://developer.android.com/studio/" target="_blank" rel="noopener">Android Studio</a>，請安裝 Recommended (建議) 版</li><li>執行 Android Studio，並瀏覽 <code>Android Studio Setup Wizard</code>，安裝最新的 Android SDK、Android SDK Platform-Tools、Android SDK Build-Tools，這些都是 Flutter 在開發 Android 時所必須的。</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-14.png" alt=""></p><ol start="3"><li>將 Android SDK 目錄設定為 <code>ANDROID_HOME</code> 環境變數 (預設目錄為 <code>C:\Users\Titan\AppData\Local\Android\sdk</code> )</li><li>定期更新 Android SDK (於 <code>Android Studio</code> &gt; <code>Configure</code> &gt; <code>SDK Manager</code> 安裝)</li></ol><h3 id="設定你的-Android-裝置"><a href="#設定你的-Android-裝置" class="headerlink" title="設定你的 Android 裝置"></a>設定你的 Android 裝置</h3><p>想在 Android 裝置上執行和測試 Flutter App，需要 Android 4.1 (API level 16) 或更高版本的 Android 設備。</p><ol><li>裝置請開啟 <code>開發者模式</code> 內的 <code>USB 偵錯</code>，詳情可參考 <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener">Configure on-device developer options  |  Android Developers</a> 此 Android 官方文件</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-23.png" alt=""></p><ol start="2"><li>安裝 <a href="https://developer.android.com/studio/run/win-usb" target="_blank" rel="noopener">Google USB Driver</a> (限 Windows)</li><li>使用 USB 線將裝置連接至電腦，如果你的裝置有出現提示，請授權你的電腦可訪問你的裝置</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-36.png" alt=""></p><ol start="4"><li>開啟終端機，執行 <code>flutter devices</code> 指令以驗證 Flutter 是否成功連結 Android 裝置</li></ol><pre><code class="shell"># 像我連接到 Note 8$ flutter devices1 connected device:SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)</code></pre><p>Flutter 預設會以 <code>adb</code> 工具基於的 Android SDK 版本來使用，若想用其他版本的 Android SDK，可設定你所需的 Android SDK 目錄為 <code>ANDROID_HOME</code> 環境變數。</p><p>如果執行 <code>flutter run</code>指令，而且成功將 App 安置手機並執行，就會看到 App 的畫面</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-45.png" alt=""></p><h3 id="設定-Android-模擬器-emulator"><a href="#設定-Android-模擬器-emulator" class="headerlink" title="設定 Android 模擬器 (emulator)"></a>設定 Android 模擬器 (emulator)</h3><p>想在 Android 模擬器上執行和測試 Flutter App，請依照下面步驟：</p><ol><li>在主機上啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">VM acceleration</a></li><li>啟動 <strong>Android Studio</strong> &gt; <strong>Tools</strong> &gt; <strong>AVD Manager</strong> 並點選 <strong>Create Virtual Device</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-10-55.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-05.png" alt=""></p><ol><li>選擇設備定義，然後點擇 <strong>Next</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-14.png" alt=""></p><ol start="2"><li>選擇你所需的 Android 版本的 OS image，然後點選 <strong>Next</strong> (建議選擇 <em>x86</em> 或 x86_64 image)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-23.png" alt=""></p><ol start="3"><li>在 Emulated Performance 欄位請選擇 <strong>Hardware - GLES 2.0</strong> 以啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">hardware acceleration</a></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-11-38.png" alt=""></p><ol start="4"><li>驗證 AVD 設定是否正確，若確定請點選 <strong>Finish</strong></li><li>在 Android Virtual Device Manager 中，選擇某台模擬器並點擊 Run</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-12-30.png" alt=""></p><p>有關上述步驟的詳情可參考 <a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">Managing AVDs</a></p><h2 id="設定編輯器"><a href="#設定編輯器" class="headerlink" title="設定編輯器"></a>設定編輯器</h2><h3 id="設定-Android-Studio"><a href="#設定-Android-Studio" class="headerlink" title="設定 Android Studio"></a>設定 Android Studio</h3><p>安裝 Flutter 和 Dart plugins (外掛)，有兩個 plugin 支援 Flutter：</p><ul><li><code>Flutter</code> 外掛：支持 Flutter 開發人員工作流程 (running, debugging, hot reload … 等)</li><li><code>Dart</code> 外掛：提供程式碼分析 (輸入時的程式碼驗證、程式碼自動補全)</li></ul><p>安裝步驟：</p><ol><li>執行 Android Studio</li><li>開啟外掛選項 (<strong>File</strong> &gt; <strong>Settings</strong> &gt; <strong>Plugins</strong>)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-00.png" alt=""></p><ol start="3"><li>點選 <strong>Browse repositories…</strong>，接著搜尋 <code>Flutter</code> 並選擇並安裝名為 <code>Flutter</code> 的 plugin (請注意，安裝 <code>Flutter</code> 外掛時會同時安裝 <code>Dart</code> 語言外掛)</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-06.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-13.png" alt=""></p><ol start="4"><li>點擊 <strong>Restart Android Studio</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-20.png" alt=""></p><h3 id="設定-VS-Code"><a href="#設定-VS-Code" class="headerlink" title="設定 VS Code"></a>設定 VS Code</h3><ul><li>安裝 Flutter plugin：<ul><li>安裝 <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter" target="_blank" rel="noopener">Flutter</a> 此擴充功能，並重啟 VS Code。</li></ul></li></ul><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-30.png" alt=""></p><ul><li>使用 Flutter Doctor 驗證你的設定環境：<ul><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: Run Flutter Doctor</strong> 即可至 <strong>OUTPUT (輸出)</strong> 查看驗證結果。</li></ul></li></ul><p><img src="../images/flutter-install-on-windows/2018-10-23-07-14-39.png" alt=""></p><h1 id="入門"><a href="#入門" class="headerlink" title="入門"></a>入門</h1><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><h3 id="建立新-app"><a href="#建立新-app" class="headerlink" title="建立新 app"></a>建立新 app</h3><p>在 Android Studio 中建立 Flutter 專案 ( <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>New Flutter Project…</strong> )</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-04.png" alt=""></p><p>接著選擇 <strong>Flutter Application</strong>，並點選 <strong>Next</strong></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-10.png" alt=""></p><p>請設定專案名稱、確定 Flutter SDK 目錄、設定專案儲存位置與填寫專案的簡單描述後，點選 <strong>Next</strong></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-17.png" alt=""></p><p>最後輸入公司網域 (e.g. example.com) 後，點選 <strong>Finish</strong> 即可建立新的 Flutter 專案</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-23.png" alt=""></p><h3 id="執行-app"><a href="#執行-app" class="headerlink" title="執行 app"></a>執行 app</h3><p>下圖為 Android Studio 的工具列：</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-29.png" alt=""></p><p>圖片來源：<a href="https://flutter.io/get-started/test-drive/#androidstudio" target="_blank" rel="noopener">Get Started: Test Drive | Flutter</a></p><ol><li>在 <strong>target selector</strong> 中，選擇已執行的 Android 裝置，若當前未啟動或未連接任何 Android 裝置，選擇某一模擬器時，Android Studio 就會開啟該選擇的模擬器。如果沒有可用的裝置，可至前面介紹的 <a href="#設定-Android-模擬器-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</li><li>點擊 <strong>Run</strong> 圖示執行 app</li><li>稍後就會在模擬器或裝置上看到下圖的 app 畫面<ol><li>等待的過程中會初始化 gradle</li><li>gradle 會 resolve dependencies</li><li>將專案轉成 apk</li><li>將 apk 安裝並執行於裝置上</li></ol></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-41.png" alt=""></p><pre><code class="shell">Launching lib\main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle...Resolving dependencies...Running &#39;gradlew assembleDebug&#39;...Built build\app\outputs\apk\debug\app-debug.apk.Installing build\app\outputs\apk\app.apk...D/OpenGLRenderer( 4777): HWUI GL PipelineI/OpenGLRenderer( 4777): Initialized EGL, version 1.4D/OpenGLRenderer( 4777): Swap behavior 1D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e5b00, tid 4831W/OpenGLRenderer( 4777): Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...D/OpenGLRenderer( 4777): Swap behavior 0D/EGL_emulation( 4777): eglCreateContext: 0x7073cf2a7600: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/EGL_emulation( 4777): eglCreateContext: 0x7073cf3b10a0: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c2fe87c0)Syncing files to device Android SDK built for x86 64...D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e65e0, tid 4813D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c560d6c0)</code></pre><h3 id="嘗試-hot-reload"><a href="#嘗試-hot-reload" class="headerlink" title="嘗試 hot reload"></a>嘗試 hot reload</h3><p>修改一些內容並儲存，app 就會自動做 hot reload，就會很快地看到最新的更新。</p><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="建立新-app-1"><a href="#建立新-app-1" class="headerlink" title="建立新 app"></a>建立新 app</h3><ol><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: New Project</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-50.png" alt=""></p><ol start="2"><li>輸入專案名稱後，按 <code>enter</code> 鍵</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-15-56.png" alt=""></p><ol start="3"><li>選擇專案目錄的儲存位置</li><li>等待專案建立完成，並在畫面顯示 <code>lib/main.dart</code> 檔案</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-01.png" alt=""></p><h3 id="執行-app-1"><a href="#執行-app-1" class="headerlink" title="執行 app"></a>執行 app</h3><ol><li><p>從 VS Code 底部的藍色狀態欄中點選 <strong>Device Selector</strong></p><ul><li><p>若要使用實體裝置，詳情至 <a href="#%E8%A8%AD%E5%AE%9A%E4%BD%A0%E7%9A%84-Android-%E8%A3%9D%E7%BD%AE">設定你的 Android 裝置</a> 參考。若連結成功會在 VS Code 底部的藍色狀態欄中看到你的裝置名稱</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-14.png" alt=""></p></li><li><p>如果沒有可用的裝置，請點選 <strong>No Devices</strong> 並啟動模擬器</p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-34.png" alt=""></p><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-41.png" alt=""></p></li></ul></li><li>執行 <strong>Debug</strong></li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-46.png" alt=""></p><ol start="3"><li>等待 App 執行，可在偵錯主控台 (Debug Console) 看到執行進度，稍後就會在模擬器或裝置上看到下圖的 app 畫面</li></ol><p><img src="../images/flutter-install-on-windows/2018-10-23-07-16-52.png" alt=""></p><h2 id="Terminal-editor"><a href="#Terminal-editor" class="headerlink" title="Terminal + editor"></a>Terminal + editor</h2><h3 id="建立新-app-2"><a href="#建立新-app-2" class="headerlink" title="建立新 app"></a>建立新 app</h3><p>使用 <code>flutter create</code> 指令來建立 Flutter 專案，裡面包含 <a href="https://material.io/design/" target="_blank" rel="noopener">Material Components</a> 的範例 app。app 的程式碼在 <code>lib/main.dart</code>。</p><pre><code class="shell">$ flutter create &lt;prject-name&gt;$ cd &lt;prject-name&gt;</code></pre><h3 id="執行-app-2"><a href="#執行-app-2" class="headerlink" title="執行 app"></a>執行 app</h3><p>使用 <code>flutter devices</code> 指令可檢查是否有正在執行的模擬器或裝置。如果沒有可用的裝置，可至前面介紹的 <a href="#設定-Android-模擬器-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</p><pre><code class="shell">$ flutter devices1 connected device:Android SDK built for x86 64 • emulator-5554 • android-x64 • Android 8.0.0 (API 26) (emulator)</code></pre><p>使用 <code>flutter run</code> 指令可執行 app，並提供以下功能的快速鍵：</p><ul><li><code>r</code>：hot reload</li><li><code>R</code>：hot restart (and rebuild state)</li><li><code>h</code>：顯示更多幫助訊息</li><li><code>q</code>：停止執行</li></ul><pre><code class="shell">$ flutter runUsing hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle...                                       1.7sResolving dependencies...                                   48.1sRunning &#39;gradlew assembleDebug&#39;...                          88.5sBuilt build\app\outputs\apk\debug\app-debug.apk.Installing build\app\outputs\apk\app.apk...                 11.4sSyncing files to device Android SDK built for x86 64...D/        ( 5458): HostConnection::get() New Host Connection established 0x7073c31aabe0, tid 5513D/EGL_emulation( 5458): eglMakeCurrent: 0x7073cf3b1280: ver 2 0 (tinfo 0x7073c2ab65c0)                                       12.3s🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:2158/For a more detailed help message, press &quot;h&quot;. To quit, press &quot;q&quot;.</code></pre>]]></content>
      
      
      <categories>
          
          <category> Native App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flutter </tag>
            
            <tag> Dart </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 加入 Disqus 討論區</title>
      <link href="/article/hexo-disqus.html"/>
      <url>/article/hexo-disqus.html</url>
      
        <content type="html"><![CDATA[<p><img src="../images/cover/hexo-disqus.png" alt=""></p><p>接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。</p><a id="more"></a><h2 id="建立-Disqus"><a href="#建立-Disqus" class="headerlink" title="建立 Disqus"></a>建立 Disqus</h2><p>至 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 首頁註冊帳號後並登入，接著點擊首頁的「GET STARTED」</p><p><img src="../images/hexo-disqus/disqus-home-page.png" alt=""></p><p>選擇「I want to install Disqus on my site」選項</p><p><img src="../images/hexo-disqus/disqus-on-my-site.png" alt=""></p><ul><li>Websit Name：自訂 short name，且是唯一，像我是設定 titangene-blog。short name 會在設定 Hexo 時需要</li><li>Category：類別，自行選擇</li><li>Language：語言，自行選擇</li></ul><p>填寫後點擊「Create Site」</p><p><img src="../images/hexo-disqus/disqus-create-a-new-site.png" alt=""></p><h2 id="設定-Hexo"><a href="#設定-Hexo" class="headerlink" title="設定 Hexo"></a>設定 Hexo</h2><p>在根目錄內的 <code>_config.yml</code> 內設定：</p><pre><code class="yaml">disqus_shortname: your_disqus_short_name</code></pre><p>設定後就可以看到每篇文章下面都可以留言囉！</p><p><img src="../images/hexo-disqus/disqus-hexo.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
