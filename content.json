{"meta":{"title":"Titangene Blog","subtitle":null,"description":"利用 blog 紀錄學習歷程","author":"Titangene","url":"https://titangene.github.io"},"pages":[{"title":"Categories","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:20:46.635Z","comments":false,"path":"categories/index.html","permalink":"https://titangene.github.io/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:22:54.477Z","comments":false,"path":"tags/index.html","permalink":"https://titangene.github.io/tags/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:21:46.626Z","comments":false,"path":"error/index.html","permalink":"https://titangene.github.io/error/index.html","excerpt":"","text":"This page does not exist, click here to go back to home page.頁面不存在，點此回到首頁。"}],"posts":[{"title":"在 Docker 下建立並使用 MSSQL Server for Linux","slug":"docker-mssql-server-for-linux","date":"2019-01-30T15:30:00.000Z","updated":"2019-01-30T15:24:31.812Z","comments":true,"path":"article/docker-mssql-server-for-linux.html","link":"","permalink":"https://titangene.github.io/article/docker-mssql-server-for-linux.html","excerpt":"在 SQL Server 2017 時，微軟推出了 Linux 版，同時也在 Docker Hub 上提供了 microsoft/mssql-server-linux 的 Docker image。本篇會介紹如何在 Docker 下，透過此 image 來建立並使用 MSSQL Server for Linux。","text":"在 SQL Server 2017 時，微軟推出了 Linux 版，同時也在 Docker Hub 上提供了 microsoft/mssql-server-linux 的 Docker image。本篇會介紹如何在 Docker 下，透過此 image 來建立並使用 MSSQL Server for Linux。MSSQL Server for Linux 要求必須 Docker Engine 1.8+，支援任何平台 (Windows/Mac/Linux)硬碟空間至少 2 GBRAM 至少 2 GBimage 必要的環境變數：ACCEPT_EULA=Y：確認同意授權合約MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;：設定 SA 密碼A strong system administrator (SA) 密碼必須符合以下規則：至少 8 個字元必需包含英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可詳情可參考官方的 SQL Server on Liunx 的系統需求 文件。建立 ContainerDocker Hub：microsoft/mssql-server-linux1234567# 從 Docker Hub 提取 SQL Server 2017 Linux container image$ docker pull microsoft/mssql-server-linux:2017-latest# 建立並執行 Docker container$ docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \\ -p 1401:1433 --name sql1 \\ -d microsoft/mssql-server-linux:2017-latest-e 'ACCEPT_EULA=Y'：確認同意授權合約-e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;'：必需是強密碼並至少 8 個字元。強密碼英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可。-p hostPort:containerPort：host 對外開 1401 port，container 內開 1433 port--name：指定 container 名稱-d：背景執行microsoft/mssql-server-linux:2017-latest：使用 SQL Server 2017 Linux image 建立 container如果列表 NAMES 顯示 sql1 並且 STATUS 顯示 UP 就代表 SQL Server 已在背景執行：1234# 查看 container 的狀態$ docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES08e2f151d579 microsoft/mssql-server-linux:2017-latest \"/bin/sh -c /opt/mss…\" 31 minutes ago Up 31 minutes 0.0.0.0:1401-&gt;1433/tcp sql1連接至 SQL Server使用 SQL Server 命令列工具 sqlcmd，連接到 SQL Server container：123456789# 在外部向執行中的 container 內部下指令，啟動 Container 內部的互動式 bash shell，來執行你下的指令$ docker exec -it sql1 bash# 使用 SQL Server 命令列工具 `sqlcmd`，並登入帳號密碼連接到 SQL Server$ /opt/mssql-tools/bin/sqlcmd -S localhost -U SAPassword:# 出現 \"1&gt;\" 就代表已成功登入並已進入 sqlcmd1&gt;變更 SA 的密碼SA 帳號是在安裝期間建立的 SQL Server 實例上的系統管理員。建立 SQL Server container 之後，在 container 中執行 echo $MSSQL_SA_PASSWORD，即可查看 SA 的密碼：123$ docker exec -it sql1 bashroot@xxx:/# echo $MSSQL_SA_PASSWORDYourStrong!Passw0rd執行下面指令可以變更 SA 的密碼，而 opt/mssql-tools/bin/sqlcmd 是 sqlcmd 所在的路徑：123$ docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \\ -S localhost -U SA -P '&lt;YourStrong!Passw0rd&gt;' \\ -Q 'ALTER LOGIN SA WITH PASSWORD=\"&lt;YourNewStrong!Passw0rd&gt;\"'參數說明：-S：server-U：user name-P：password-Q：query，執行 SQL 指令後結束 sqlcmd建立資料庫及查詢資料123456789101112131415161718192021# 查詢 server 上所有 DB 名稱1&gt; SELECT Name from sys.Databases# 在 sqlcmd 指令模式下，要輸入 GO 指令才會執行2&gt; GOName------------mastertempdbmodelmsdb(4 rows affected)# 建立資料庫1&gt; CREATE DATABASE TestDB2&gt; GO# 出現下面畫面 \"1&gt;\" 就代表已成功建立資料庫1&gt;# 離開 sqlcmd1&gt; quit使用 Azure Data Studio 連接 SQL ServerAzure Data Studio (以前稱為 SQL Operations Studio) 是一個輕量且免費的跨平台 SQL Server 開源管理工具，支援 Windows、macOS、Linux。安裝 Azure Data Studiofor Windows下載並解壓縮，接著執行 \\azuredatastudio-windows\\sqlops.exe 即可開始使用。for Linux下載並解壓縮，接著將 Azure Data Studio 執行檔加入 PATH 環境變數，以後即可在終端機輸入 azuredatastudio 開啟 Azure Data Studio：123456$ cd ~$ cp ~/Downloads/azuredatastudio-linux-&lt;version string&gt;.tar.gz ~$ tar -xvf ~/azuredatastudio-linux-&lt;version string&gt;.tar.gz$ echo 'export PATH=\"$PATH:~/azuredatastudio-linux-x64\"' &gt;&gt; ~/.bashrc$ source ~/.bashrc$ azuredatastudiofor macOS下載並解壓縮，然後將 Azure Data Studio 加入 Launchpad，將 Studio.app 拖曳到應用程式目錄 (Applications folder) 即可。安裝詳情可參考官方的 下載並安裝 - Azure Data Studio | Microsoft Docs 文件。登入 SQL ServerServer name 的格式： IP, PortIP：Linux：使用 ifconfig 指令查詢 IPWindows：使用 ipconfig 指令查詢 IPPort：要看前面建立的 container 是設定多少 Port此範例 (也就是下面的指令) 是設定使用 1401 port，所以只要輸入 YourIP, 1401 就能與 SQL Server 連接。123$ docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \\ -p 1401:1433 --name sql1 \\ -d microsoft/mssql-server-linux:2017-latest建立資料表和資料，並查詢資料執行下面指令，建立資料表和資料，並查詢資料：12345678-- 切換至 TestDB 資料庫use TestDB;-- 建立資料表CREATE TABLE People(Name nvarchar(50), Age int);-- 新增資料INSERT INTO People VALUES ('Titan', 18), ('John', 6), ('Alex', 40);-- 查詢年齡小於 20 歲的人SELECT * FROM People WHERE Age &lt; 20;執行完的結果如下圖，看到此查詢結果就代表已成功新增資料：刪除 Container指定刪除名為 sql1 的 container：12345678# 查詢目前的正在執行的 container$ docker ps# container 停止執行$ docker stop sql# 刪除 container$ docker rm sql1或是可以在未停止執行 container 的情況下，直接強制刪除 container：12# 強制刪除 container$ docker rm -f sql1透過 Volume 將資料庫的資料儲存至主機在 docker run 指令上加 -v 參數可以建立實體資料夾與 container 資料夾的對應關係，將主機上的指定目錄綁定到 container 的指定目錄，也就是可以存資料庫的資料至主機，參數語法為 -v &lt;host directory&gt;:/var/opt/mssql：12345# 執行 Docker container image$ docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \\ -p 1402:1433 --name sql2 \\ -v `pwd`/mssql:/var/opt/mssql \\ -d microsoft/mssql-server-linux:2017-latest備份與還原資料庫範例前置準備：建立資料庫、資料表和資料下面的 SQL 指令是用來立資料庫、資料表和資料，因為此 container 是剛剛另外新建的，之前的 container 已經刪除了 (因為沒有利用 Volume 儲存資料庫的資料)，所以需要重新建立資料：123456789-- 建立 資料庫CREATE DATABASE TestDB;GO-- 切換至 TestDB 資料庫use TestDB;-- 建立資料表CREATE TABLE People(Name nvarchar(50), Age int);-- 新增資料INSERT INTO People VALUES ('Titan', 18), ('John', 6), ('Alex', 40);備份資料庫使用 sqlcmd 連接到 SQL Server，並完整備份 TestDB 資料庫，備份檔存至 ./data/testdb.bak：12$ docker exec -it sql2 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \\ -Q \"BACKUP DATABASE TestDB TO DISK = N'/var/opt/mssql/data/testdb.bak' WITH NOFORMAT, NOINIT, NAME = 'demodb-full', SKIP, NOREWIND, NOUNLOAD, STATS = 10\"當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會備份完成，如果備份成功畫面就會顯示「BACKUP DATABASE successfully …」：1234567891011121314Password: 10 percent processed.20 percent processed.30 percent processed.40 percent processed.50 percent processed.60 percent processed.70 percent processed.80 percent processed.90 percent processed.Processed 312 pages for database 'TestDB', file 'TestDB' on file 1.100 percent processed.Processed 6 pages for database 'TestDB', file 'TestDB_log' on file 1.BACKUP DATABASE successfully processed 318 pages in 0.348 seconds (7.139 MB/sec).範例前置處理：刪除 container 和資料庫資料下面是要模擬把 container 刪除後，要如何將剛剛備份的資料庫資料 (也就是 ./data/testdb.bak ) 還原，因此也要刪除透過 Volume 儲存的資料庫資料，如以下步驟：刪除 container1234# 查詢目前的正在執行的 container$ docker ps# 強制刪除 container$ docker rm -f sql2刪除透過 Volume 儲存的資料庫資料1234567891011121314151617181920212223242526272829# 查看剛剛刪除的 container 保存下來的 DB 資料檔 (TestDB_log.ldf 和 TestDB.mdf)$ cd mssql/data$ pwd/home/titan/project/mssql/data$ tree├── master.mdf├── mastlog.ldf├── modellog.ldf├── model.mdf├── msdbdata.mdf├── msdblog.ldf├── tempdb.mdf├── templog.ldf├── testdb.bak├── TestDB_log.ldf &lt;---└── TestDB.mdf &lt;---# 刪除 TestDB.mdf 和 TestDB_log.ldf$ sudo rm TestDB*$ tree├── master.mdf├── mastlog.ldf├── modellog.ldf├── model.mdf├── msdbdata.mdf├── msdblog.ldf├── tempdb.mdf├── templog.ldf└── testdb.bak在建立一個新的 container (用來做還原資料庫用的)先回到專案的根目錄：12345$ pwd/home/titan/project/mssql/data$ cd ../..$ pwd/home/titan/project接著建立一個新的 container，名稱叫做 sql3：1234$ docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \\ -p 1403:1433 --name sql3 \\ -v `pwd`/mssql:/var/opt/mssql \\ -d microsoft/mssql-server-linux:2017-latest還原資料庫使用 sqlcmd 連接到 SQL Server，並還原 TestDB 資料庫 (要還原的備份檔存至 ./data/testdb.bak )：12$ docker exec -it sql3 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \\ -Q \"RESTORE DATABASE TestDB FROM DISK = N'/var/opt/mssql/data/testdb.bak' WITH FILE = 1, NOUNLOAD, REPLACE, STATS = 5\"當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會還原完成，如果還原成功畫面就會顯示「RESTORE DATABASE successfully …」：123456789101112131415161718192021222324Password: 6 percent processed.11 percent processed.15 percent processed.20 percent processed.25 percent processed.31 percent processed.36 percent processed.41 percent processed.45 percent processed.50 percent processed.57 percent processed.61 percent processed.66 percent processed.70 percent processed.75 percent processed.82 percent processed.86 percent processed.91 percent processed.95 percent processed.100 percent processed.Processed 344 pages for database 'TestDB', file 'TestDB' on file 1.Processed 7 pages for database 'TestDB', file 'TestDB_log' on file 1.RESTORE DATABASE successfully processed 351 pages in 0.321 seconds (8.530 MB/sec).檢查一下剛剛刪除的 TestDB.mdf 和 TestDB_log.ldf 都正確的還原了：12345678910111213$ cd mssql/data$ tree├── master.mdf├── mastlog.ldf├── modellog.ldf├── model.mdf├── msdbdata.mdf├── msdblog.ldf├── tempdb.mdf├── templog.ldf├── testdb.bak├── TestDB_log.ldf &lt;---└── TestDB.mdf &lt;---使用 select SQL 指令可以看到資料確實已還原：使用 Azure Data Studio 備份或還原資料庫如果覺得打指令很麻煩，其實 Azure Data Studio、SQL Server Management Studio (SSMS)、SQL Server Data Tools (SSDT) 或 Visual Studio Code (VS Code) 的 mssql 擴充功能 都有提供 GUI 的介面，可以直接備份或還原資料庫。下圖是 Azure Data Studio 備份或還原資料庫的畫面：詳情可參考官方的 備份與還原的資料庫 - Azure Data Studio | Microsoft Docs 文件。參考連結開始使用 Docker （Linux 上執行 SQL Server） 上的 SQL Server 容器 - SQL Server | Microsoft Docs在 Docker 上的 SQL Server 組態選項 - SQL Server | Microsoft Docs在 Docker 中的 SQL Server 資料庫還原 - SQL Server | Microsoft DocsGithub repo: Microsoft/mssql-docker","categories":[{"name":"DevOps","slug":"devops","permalink":"https://titangene.github.io/categories/devops/"}],"tags":[{"name":"Docker","slug":"docker","permalink":"https://titangene.github.io/tags/docker/"},{"name":"Container","slug":"container","permalink":"https://titangene.github.io/tags/container/"},{"name":"SQL Server","slug":"sql-server","permalink":"https://titangene.github.io/tags/sql-server/"},{"name":"Linux","slug":"linux","permalink":"https://titangene.github.io/tags/linux/"},{"name":"Database","slug":"database","permalink":"https://titangene.github.io/tags/database/"}]},{"title":"將 Hexo 的 Markdown 渲染引擎換成 markdown-it","slug":"hexo-markdown-it","date":"2019-01-29T14:51:00.000Z","updated":"2019-01-29T14:50:33.982Z","comments":true,"path":"article/hexo-markdown-it.html","link":"","permalink":"https://titangene.github.io/article/hexo-markdown-it.html","excerpt":"個人很常用 HackMD 紀錄筆記，希望 blog 也可以支援 HackMD 的 Markdown 格式，因此本篇的目標就是要將 Hexo 原本的 Markdown 渲染引擎 marked，換成 HackMD 的 Markdown 渲染引擎：markdown-it。","text":"個人很常用 HackMD 紀錄筆記，希望 blog 也可以支援 HackMD 的 Markdown 格式，因此本篇的目標就是要將 Hexo 原本的 Markdown 渲染引擎 marked，換成 HackMD 的 Markdown 渲染引擎：markdown-it。更換渲染引擎Hexo 預設的 markdown 渲染引擎是 marked，並使用 hexo-renderer-marked 此 Hexo 外掛來將 Markdown 轉換成靜態檔案 HTML，但因前面提到的需求，所以要刪除原本的渲染引擎1$ npm uninstall hexo-renderer-marked --save安裝我們要改用的 Markdown 渲染引擎：markdown-it，而使用此渲染引擎的 Hexo 外掛就是 hexo-renderer-markdown-it，所以要在 hexo 的專案中安裝此外掛：1$ npm install git+https://github.com/hexojs/hexo-renderer-markdown-it.git --save為何安裝 NPM 套件時要指定 github 的 repo 呢？因為 hexo-renderer-markdown-it 此 NPM 套件的程式沒有更新成 Github 上面的程式版本，請確定剛剛安裝套件中，node_modules\\hexo-renderer-markdown-it\\lib\\renderer.js 這個檔案內的下面這段程式碼是否相同：123456789if (opt.plugins) &#123; parser = opt.plugins.reduce(function (parser, pugs) &#123; if (pugs instanceof Object &amp;&amp; pugs.name) &#123; return parser.use(require(pugs.name), pugs.options); &#125; else &#123; return parser.use(require(pugs)); &#125; &#125;, parser);&#125;若是從 NPM 下載的套件版本 (也就是直接使用 npm install hexo-renderer-markdown-it --save 此指令)，會少幾句程式，少了可在載入 markdown-it 的外掛時為該外掛設定所需的 options：12345if (opt.plugins) &#123; parser = opt.plugins.reduce(function (parser, pugs) &#123; return parser.use(require(pugs)); &#125;, parser);&#125;安裝渲染引擎外掛套件我們可以參考 HackMD 的相依套件，只要是名為 markdown-it-xxx 的套件就是渲染引擎 markdown-it 的外掛：12345678910111213141516171819&#123; \"dependencies\": &#123; // ... \"markdown-it\": \"^8.2.2\", \"markdown-it-abbr\": \"^1.0.4\", \"markdown-it-container\": \"^2.0.0\", \"markdown-it-deflist\": \"^2.0.1\", \"markdown-it-emoji\": \"^1.3.0\", \"markdown-it-footnote\": \"^3.0.1\", \"markdown-it-imsize\": \"^2.0.1\", \"markdown-it-ins\": \"^2.0.0\", \"markdown-it-mark\": \"^2.0.0\", \"markdown-it-mathjax\": \"^2.0.0\", \"markdown-it-regexp\": \"^0.4.0\", \"markdown-it-sub\": \"^1.0.0\", \"markdown-it-sup\": \"^1.0.0\", // ... &#125;&#125;而下列是我選擇要安裝的外掛：markdown-it-abbrmarkdown-it-containermarkdown-it-deflistmarkdown-it-emojimarkdown-it-footnotemarkdown-it-imsizemarkdown-it-insmarkdown-it-markmarkdown-it-regexpmarkdown-it-submarkdown-it-supmarkdown-it-task-checkbox1$ npm i markdown-it-abbr markdown-it-checkbox markdown-it-container markdown-it-deflist markdown-it-emoji markdown-it-footnote markdown-it-imsize markdown-it-ins markdown-it-mark markdown-it-regexp markdown-it-sub markdown-it-sup --savemarkdown-it-mathjax為何我未安裝 markdown-it-mathjax 這個外掛？這是因為…我之後再單獨寫一篇文章來介紹如何在 Markdown 加上數學式 MathJax。markdown-it-task-checkbox為何我會比 HackMD 多安裝 markdown-it-task-checkbox 這個外掛？有使用過 HackMD 的朋友都知道，只要在 HackMD 輸入下列 Markdown 語法：12[ ] task 1[x] task 2就會被轉換成 HTML 的 checkbox：1234&lt;ul&gt; &lt;li class=\"task-list-item\"&gt;&lt;input type=\"checkbox\" class=\"task-list-item-checkbox \"&gt;&lt;label&gt;&lt;/label&gt;task 1&lt;/li&gt; &lt;li class=\"task-list-item\"&gt;&lt;input type=\"checkbox\" class=\"task-list-item-checkbox\" checked=\"\"&gt;&lt;label&gt;&lt;/label&gt;task 2&lt;/li&gt;&lt;/ul&gt;畫面會看到一個未被勾選以及一個已被勾選的 checkbox：不過 HackMD 不是靠著 Markdown 渲染引擎 markdown-it 的外掛來轉換成 HTML 的，而是直接利用正規表示法 (Regular Expression) 找到 [ ] 或 [x] 的文字，再將這些文字直接轉換成 HTML 的 checkbox。我擷取了 HackMD 的這段程式邏輯，若想看詳細的原始碼可至 HackMD 的原始碼內的 public/js/extra.js 檔案中的第 263 行左右：123456789if (/^\\s*\\[[x ]\\]\\s*/.test(html)) &#123; li.innerHTML = html.replace(/^\\s*\\[ \\]\\s*/, `&lt;input type=\"checkbox\" class=\"task-list-item-checkbox \"$&#123;disabled&#125;&gt;&lt;label&gt;&lt;/label&gt;`) .replace(/^\\s*\\[x\\]\\s*/, `&lt;input type=\"checkbox\" class=\"task-list-item-checkbox\" checked $&#123;disabled&#125;&gt;&lt;label&gt;&lt;/label&gt;`) if (li.tagName.toLowerCase() !== 'li') &#123; li.parentElement.setAttribute('class', 'task-list-item') &#125; else &#123; li.setAttribute('class', 'task-list-item') &#125;&#125;設定 _config.yml將下面這些設定在根目錄的 _config.yml 設定檔中：123456789101112131415161718192021222324252627282930313233343536373839# Markdown-it config# Docs: https://github.com/hexojs/hexo-renderer-markdown-it/wikimarkdown: render: html: true xhtmlOut: false breaks: true linkify: true typographer: true quotes: '“”‘’' plugins: - markdown-it-abbr - markdown-it-footnote - markdown-it-ins - markdown-it-sub - markdown-it-sup - markdown-it-deflist - markdown-it-imsize - markdown-it-mark - markdown-it-regexp - markdown-it-task-checkbox - name: markdown-it-container options: success - name: markdown-it-container options: info - name: markdown-it-container options: warning - name: markdown-it-container options: danger - markdown-it-deflist - name: markdown-it-emoji options: shortcuts: &#123;&#125; anchors: level: 1 collisionSuffix: 'v' permalink: true permalinkClass: header-anchor permalinkSymbol: ''想了解設定詳情可參考 Advanced Configuration | hexojs/hexo-renderer-markdown-it Wiki 官方文件。","categories":[{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/categories/blog/"}],"tags":[{"name":"Markdown","slug":"markdown","permalink":"https://titangene.github.io/tags/markdown/"},{"name":"Hexo","slug":"hexo","permalink":"https://titangene.github.io/tags/hexo/"},{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/tags/blog/"}]},{"title":"Flutter 載入圖片","slug":"flutter-loading-images","date":"2018-12-31T13:10:00.000Z","updated":"2019-01-29T15:52:00.015Z","comments":true,"path":"article/flutter-loading-images.html","link":"","permalink":"https://titangene.github.io/article/flutter-loading-images.html","excerpt":"要如何在 Flutter 內載入圖片？這篇做個小記錄。","text":"要如何在 Flutter 內載入圖片？這篇做個小記錄。指定資源Flutter 是在根目錄內的 pubspec.yaml 檔案來設定應用程式所需的資源，設定的資源沒有順序關係。若要指定某些資源，資源的路徑是相對於 pubspec.yaml 檔案的相對路徑：1234flutter: assets: - assets/images/avatar.jpg - assets/images/background.jpg也可以指定某個目錄，代表可以存取到這個目錄下的所有資源，但記得要在目錄的最後加上 / 這個符號：123flutter: assets: - assets/若要存取子目錄內的資源，請記得要另外為子目錄設定，例如：1234flutter: assets: - assets/ - assets/images/載入圖片可使用 Image.asset() 來載入圖片，裡面的參數就是圖片的路徑：12345Widget build(BuildContext context) &#123; // ... return Image.asset('assets/images/background.jpg'); // ...&#125;或是在 Image() 內的 image 參數使用 AssetImage()：1234567Widget build(BuildContext context) &#123; // ... return Image( image: AssetImage('assets/images/background.jpg'), ); // ...&#125;最後顯示的結果會一樣：參考連結Adding assets and images - Flutter","categories":[{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/categories/native-app/"}],"tags":[{"name":"Dart","slug":"dart","permalink":"https://titangene.github.io/tags/dart/"},{"name":"Flutter","slug":"flutter","permalink":"https://titangene.github.io/tags/flutter/"},{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/tags/native-app/"}]},{"title":"Python - 日誌 (logging) 模組","slug":"python-logging","date":"2018-12-13T10:32:46.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/python-logging.html","link":"","permalink":"https://titangene.github.io/article/python-logging.html","excerpt":"開發 Python 時，很常使用 print() 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 print()。而 Python 內建提供了 logging 模組可以用來取代 print()，logging 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 logging 模組。","text":"開發 Python 時，很常使用 print() 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 print()。而 Python 內建提供了 logging 模組可以用來取代 print()，logging 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 logging 模組。載入 logging 模組1import logginglogging 等級logging 模組預先定義了 6 種等級以及對應的 log 輸出函數 (除了 logging.NOTSET 沒有對應的輸出函數)：等級等級數值輸出函數說明NOTSET0無對應的輸出函數未設定DEBUG10logging.debug()除錯INFO20logging.info()訊息WARNING30logging.warning()警告ERROR40logging.error()錯誤CRITICAL50logging.critical()嚴重錯誤若要查詢各等級的數值，可直接呼叫該等級：12345678import loggingprint(logging.NOTSET) # 0print(logging.DEBUG) # 10print(logging.INFO) # 20print(logging.WARNING) # 30print(logging.ERROR) # 40print(logging.CRITICAL) # 50若要用等級數值來查詢是哪個等級的訊息，可使用 logging.getLevelName(level)：12345678import loggingprint(logging.getLevelName(0)) # NOTSETprint(logging.getLevelName(10)) # DEBUGprint(logging.getLevelName(20)) # INFOprint(logging.getLevelName(30)) # WARNINGprint(logging.getLevelName(40)) # ERRORprint(logging.getLevelName(50)) # CRITICAL輸出 logginglogging 模組預設等級為 WARNING，大於或等於 WARNING 等級的訊息才會被記錄：1234567import logginglogging.debug('debug message')logging.info('info message')logging.warning('warning message')logging.error('error message')logging.critical('critical message')下面是輸出結果，可以看到比 WARNING 等級還要低的訊息有 DEBUG 和 INFO 就不會被輸出：123WARNING:root:warning messageERROR:root:error messageCRITICAL:root:critical message若將等級設為 DEBUG，就會將所有等級的訊息都輸出：123456789import logginglogging.basicConfig(level=logging.DEBUG)logging.debug('debug message')logging.info('info message')logging.warning('warning message')logging.error('error message')logging.critical('critical message')下面是輸出結果，預設的訊息輸出格式是 %(levelname)s:%(name)s:%(message)s (後面會介紹如何自訂輸出格式)：12345DEBUG:root:debug messageINFO:root:info messageWARNING:root:warning messageERROR:root:error messageCRITICAL:root:critical message自訂 logging 輸出格式預設的訊息輸出格式只有 levelname、name、message，下面是其他相關的資訊：格式化字串說明%(asctime)s日期時間, 格式為 YYYY-MM-DD HH:mm:SS,ms，例如：2018-12-13 17:20:30,567%(filename)s模組檔名%(funcName)s函數名稱%(levelname)s日誌的等級名稱%(levelno)s日誌的等級數值%(lineno)d呼叫日誌函數所在的行數%(message)s訊息%(module)s模組名稱%(name)slogger 的名稱%(pathname)s檔案的完整路徑 (如果可用)%(process)dprocess ID (如果可用)%(thread)d執行緒 ID (如果可用)%(threradName)s執行緒名稱可將這些資訊加入 logging.basicConfig() 內的 format 參數：12345678FORMAT = '%(asctime)s %(levelname)s: %(message)s'logging.basicConfig(level=logging.DEBUG, format=FORMAT)logging.debug('debug message')logging.info('info message')logging.warning('warning message')logging.error('error message')logging.critical('critical message')下面是自訂訊息的輸出結果：123452018-12-13 17:40:34,604 DEBUG: debug message2018-12-13 17:40:34,604 INFO: info message2018-12-13 17:40:34,604 WARNING: warning message2018-12-13 17:40:34,604 ERROR: error message2018-12-13 17:40:34,608 CRITICAL: critical message儲存 logging只要在 logging.basicConfig() 內的 filename 參數設定要儲存的日誌檔名，就可以將 logging 儲存：12345678FORMAT = '%(asctime)s %(levelname)s: %(message)s'logging.basicConfig(level=logging.DEBUG, filename='myLog.log', filemode='w', format=FORMAT)logging.debug('debug message')logging.info('info message')logging.warning('warning message')logging.error('error message')logging.critical('critical message')預設 filemode 參數是設為 a，代表 append (附加) 的意思，每次執行程式時，Logging 會將新的訊息加在舊的訊息後面，不會覆蓋舊的訊息。若要改成新訊息覆蓋就訊息，那可以將 filemode 參數設為 w，代表 write 的意思。下面是剛剛執行後儲存的 myLog.log 日誌檔：123452018-12-13 17:47:18,686 DEBUG: debug message2018-12-13 17:47:18,687 INFO: info message2018-12-13 17:47:18,687 WARNING: warning message2018-12-13 17:47:18,687 ERROR: error message2018-12-13 17:47:18,687 CRITICAL: critical message詳情可參考官方文件 Logging facility for Python — Python documentation。","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Logging","slug":"logging","permalink":"https://titangene.github.io/tags/logging/"}]},{"title":"設定 Windows 工作排程定期執行 Python 爬蟲程式","slug":"set-up-windows-task-scheduler-to-periodically-execute-python-crawler","date":"2018-12-01T04:55:00.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html","link":"","permalink":"https://titangene.github.io/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html","excerpt":"如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。","text":"如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。最近有些資料想透過爬蟲來擷取，而且希望可以定期 (例如：每 10 分鐘一次) 自動執行爬蟲程式，因此就有了這篇筆記。下面介紹如何以 Windows 工作排程器來定期執行爬蟲程式。目標每 10 分鐘自動執行 Python 爬蟲程式，將爬蟲抓到的最新降雨量資料存入 CSV 檔內收集。準備WindowsPython 環境：建議安裝 Anaconda，可參考 用 Conda 建立虛擬環境和管理相依套件Python 套件 (這是本篇爬蟲範例所需的相依套件，可依各自需求來選擇)PandasNumpyRequestsPython 爬蟲程式原始碼source code: titangene/cwb-opendata-crawler-demo/crawler.py簡單說明一下程式的執行步驟：利用 Python 的 Requests 套件來建立 HTTP 的 GET 請求，從中央氣象局提供的開放資料 API 中取得資料，回傳的格式是 JSON解析 API 回傳的 JSON 資料，並將 JSON 轉成 Pandas 的 DataFrame 型別的資料格式將 DataFrame 儲存成 CSV 檔保存資料若想了解中央氣象局開放資料的相關內容，詳情可參考 中央氣象局開放資料 - 開發指南。Python 爬蟲程式的批次檔建立一個副檔名為 .bat 的批次檔，批次檔是用來執行 Python 爬蟲程式，因此就能讓 Windows 工作排程器在定期時間自動執行批次檔，以達成自動化執行爬蟲的目的。下面就來說明批次檔每行都做了甚麼：第一行：切到指定目錄第二行：指定 Python 虛擬環境 (可參考 用 Conda 建立虛擬環境和管理相依套件。如果要在全域環境下執行就不需要這行)第三行：執行 Python 爬蟲程式第四行：若想查看 Python 爬蟲程式執行過程中所輸出 (也就是執行 print 方法的部分) 內容，就需要取消這行的註解REM：單行註解pause：用來暫停批次檔的執行1234cd /d D:/Project/Python/cwb-opendata-crawlercall activate devcall python crawler.pyREM pausesource code: titangene/cwb-opendata-crawler-demo/crawler.batWindows 工作排程器 簡介可預先設定工作在特定時間或指定時間時，會自動執行程式或批次檔以達成工作自動化。下圖為 Windows 10 的工作排程器介面：建立工作，設定定期執行爬蟲程式開啟 Windows 的「工作排程器」，點擊右上角的「建立工作」自訂工作名稱，若有權限需求可勾選「以最高權限執行」選項接著新增「觸發程序」設定工作的開始時間，並選擇「僅一次」，以及設定工作要每隔多久就執行一次，並且要持續多久時間然後新增「動作」設定要自動執行的程式，這邊選擇的就是剛剛提到的 批次檔 (原始碼)如果設定好了就可以按確定完成建立工作，此時就會看到在「工作排程器程式庫」內的工作清單中，多了剛剛新增的工作成果可以看到爬蟲程式會在定期自動執行，執行的時候會跳出一個 cmd 視窗。若剛剛提到的 批次檔 內沒有將 REM pause 這行註解，就會看到爬蟲程式執行完成後，不會自動關閉 cmd 視窗，這是為了可以立即看到該次爬蟲執行過程中輸出的訊息。下圖就是自動執行爬蟲所抓到的資料：完整 source code：titangene/cwb-opendata-crawler-demo","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Python Requests","slug":"python-requests","permalink":"https://titangene.github.io/tags/python-requests/"},{"name":"Crawler","slug":"crawler","permalink":"https://titangene.github.io/tags/crawler/"},{"name":"Windows","slug":"windows","permalink":"https://titangene.github.io/tags/windows/"},{"name":"Windows 工作排程","slug":"windows-工作排程","permalink":"https://titangene.github.io/tags/windows-工作排程/"}]},{"title":"用 Conda 建立虛擬環境和管理相依套件","slug":"create-a-virtual-environment-and-manage-dependencies-with-conda","date":"2018-11-19T09:10:00.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/create-a-virtual-environment-and-manage-dependencies-with-conda.html","link":"","permalink":"https://titangene.github.io/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html","excerpt":"學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。","text":"學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。AnacondaAnaconda 是最受歡迎的 Python 資料科學 (Data Science) 平台，它特點就是本來就包含了各種數據分析、科學計算的相關套件 (例如：NumPy、SciPy、Matplotlib、SymPy、Pandas … 等)，而 Anaconda 的套件管理工具就是 conda。CondaConda 是一個開源的套件與環境管理的系統，可以在 Windows、macOS 和 Linux 上使用。可利用 Conda 來安裝、執行、更新套件以及其相依的套件，並且還可用來建立不同的開發環境 (例如：不同環境有不同的 Python 版本)。安裝 Anaconda至 Anaconda 官網下載並安裝，建議選擇 Python 3.x 的版本。建立虛擬環境從指定套件列表中建立新的 conda 環境：-n，--name：設定環境名稱1234567$ conda create -n &lt;environment&gt; &lt;package&gt;# 安裝整套 Anaconda$ conda create -n &lt;environment&gt; anaconda# 指定 Python 版本$ conda create -n &lt;environment&gt; python=3.6-e，--envs：列出已建立的環境123456# 顯示虛擬環境列表，並顯示正在使用的虛擬環境$ conda info -e# conda environments:#base * D:\\Users\\Titan\\Anaconda3hello D:\\Users\\Titan\\Anaconda3\\envs\\hello使用或 activate 至指定環境：12345# Windows$ activate &lt;environment&gt;# Linux and macOS$ source activate &lt;environment&gt;123456# 顯示虛擬環境列表，並顯示正在使用的虛擬環境$ conda info -e# conda environments:#base D:\\Users\\Titan\\Anaconda3hello * D:\\Users\\Titan\\Anaconda3\\envs\\hello* 代表目前正在使用的虛擬環境離開虛擬環境如果要將現在環境改回預設值 base (離開目前環境) 可使用下面指令：12345# Windows$ deactivate# Linux and macOS$ source deactivate利用 conda 安裝套件1234$ conda install &lt;package&gt;# 安裝多個套件$ conda install &lt;package-1&gt; &lt;package-2&gt;查看資訊查看 conda 目前版本12$ conda -Vconda 4.5.11查看目前環境已安裝的套件123456789101112$ conda list# packages in environment at D:\\Users\\Titan\\Anaconda3:## Name Version Build Channel...jupyter 1.0.0 py35_3jupyter_client 5.2.3 py35_0jupyter_console 4.1.1 py35_0jupyter_core 4.4.0 py35h629ba7f_0jupyterlab 0.32.1 &lt;pip&gt;jupyterlab-launcher 0.10.5 &lt;pip&gt;...查看 conda 是否有某套件：12345678$ conda search &lt;package&gt;$ conda search pandasLoading channels: done# Name Version Build Channelpandas 0.9.0 np16py27_0 pkgs/freepandas 0.9.1 np16py27_0 pkgs/free...如果 conda 沒有該套件，可以使用 pip 來安裝套件：12345# 安裝套件$ pip install &lt;package&gt;# 更新套件$ pip install --upgrade &lt;package&gt;刪除套件12345678# 刪除環境內的套件$ conda remove -n &lt;environment&gt; &lt;package&gt;# 刪除目前環境內的套件$ conda remove &lt;package&gt;# 刪除多個套件$ conda remove &lt;package-1&gt; &lt;package-2&gt;更新套件1234567891011# 更新 conda$ conda update conda# 更新 Anaconda$ conda update anaconda# 更新 Python$ conda update python# 更新特定套件$ conda update &lt;package&gt;刪除虛擬環境1$ conda env remove -n &lt;environment&gt;更新 Python更新全域環境12$ conda update python$ conda update anaconda如果要更新 Python 的特定版本：1$ conda install python==$pythonversion$建立新環境 (最佳方案)1$ conda create --name py36 python=3.6取得 Python 的最新版本1$ conda create --name py365 python=3.6.5 --channel conda-forge注意：Conda 會更新該版本列表中的最高版本，因此 Python 2.7 更新到 2.x 中的最高版本，而 3.x 系列依此類推。參考連結Managing packages | Conda documentationmacos - How do I upgrade to Python 3.6 with conda? - Stack Overflow","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Anaconda","slug":"anaconda","permalink":"https://titangene.github.io/tags/anaconda/"},{"name":"Conda","slug":"conda","permalink":"https://titangene.github.io/tags/conda/"},{"name":"Virtual Environment","slug":"virtual-environment","permalink":"https://titangene.github.io/tags/virtual-environment/"},{"name":"Package Management","slug":"package-management","permalink":"https://titangene.github.io/tags/package-management/"}]},{"title":"Windows Subsystem for Linux (WSL)","slug":"windows-subsystem-for-linux","date":"2018-11-17T11:00:45.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/windows-subsystem-for-linux.html","link":"","permalink":"https://titangene.github.io/article/windows-subsystem-for-linux.html","excerpt":"Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。","text":"Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。啟用 Windows Subsystem for Linux使用系統管理者權限開啟 PowerShell，並執行下面命令啟用 Windows Subsystem for Linux 功能：1$ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux如果顯示下面訊息就代表你沒有使用系統管理員開啟 PowerShell：123456Enable-WindowsOptionalFeature : 要求的作業需要提升的權限。位於 線路:1 字元:1+ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows- ...+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [Enable-WindowsOptionalFeature], COMException + FullyQualifiedErrorId : Microsoft.Dism.Commands.EnableWindowsOptionalFeatureCommand接著等他跑一下…：接著他會問是否要重啟電腦，因為預設是 Yes，所以可以直接按 Enter：其實上面指令就等於去「控制台 &gt; 程式集 &gt; 開啟或關閉 Windows 功能」開啟「適用於 Linux 的 Windows 子系統」。安裝 Linux 發行版系統組建 (build) 必須要 Windows build 16215 或更新版本。若要想知道系統組建，可至 Windows 的「設定」內的「關於」即可查看。你可以選擇你想安裝的 Linux 發行版：Ubuntu 16.04 LTSUbuntu 18.04 LTSDebian GNU/LinuxOpenSUSE Leap 42SUSE Linux Enterprise Server 12Kali Linux如果在安裝後直接開啟 Ubuntu，就會顯示 Error: 0x8007007e 錯誤就代表你沒有啟用 Windows Subsystem for Linux 功能，詳情請參考上面：1234The WSL optional component is not enabled. Please enable it and try again.See https://aka.ms/wslinstall for details.Error: 0x8007007ePress any key to continue...安裝後啟動 Linux 發行版，此時會開啟一個 console 視窗。因為是第一次開啟，所以會先安裝 WSL，等它安裝完後，就會看到下面畫面，系統要你建立一個新的 Unix 使用者名稱：12345Installing, this may take a few minutes...Installation successful!Please create a default UNIX user account. The username does not need to match your Windows username.For more information visit: https://aka.ms/wslusersEnter new UNIX username:接著是設定此使用者的密碼，這邊的使用者與你的 Windows 使用者名稱和密碼沒有任何關係。詳情可參考官方的 Linux User Account and Permissions | Microsoft Docs 文件。如果顯示 $ 就代表設定完成囉！執行 lsb_release -a 指令就會看到 Linux 的系統版本：在其他終端使用 Bash如果在使用 CMD 、 PowerShell 或其他終端 (例如我常用的 Cmder) 時想用 bash shell，可使用 bash 指令就可以啟動新的 Ubuntu shell：1$ bash存取目錄如果想存取 D:\\project，在此環境下的路徑就是 /mnt/d/project。小結如果有在跨平台開發或維運的朋友，這個功能應該是一直以來的願望吧？讓你在 Windows 上可以直接處理事情，不用再多開 VM 來使用，不只省資源，也省硬碟空間，重點是不用等 VM 開機…參考連結Install the Linux Subsystem on Windows 10 | Microsoft Docs【WSL】Windows Subsystem for Linux 安裝及基本配置！ | 台灣微軟學生大使Bash on Ubuntu on Windows 的簡單使用 | Heresy’s Space","categories":[{"name":"Windows","slug":"windows","permalink":"https://titangene.github.io/categories/windows/"},{"name":"Linux","slug":"windows/linux","permalink":"https://titangene.github.io/categories/windows/linux/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"https://titangene.github.io/tags/linux/"},{"name":"Ubuntu","slug":"ubuntu","permalink":"https://titangene.github.io/tags/ubuntu/"},{"name":"Windows 10","slug":"windows-10","permalink":"https://titangene.github.io/tags/windows-10/"},{"name":"WSL","slug":"wsl","permalink":"https://titangene.github.io/tags/wsl/"}]},{"title":"GitHub 縮網址服務 Git.io","slug":"github-url-shortener","date":"2018-10-31T16:58:19.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/github-url-shortener.html","link":"","permalink":"https://titangene.github.io/article/github-url-shortener.html","excerpt":"最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「Git.io」，它只適用於 gist.github.com 及 github.com 兩個 hostname。","text":"最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「Git.io」，它只適用於 gist.github.com 及 github.com 兩個 hostname。下列網址都可以透過 Git.io 來建立縮網址：Github 個人或組織專業 ( https://github.com/&lt;github-id&gt; )Github repository ( https://github.com/&lt;github-id&gt;/&lt;repo-name&gt; ) 或 repository 內目錄或檔案Gist ( https://gist.github.com/&lt;github-id&gt;/&lt;gist-id&gt; )Git.io 有兩種建立短網址的方法，下面會分別介紹：直接到 Git.io 線上設定使用 curl 指令設定：Git.io: GitHub URL Shortener | GitHub BlogGit.io 線上設定最簡單的方法當然是直接打開 Git.io，接著輸入網址並點擊「shorten」按鈕就會將你剛剛輸入的網址變成短網址，短網址的格式是 git.io/xxx。但缺點是無法自訂短網址名稱，預設是自動隨機英文 + 數字的字串。使用 curl 指令建立短網址-i、--include：顯示 HTTP response headers-F、--form &lt;name=content&gt;：設定表單資料，Content-Type 會被設為 multipart/form-data1$ curl -i https://git.io -F \"url=&lt;想縮短的網址&gt;\" -F \"code=&lt;自訂短網址名稱&gt;\"例如我想將自己的 Github profile URL：github.com/titangene 縮短成 git.io/titan，就要執行下面指令：1234567$ curl -i https://git.io -F \"url=https://github.com/titangene\" -F \"code=titan\"HTTP/1.1 201 Created...Location: https://git.io/titan...$ curl -i https://git.io -F \"url=https://titangene.github.io/\" -F \"code=titan-blog\"只要輸入下面指令就可以確認是否建立成功12345$ curl -i https://git.io/titanHTTP/1.1 302 Found...Location: https://github.com/titangene...[小插曲] 縮網址不小心設定錯誤一開始在 Git.io 測試時，直接用自己的 Github profile URL ( github.com/titangene ) 來產生預設隨機英文 + 數字的短網址，想要修改成 git.io/titan 卻沒辦法！這是因為 Git.io 沒有直接提供修改短網址的功能。後來 Google 一下才發現只能聯繫 Github 客服來幫忙刪除短網址，然後再自行重新設定。過了不到半天客服就回信幫我解決了！真是太感謝 Github 客服了！","categories":[{"name":"Other","slug":"other","permalink":"https://titangene.github.io/categories/other/"}],"tags":[{"name":"Github","slug":"github","permalink":"https://titangene.github.io/tags/github/"},{"name":"URL","slug":"url","permalink":"https://titangene.github.io/tags/url/"},{"name":"URL Shortener","slug":"url-shortener","permalink":"https://titangene.github.io/tags/url-shortener/"}]},{"title":"Flutter 自訂字型","slug":"flutter-custom-fonts","date":"2018-10-29T03:40:00.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/flutter-custom-fonts.html","link":"","permalink":"https://titangene.github.io/article/flutter-custom-fonts.html","excerpt":"雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。","text":"雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。將字型檔放入專案資料夾內此範例是放在 ./assets/fonts 資料夾內：1234567assets/ fonts/ FiraCode-Medium.ttf mononoki-Bold.ttf mononoki-BoldItalic.ttf mononoki-Italic.ttf mononoki-Regular.ttf在 pubspec.yaml 定義字型資訊123456789101112131415flutter: fonts: - family: FiraCode fonts: - asset: assets/fonts/FiraCode-Medium.ttf - family: Mononoki fonts: - asset: assets/fonts/mononoki-Regular.ttf - asset: assets/fonts/mononoki-Bold.ttf weight: 700 - asset: assets/fonts/mononoki-Italic.ttf style: italic - asset: assets/fonts/mononoki-BoldItalic.ttf weight: 700 style: italic設定預設字型12345MaterialApp( title: 'Custom Fonts', theme: ThemeData(fontFamily: 'FiraCode'), home: MyHomePage(title: 'Custom Fonts'),);在特定 Widget 設定字型123456789Text( 'Custom Fonts', style: TextStyle( fontFamily: 'Mononoki', fontSize: 30.0, fontWeight: FontWeight.w700, fontStyle: FontStyle.italic, ),)完整範例程式碼123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172import 'package:flutter/material.dart';void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; return new MaterialApp( title: 'Custom Fonts', theme: new ThemeData( primarySwatch: Colors.blue, fontFamily: 'FiraCode', ), home: new MyHomePage(title: 'Custom Fonts'), ); &#125;&#125;class MyHomePage extends StatelessWidget &#123; MyHomePage(&#123;Key key, this.title&#125;) : super(key: key); final String title; @override Widget build(BuildContext context) &#123; return new Scaffold( appBar: new AppBar( title: new Text(this.title), ), body: Column( children: &lt;Widget&gt;[ new Text( '&lt;-- Custom Fonts -&gt;&gt;', style: TextStyle(fontSize: 30.0), ), new Text( 'Custom Fonts', style: TextStyle( fontFamily: 'Mononoki', fontSize: 30.0, ), ), new Text( 'Custom Fonts', style: TextStyle( fontFamily: 'Mononoki', fontSize: 30.0, fontWeight: FontWeight.w700, ), ), new Text( 'Custom Fonts', style: TextStyle( fontFamily: 'Mononoki', fontSize: 30.0, fontStyle: FontStyle.italic, ), ), new Text( 'Custom Fonts', style: TextStyle( fontFamily: 'Mononoki', fontSize: 30.0, fontWeight: FontWeight.w700, fontStyle: FontStyle.italic, ), ), ], ), ); &#125;&#125;詳情可參考 Using custom fonts - Flutter 官方文件","categories":[{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/categories/native-app/"}],"tags":[{"name":"Dart","slug":"dart","permalink":"https://titangene.github.io/tags/dart/"},{"name":"Flutter","slug":"flutter","permalink":"https://titangene.github.io/tags/flutter/"},{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/tags/native-app/"},{"name":"Font","slug":"font","permalink":"https://titangene.github.io/tags/font/"}]},{"title":"Flutter 環境建置 (Windows)","slug":"flutter-install-on-windows","date":"2018-10-22T22:58:44.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/flutter-install-on-windows.html","link":"","permalink":"https://titangene.github.io/article/flutter-install-on-windows.html","excerpt":"最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。","text":"最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。詳情可參考官方連結：Get Started: Install on Windows | Flutter系統要求OS：Windows 7 SP1 或以上 (64-bit)硬碟空間：400 MB (不包括 IDE 和工具的空間)工具PowerShell 5.0 或更新版Git for Windows (勾選 Use Git from the Windows Command Prompt 選項，若沒打勾可自行將 Git 安裝目錄內的 bin 資料夾設定為 Path 環境變數，預設目錄為 C:\\Program Files\\Git\\bin )安裝 Flutter SDK下載 Flutter SDK，可下載歷史版本，但建議安裝新版。解壓檔內有一個 flutter 資瞭夾，將此資料夾放在 Flutter SDK 所需的安裝目錄 (e.g D:\\dev\\flutter，請勿將 flutter 資瞭夾放在需要提高權限之類的目錄內，e.g. C:\\Program Files\\ )。將 flutter\\bin 的完整目錄 (e.g. D:\\dev\\flutter\\bin ) 加入 Path 環境變數 (各完整路徑記得用 ; 分號分隔)接著就可以在 Console 內執行 Flutter commands執行 flutter --version 指令確定已成功安裝 Flutter SDK12345$ flutter --versionFlutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (12 days ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282之後請定期執行 flutter upgrade 指令更新 Flutter (因為目前還在 beta，大約幾週就會有新版)執行 flutter --version 指令後，若看到下面畫面就代表現在有新版可以更新：123456789101112$ flutter --version ╔════════════════════════════════════════════════════════════════════════════╗ ║ A new version of Flutter is available! ║ ║ ║ ║ To update to the latest version, run \"flutter upgrade\". ║ ╚════════════════════════════════════════════════════════════════════════════╝Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282執行 flutter upgrade 指令更新 Flutter：123456789101112131415161718$ flutter upgradeUpgrading Flutter from D:\\dev\\flutter......Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282Running flutter doctor...Doctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.8.2, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] VS Code (version 1.27.2)[!] Connected devices ! No devices available! Doctor found issues in 1 category.在執行一次 flutter --version 確認已更新至新的版本：12345$ flutter --versionFlutter 0.8.2 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 5ab9e70727 (13 days ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.3.1.flutter-760a9690c2flutter doctor下面指令是用來查看是否需要安裝任何依賴才能完成設定，因此他會檢查你的環境並顯示檢查報告：1$ flutter doctorDart SDK is bundled with Flutter，不用另外安裝 Dart。從檢查報告的輸出中可以了解需要安裝的其他軟體或執行的其他任務 (以粗體顯示)。例如：123456789101112$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.228], locale zh-TW)[!] Android toolchain - develop for Android devices (Android SDK 28.0.2) X Android license status unknown.[√] Android Studio (version 3.1) X Flutter plugin not installed; this adds Flutter specific functionality. X Dart plugin not installed; this adds Dart specific functionality.[!] Connected devices ! No devices available! Doctor found issues in 2 categories.下面會介紹如何執行這些任務並完成設定過程。可再次執行 flutter doctor 指令來驗證是否已正確設定所有內容。如果已驗證設定所有內容，就會看到下面輸出結果：12345678$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] Connected devices (1 available)• No issues found!加上參數 -v，可以看更詳細的驗證說明：1234567891011121314151617181920212223242526$ flutter doctor -v[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW) • Flutter version 0.7.3 at D:\\dev\\flutter • Framework revision 3b309bda07 (3 weeks ago), 2018-08-28 12:39:24 -0700 • Engine revision af42b6dc95 • Dart version 2.1.0-dev.1.0.flutter-ccb16f7282[√] Android toolchain - develop for Android devices (Android SDK 28.0.2) • Android SDK at C:\\Users\\Titan\\AppData\\Local\\Android\\sdk • Android NDK location not configured (optional; useful for native profiling support) • Platform android-28, build-tools 28.0.2 • ANDROID_HOME = C:\\Users\\Titan\\AppData\\Local\\Android\\sdk • Java binary at: C:\\Program Files\\Android\\Android Studio\\jre\\bin\\java • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02) • All Android licenses accepted.[√] Android Studio (version 3.1) • Android Studio at C:\\Program Files\\Android\\Android Studio • Flutter plugin version 28.0.1 • Dart plugin version 173.4700 • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)[√] Connected devices (1 available) • SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)• No issues found!Android 設定Flutter 依賴於 Android Studio 以提供 Android 平台的依賴性。但也可以使用其他編輯器來寫 Flutter App。安裝 Java JDK安裝 JDK將 Java JDK 安裝目錄設定為 JAVA_HOME 環境變數 (e.g. C:\\Program Files\\Java\\jdk1.8.0_151 )，並在將 Java JDK 安裝目錄內的 bin 資料夾設定為 Path 環境變數 (e.g. C:\\Program Files\\Java\\jdk1.8.0_151\\bin，也可設定為 %JAVA_HOME%\\bin )安裝 Android Studio安裝 Android Studio，請安裝 Recommended (建議) 版執行 Android Studio，並瀏覽 Android Studio Setup Wizard，安裝最新的 Android SDK、Android SDK Platform-Tools、Android SDK Build-Tools，這些都是 Flutter 在開發 Android 時所必須的。將 Android SDK 目錄設定為 ANDROID_HOME 環境變數 (預設目錄為 C:\\Users\\Titan\\AppData\\Local\\Android\\sdk )定期更新 Android SDK (於 Android Studio &gt; Configure &gt; SDK Manager 安裝)設定你的 Android 裝置想在 Android 裝置上執行和測試 Flutter App，需要 Android 4.1 (API level 16) 或更高版本的 Android 設備。裝置請開啟 開發者模式 內的 USB 偵錯，詳情可參考 Configure on-device developer options | Android Developers 此 Android 官方文件安裝 Google USB Driver (限 Windows)使用 USB 線將裝置連接至電腦，如果你的裝置有出現提示，請授權你的電腦可訪問你的裝置開啟終端機，執行 flutter devices 指令以驗證 Flutter 是否成功連結 Android 裝置12345# 像我連接到 Note 8$ flutter devices1 connected device:SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)Flutter 預設會以 adb 工具基於的 Android SDK 版本來使用，若想用其他版本的 Android SDK，可設定你所需的 Android SDK 目錄為 ANDROID_HOME 環境變數。如果執行 flutter run指令，而且成功將 App 安置手機並執行，就會看到 App 的畫面設定 Android 模擬器 (emulator)想在 Android 模擬器上執行和測試 Flutter App，請依照下面步驟：在主機上啟用 VM acceleration啟動 Android Studio &gt; Tools &gt; AVD Manager 並點選 Create Virtual Device選擇設備定義，然後點擇 Next選擇你所需的 Android 版本的 OS image，然後點選 Next (建議選擇 x86 或 x86_64 image)在 Emulated Performance 欄位請選擇 Hardware - GLES 2.0 以啟用 hardware acceleration驗證 AVD 設定是否正確，若確定請點選 Finish在 Android Virtual Device Manager 中，選擇某台模擬器並點擊 Run有關上述步驟的詳情可參考 Managing AVDs設定編輯器設定 Android Studio安裝 Flutter 和 Dart plugins (外掛)，有兩個 plugin 支援 Flutter：Flutter 外掛：支持 Flutter 開發人員工作流程 (running, debugging, hot reload … 等)Dart 外掛：提供程式碼分析 (輸入時的程式碼驗證、程式碼自動補全)安裝步驟：執行 Android Studio開啟外掛選項 (File &gt; Settings &gt; Plugins)點選 Browse repositories…，接著搜尋 Flutter 並選擇並安裝名為 Flutter 的 plugin (請注意，安裝 Flutter 外掛時會同時安裝 Dart 語言外掛)點擊 Restart Android Studio設定 VS Code安裝 Flutter plugin：安裝 Flutter 此擴充功能，並重啟 VS Code。使用 Flutter Doctor 驗證你的設定環境：按 F1 或 ctrl + shift + p 後，輸入 Flutter 並點選 Flutter: Run Flutter Doctor 即可至 OUTPUT (輸出) 查看驗證結果。入門Android Studio建立新 app在 Android Studio 中建立 Flutter 專案 ( File &gt; New &gt; New Flutter Project… )接著選擇 Flutter Application，並點選 Next請設定專案名稱、確定 Flutter SDK 目錄、設定專案儲存位置與填寫專案的簡單描述後，點選 Next最後輸入公司網域 (e.g. example.com) 後，點選 Finish 即可建立新的 Flutter 專案執行 app下圖為 Android Studio 的工具列：圖片來源：Get Started: Test Drive | Flutter在 target selector 中，選擇已執行的 Android 裝置，若當前未啟動或未連接任何 Android 裝置，選擇某一模擬器時，Android Studio 就會開啟該選擇的模擬器。如果沒有可用的裝置，可至前面介紹的 設定 Android 模擬器 段落來新建模擬器。點擊 Run 圖示執行 app稍後就會在模擬器或裝置上看到下圖的 app 畫面等待的過程中會初始化 gradlegradle 會 resolve dependencies將專案轉成 apk將 apk 安裝並執行於裝置上1234567891011121314151617181920Launching lib\\main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle...Resolving dependencies...Running 'gradlew assembleDebug'...Built build\\app\\outputs\\apk\\debug\\app-debug.apk.Installing build\\app\\outputs\\apk\\app.apk...D/OpenGLRenderer( 4777): HWUI GL PipelineI/OpenGLRenderer( 4777): Initialized EGL, version 1.4D/OpenGLRenderer( 4777): Swap behavior 1D/ ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e5b00, tid 4831W/OpenGLRenderer( 4777): Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...D/OpenGLRenderer( 4777): Swap behavior 0D/EGL_emulation( 4777): eglCreateContext: 0x7073cf2a7600: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/EGL_emulation( 4777): eglCreateContext: 0x7073cf3b10a0: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c2fe87c0)Syncing files to device Android SDK built for x86 64...D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/ ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e65e0, tid 4813D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c560d6c0)嘗試 hot reload修改一些內容並儲存，app 就會自動做 hot reload，就會很快地看到最新的更新。VS Code建立新 app按 F1 或 ctrl + shift + p 後，輸入 Flutter 並點選 Flutter: New Project輸入專案名稱後，按 enter 鍵選擇專案目錄的儲存位置等待專案建立完成，並在畫面顯示 lib/main.dart 檔案執行 app從 VS Code 底部的藍色狀態欄中點選 Device Selector若要使用實體裝置，詳情至 設定你的 Android 裝置 參考。若連結成功會在 VS Code 底部的藍色狀態欄中看到你的裝置名稱如果沒有可用的裝置，請點選 No Devices 並啟動模擬器執行 Debug等待 App 執行，可在偵錯主控台 (Debug Console) 看到執行進度，稍後就會在模擬器或裝置上看到下圖的 app 畫面Terminal + editor建立新 app使用 flutter create 指令來建立 Flutter 專案，裡面包含 Material Components 的範例 app。app 的程式碼在 lib/main.dart。12$ flutter create &lt;prject-name&gt;$ cd &lt;prject-name&gt;執行 app使用 flutter devices 指令可檢查是否有正在執行的模擬器或裝置。如果沒有可用的裝置，可至前面介紹的 設定 Android 模擬器 段落來新建模擬器。1234$ flutter devices1 connected device:Android SDK built for x86 64 • emulator-5554 • android-x64 • Android 8.0.0 (API 26) (emulator)使用 flutter run 指令可執行 app，並提供以下功能的快速鍵：r：hot reloadR：hot restart (and rebuild state)h：顯示更多幫助訊息q：停止執行123456789101112131415$ flutter runUsing hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with \"--enable-software-rendering\".Launching lib/main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle... 1.7sResolving dependencies... 48.1sRunning 'gradlew assembleDebug'... 88.5sBuilt build\\app\\outputs\\apk\\debug\\app-debug.apk.Installing build\\app\\outputs\\apk\\app.apk... 11.4sSyncing files to device Android SDK built for x86 64...D/ ( 5458): HostConnection::get() New Host Connection established 0x7073c31aabe0, tid 5513D/EGL_emulation( 5458): eglMakeCurrent: 0x7073cf3b1280: ver 2 0 (tinfo 0x7073c2ab65c0) 12.3s🔥 To hot reload changes while running, press \"r\". To hot restart (and rebuild state), press \"R\".An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:2158/For a more detailed help message, press \"h\". To quit, press \"q\".","categories":[{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/categories/native-app/"}],"tags":[{"name":"Dart","slug":"dart","permalink":"https://titangene.github.io/tags/dart/"},{"name":"Flutter","slug":"flutter","permalink":"https://titangene.github.io/tags/flutter/"},{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/tags/native-app/"}]},{"title":"Hexo 加入 Disqus 討論區","slug":"hexo-disqus","date":"2018-10-22T14:40:00.000Z","updated":"2018-12-31T15:36:56.000Z","comments":true,"path":"article/hexo-disqus.html","link":"","permalink":"https://titangene.github.io/article/hexo-disqus.html","excerpt":"接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。","text":"接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。建立 Disqus至 Disqus 首頁註冊帳號後並登入，接著點擊首頁的「GET STARTED」選擇「I want to install Disqus on my site」選項Websit Name：自訂 short name，且是唯一，像我是設定 titangene-blog。short name 會在設定 Hexo 時需要Category：類別，自行選擇Language：語言，自行選擇填寫後點擊「Create Site」設定 Hexo在根目錄內的 _config.yml 內設定：1disqus_shortname: your_disqus_short_name設定後就可以看到每篇文章下面都可以留言囉！","categories":[{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/categories/blog/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"https://titangene.github.io/tags/hexo/"},{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/tags/blog/"}]}]}