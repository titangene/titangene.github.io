{"meta":{"title":"Titangene Blog","subtitle":null,"description":"利用 blog 紀錄學習歷程","author":"Titangene","url":"https://titangene.github.io"},"pages":[{"title":"Categories","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:20:46.635Z","comments":false,"path":"categories/index.html","permalink":"https://titangene.github.io/categories/index.html","excerpt":"","text":""},{"title":"404 Not Found","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:21:46.626Z","comments":false,"path":"error/index.html","permalink":"https://titangene.github.io/error/index.html","excerpt":"","text":"This page does not exist, click here to go back to home page.頁面不存在，點此回到首頁。"},{"title":"Tags","date":"2018-10-22T14:40:00.000Z","updated":"2018-10-22T18:22:54.477Z","comments":false,"path":"tags/index.html","permalink":"https://titangene.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Python - 日誌 (logging) 模組","slug":"python-logging","date":"2018-12-13T10:32:46.000Z","updated":"2018-12-13T11:12:18.383Z","comments":true,"path":"article/python-logging.html","link":"","permalink":"https://titangene.github.io/article/python-logging.html","excerpt":"開發 Python 時，很常使用 print() 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 print()。而 Python 內建提供了 logging 模組可以用來取代 print()，logging 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 logging 模組。","text":"開發 Python 時，很常使用 print() 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 print()。而 Python 內建提供了 logging 模組可以用來取代 print()，logging 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 logging 模組。載入 logging 模組import logging logging 等級logging 模組預先定義了 6 種等級以及對應的 log 輸出函數 (除了 logging.NOTSET 沒有對應的輸出函數)：等級等級數值輸出函數說明NOTSET0無對應的輸出函數未設定DEBUG10logging.debug()除錯INFO20logging.info()訊息WARNING30logging.warning()警告ERROR40logging.error()錯誤CRITICAL50logging.critical()嚴重錯誤若要查詢各等級的數值，可直接呼叫該等級：import logging print(logging.NOTSET) # 0 print(logging.DEBUG) # 10 print(logging.INFO) # 20 print(logging.WARNING) # 30 print(logging.ERROR) # 40 print(logging.CRITICAL) # 50 若要用等級數值來查詢是哪個等級的訊息，可使用 logging.getLevelName(level)：import logging print(logging.getLevelName(0)) # NOTSET print(logging.getLevelName(10)) # DEBUG print(logging.getLevelName(20)) # INFO print(logging.getLevelName(30)) # WARNING print(logging.getLevelName(40)) # ERROR print(logging.getLevelName(50)) # CRITICAL 輸出 logginglogging 模組預設等級為 WARNING，大於或等於 WARNING 等級的訊息才會被記錄：import logging logging.debug(&#39;debug message&#39;) logging.info(&#39;info message&#39;) logging.warning(&#39;warning message&#39;) logging.error(&#39;error message&#39;) logging.critical(&#39;critical message&#39;) 下面是輸出結果，可以看到比 WARNING 等級還要低的訊息有 DEBUG 和 INFO 就不會被輸出：WARNING:root:warning message ERROR:root:error message CRITICAL:root:critical message 若將等級設為 DEBUG，就會將所有等級的訊息都輸出：import logging logging.basicConfig(level=logging.DEBUG) logging.debug(&#39;debug message&#39;) logging.info(&#39;info message&#39;) logging.warning(&#39;warning message&#39;) logging.error(&#39;error message&#39;) logging.critical(&#39;critical message&#39;) 下面是輸出結果，預設的訊息輸出格式是 %(levelname)s:%(name)s:%(message)s (後面會介紹如何自訂輸出格式)：DEBUG:root:debug message INFO:root:info message WARNING:root:warning message ERROR:root:error message CRITICAL:root:critical message 自訂 logging 輸出格式預設的訊息輸出格式只有 levelname、name、message，下面是其他相關的資訊：格式化字串說明%(asctime)s日期時間, 格式為 YYYY-MM-DD HH:mm:SS,ms，例如：2018-12-13 17:20:30,567%(filename)s模組檔名%(funcName)s函數名稱%(levelname)s日誌的等級名稱%(levelno)s日誌的等級數值%(lineno)d呼叫日誌函數所在的行數%(message)s訊息%(module)s模組名稱%(name)slogger 的名稱%(pathname)s檔案的完整路徑 (如果可用)%(process)dprocess ID (如果可用)%(thread)d執行緒 ID (如果可用)%(threradName)s執行緒名稱可將這些資訊加入 logging.basicConfig() 內的 format 參數：FORMAT = &#39;%(asctime)s %(levelname)s: %(message)s&#39; logging.basicConfig(level=logging.DEBUG, format=FORMAT) logging.debug(&#39;debug message&#39;) logging.info(&#39;info message&#39;) logging.warning(&#39;warning message&#39;) logging.error(&#39;error message&#39;) logging.critical(&#39;critical message&#39;) 下面是自訂訊息的輸出結果：2018-12-13 17:40:34,604 DEBUG: debug message 2018-12-13 17:40:34,604 INFO: info message 2018-12-13 17:40:34,604 WARNING: warning message 2018-12-13 17:40:34,604 ERROR: error message 2018-12-13 17:40:34,608 CRITICAL: critical message 儲存 logging只要在 logging.basicConfig() 內的 filename 參數設定要儲存的日誌檔名，就可以將 logging 儲存：FORMAT = &#39;%(asctime)s %(levelname)s: %(message)s&#39; logging.basicConfig(level=logging.DEBUG, filename=&#39;myLog.log&#39;, filemode=&#39;w&#39;, format=FORMAT) logging.debug(&#39;debug message&#39;) logging.info(&#39;info message&#39;) logging.warning(&#39;warning message&#39;) logging.error(&#39;error message&#39;) logging.critical(&#39;critical message&#39;) 預設 filemode 參數是設為 a，代表 append (附加) 的意思，每次執行程式時，Logging 會將新的訊息加在舊的訊息後面，不會覆蓋舊的訊息。若要改成新訊息覆蓋就訊息，那可以將 filemode 參數設為 w，代表 write 的意思。下面是剛剛執行後儲存的 myLog.log 日誌檔：2018-12-13 17:47:18,686 DEBUG: debug message 2018-12-13 17:47:18,687 INFO: info message 2018-12-13 17:47:18,687 WARNING: warning message 2018-12-13 17:47:18,687 ERROR: error message 2018-12-13 17:47:18,687 CRITICAL: critical message 詳情可參考官方文件 Logging facility for Python — Python documentation。","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Logging","slug":"logging","permalink":"https://titangene.github.io/tags/logging/"}]},{"title":"設定 Windows 工作排程定期執行 Python 爬蟲程式","slug":"set-up-windows-task-scheduler-to-periodically-execute-python-crawler","date":"2018-12-01T04:55:00.000Z","updated":"2018-12-01T05:38:25.364Z","comments":true,"path":"article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html","link":"","permalink":"https://titangene.github.io/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html","excerpt":"如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。","text":"如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。最近有些資料想透過爬蟲來擷取，而且希望可以定期 (例如：每 10 分鐘一次) 自動執行爬蟲程式，因此就有了這篇筆記。下面介紹如何以 Windows 工作排程器來定期執行爬蟲程式。目標每 10 分鐘自動執行 Python 爬蟲程式，將爬蟲抓到的最新降雨量資料存入 CSV 檔內收集。準備WindowsPython 環境：建議安裝 Anaconda，可參考 用 Conda 建立虛擬環境和管理相依套件Python 套件 (這是本篇爬蟲範例所需的相依套件，可依各自需求來選擇)PandasNumpyRequestsPython 爬蟲程式原始碼source code: titangene/cwb-opendata-crawler-demo/crawler.py簡單說明一下程式的執行步驟：利用 Python 的 Requests 套件來建立 HTTP 的 GET 請求，從中央氣象局提供的開放資料 API 中取得資料，回傳的格式是 JSON解析 API 回傳的 JSON 資料，並將 JSON 轉成 Pandas 的 DataFrame 型別的資料格式將 DataFrame 儲存成 CSV 檔保存資料若想了解中央氣象局開放資料的相關內容，詳情可參考 中央氣象局開放資料 - 開發指南。Python 爬蟲程式的批次檔建立一個副檔名為 .bat 的批次檔，批次檔是用來執行 Python 爬蟲程式，因此就能讓 Windows 工作排程器在定期時間自動執行批次檔，以達成自動化執行爬蟲的目的。下面就來說明批次檔每行都做了甚麼：第一行：切到指定目錄第二行：指定 Python 虛擬環境 (可參考 用 Conda 建立虛擬環境和管理相依套件。如果要在全域環境下執行就不需要這行)第三行：執行 Python 爬蟲程式第四行：若想查看 Python 爬蟲程式執行過程中所輸出 (也就是執行 print 方法的部分) 內容，就需要取消這行的註解REM：單行註解pause：用來暫停批次檔的執行cd /d D:/Project/Python/cwb-opendata-crawler call activate dev call python crawler.py REM pause source code: titangene/cwb-opendata-crawler-demo/crawler.batWindows 工作排程器 簡介可預先設定工作在特定時間或指定時間時，會自動執行程式或批次檔以達成工作自動化。下圖為 Windows 10 的工作排程器介面：建立工作，設定定期執行爬蟲程式開啟 Windows 的「工作排程器」，點擊右上角的「建立工作」自訂工作名稱，若有權限需求可勾選「以最高權限執行」選項接著新增「觸發程序」設定工作的開始時間，並選擇「僅一次」，以及設定工作要每隔多久就執行一次，並且要持續多久時間然後新增「動作」設定要自動執行的程式，這邊選擇的就是剛剛提到的 批次檔 (原始碼)如果設定好了就可以按確定完成建立工作，此時就會看到在「工作排程器程式庫」內的工作清單中，多了剛剛新增的工作成果可以看到爬蟲程式會在定期自動執行，執行的時候會跳出一個 cmd 視窗。若剛剛提到的 批次檔 內沒有將 REM pause 這行註解，就會看到爬蟲程式執行完成後，不會自動關閉 cmd 視窗，這是為了可以立即看到該次爬蟲執行過程中輸出的訊息。下圖就是自動執行爬蟲所抓到的資料：完整 source code：titangene/cwb-opendata-crawler-demo","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Python Requests","slug":"python-requests","permalink":"https://titangene.github.io/tags/python-requests/"},{"name":"Crawler","slug":"crawler","permalink":"https://titangene.github.io/tags/crawler/"},{"name":"Windows","slug":"windows","permalink":"https://titangene.github.io/tags/windows/"},{"name":"Windows 工作排程","slug":"windows-工作排程","permalink":"https://titangene.github.io/tags/windows-工作排程/"}]},{"title":"用 Conda 建立虛擬環境和管理相依套件","slug":"create-a-virtual-environment-and-manage-dependencies-with-conda","date":"2018-11-19T09:10:00.000Z","updated":"2018-12-01T05:40:49.813Z","comments":true,"path":"article/create-a-virtual-environment-and-manage-dependencies-with-conda.html","link":"","permalink":"https://titangene.github.io/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html","excerpt":"學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。","text":"學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。AnacondaAnaconda 是最受歡迎的 Python 資料科學 (Data Science) 平台，它特點就是本來就包含了各種數據分析、科學計算的相關套件 (例如：NumPy、SciPy、Matplotlib、SymPy、Pandas … 等)，而 Anaconda 的套件管理工具就是 conda。CondaConda 是一個開源的套件與環境管理的系統，可以在 Windows、macOS 和 Linux 上使用。可利用 Conda 來安裝、執行、更新套件以及其相依的套件，並且還可用來建立不同的開發環境 (例如：不同環境有不同的 Python 版本)。安裝 Anaconda至 Anaconda 官網下載並安裝，建議選擇 Python 3.x 的版本。建立虛擬環境從指定套件列表中建立新的 conda 環境：-n，--name：設定環境名稱$ conda create -n &lt;environment&gt; &lt;package&gt; # 安裝整套 Anaconda $ conda create -n &lt;environment&gt; anaconda # 指定 Python 版本 $ conda create -n &lt;environment&gt; python=3.6 -e，--envs：列出已建立的環境# 顯示虛擬環境列表，並顯示正在使用的虛擬環境 $ conda info -e # conda environments: # base * D:\\Users\\Titan\\Anaconda3 hello D:\\Users\\Titan\\Anaconda3\\envs\\hello 使用或 activate 至指定環境：# Windows $ activate &lt;environment&gt; # Linux and macOS $ source activate &lt;environment&gt; # 顯示虛擬環境列表，並顯示正在使用的虛擬環境 $ conda info -e # conda environments: # base D:\\Users\\Titan\\Anaconda3 hello * D:\\Users\\Titan\\Anaconda3\\envs\\hello * 代表目前正在使用的虛擬環境離開虛擬環境如果要將現在環境改回預設值 base (離開目前環境) 可使用下面指令：# Windows $ deactivate # Linux and macOS $ source deactivate 利用 conda 安裝套件$ conda install &lt;package&gt; # 安裝多個套件 $ conda install &lt;package-1&gt; &lt;package-2&gt; 查看資訊查看 conda 目前版本$ conda -V conda 4.5.11 查看目前環境已安裝的套件$ conda list # packages in environment at D:\\Users\\Titan\\Anaconda3: # # Name Version Build Channel ... jupyter 1.0.0 py35_3 jupyter_client 5.2.3 py35_0 jupyter_console 4.1.1 py35_0 jupyter_core 4.4.0 py35h629ba7f_0 jupyterlab 0.32.1 &lt;pip&gt; jupyterlab-launcher 0.10.5 &lt;pip&gt; ... 查看 conda 是否有某套件：$ conda search &lt;package&gt; $ conda search pandas Loading channels: done # Name Version Build Channel pandas 0.9.0 np16py27_0 pkgs/free pandas 0.9.1 np16py27_0 pkgs/free ... 如果 conda 沒有該套件，可以使用 pip 來安裝套件：# 安裝套件 $ pip install &lt;package&gt; # 更新套件 $ pip install --upgrade &lt;package&gt; 刪除套件# 刪除環境內的套件 $ conda remove -n &lt;environment&gt; &lt;package&gt; # 刪除目前環境內的套件 $ conda remove &lt;package&gt; # 刪除多個套件 $ conda remove &lt;package-1&gt; &lt;package-2&gt; 更新套件# 更新 conda $ conda update conda # 更新 Anaconda $ conda update anaconda # 更新 Python $ conda update python # 更新特定套件 $ conda update &lt;package&gt; 刪除虛擬環境$ conda env remove -n &lt;environment&gt; 更新 Python更新全域環境$ conda update python $ conda update anaconda 如果要更新 Python 的特定版本：$ conda install python==$pythonversion$ 建立新環境 (最佳方案)$ conda create --name py36 python=3.6 取得 Python 的最新版本$ conda create --name py365 python=3.6.5 --channel conda-forge :::warning注意：Conda 會更新該版本列表中的最高版本，因此 Python 2.7 更新到 2.x 中的最高版本，而 3.x 系列依此類推。:::參考連結Managing packages | Conda documentationmacos - How do I upgrade to Python 3.6 with conda? - Stack Overflow","categories":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/categories/python/"}],"tags":[{"name":"Python","slug":"python","permalink":"https://titangene.github.io/tags/python/"},{"name":"Anaconda","slug":"anaconda","permalink":"https://titangene.github.io/tags/anaconda/"},{"name":"Conda","slug":"conda","permalink":"https://titangene.github.io/tags/conda/"},{"name":"Virtual Environment","slug":"virtual-environment","permalink":"https://titangene.github.io/tags/virtual-environment/"},{"name":"Package Management","slug":"package-management","permalink":"https://titangene.github.io/tags/package-management/"}]},{"title":"Windows Subsystem for Linux (WSL)","slug":"windows-subsystem-for-linux","date":"2018-11-17T11:00:45.000Z","updated":"2018-12-01T05:38:54.771Z","comments":true,"path":"article/windows-subsystem-for-linux.html","link":"","permalink":"https://titangene.github.io/article/windows-subsystem-for-linux.html","excerpt":"Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。","text":"Windows Subsystem for Linux (簡稱 WSL)，由 Microsoft 與 Canonical 公司合作開發，可直接在 Windows 10 中建立一個 Linux 子系統，原生執行 Linux，還可自行選擇你想安裝的 Linux 發行版，例如：Ubuntu、Kali Linux、SUSE。啟用 Windows Subsystem for Linux使用系統管理者權限開啟 PowerShell，並執行下面命令啟用 Windows Subsystem for Linux 功能：$ Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux 如果顯示下面訊息就代表你沒有使用系統管理員開啟 PowerShell：Enable-WindowsOptionalFeature : 要求的作業需要提升的權限。 位於 線路:1 字元:1 + Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows- ... + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ + CategoryInfo : NotSpecified: (:) [Enable-WindowsOptionalFeature], COMException + FullyQualifiedErrorId : Microsoft.Dism.Commands.EnableWindowsOptionalFeatureCommand 接著等他跑一下…：接著他會問是否要重啟電腦，因為預設是 Yes，所以可以直接按 Enter：其實上面指令就等於去「控制台 &gt; 程式集 &gt; 開啟或關閉 Windows 功能」開啟「適用於 Linux 的 Windows 子系統」。安裝 Linux 發行版系統組建 (build) 必須要 Windows build 16215 或更新版本。若要想知道系統組建，可至 Windows 的「設定」內的「關於」即可查看。你可以選擇你想安裝的 Linux 發行版：Ubuntu 16.04 LTSUbuntu 18.04 LTSDebian GNU/LinuxOpenSUSE Leap 42SUSE Linux Enterprise Server 12Kali Linux如果在安裝後直接開啟 Ubuntu，就會顯示 Error: 0x8007007e 錯誤就代表你沒有啟用 Windows Subsystem for Linux 功能，詳情請參考上面：The WSL optional component is not enabled. Please enable it and try again. See https://aka.ms/wslinstall for details. Error: 0x8007007e Press any key to continue... 安裝後啟動 Linux 發行版，此時會開啟一個 console 視窗。因為是第一次開啟，所以會先安裝 WSL，等它安裝完後，就會看到下面畫面，系統要你建立一個新的 Unix 使用者名稱：Installing, this may take a few minutes... Installation successful! Please create a default UNIX user account. The username does not need to match your Windows username. For more information visit: https://aka.ms/wslusers Enter new UNIX username: 接著是設定此使用者的密碼，這邊的使用者與你的 Windows 使用者名稱和密碼沒有任何關係。詳情可參考官方的 Linux User Account and Permissions | Microsoft Docs 文件。如果顯示 $ 就代表設定完成囉！執行 lsb_release -a 指令就會看到 Linux 的系統版本：在其他終端使用 Bash如果在使用 CMD 、 PowerShell 或其他終端 (例如我常用的 Cmder) 時想用 bash shell，可使用 bash 指令就可以啟動新的 Ubuntu shell：$ bash 存取目錄如果想存取 D:\\project，在此環境下的路徑就是 /mnt/d/project。小結如果有在跨平台開發或維運的朋友，這個功能應該是一直以來的願望吧？讓你在 Windows 上可以直接處理事情，不用再多開 VM 來使用，不只省資源，也省硬碟空間，重點是不用等 VM 開機…參考連結Install the Linux Subsystem on Windows 10 | Microsoft Docs【WSL】Windows Subsystem for Linux 安裝及基本配置！ | 台灣微軟學生大使Bash on Ubuntu on Windows 的簡單使用 | Heresy’s Space","categories":[{"name":"Windows","slug":"windows","permalink":"https://titangene.github.io/categories/windows/"},{"name":"Linux","slug":"windows/linux","permalink":"https://titangene.github.io/categories/windows/linux/"}],"tags":[{"name":"Linux","slug":"linux","permalink":"https://titangene.github.io/tags/linux/"},{"name":"Ubuntu","slug":"ubuntu","permalink":"https://titangene.github.io/tags/ubuntu/"},{"name":"Windows 10","slug":"windows-10","permalink":"https://titangene.github.io/tags/windows-10/"},{"name":"WSL","slug":"wsl","permalink":"https://titangene.github.io/tags/wsl/"}]},{"title":"GitHub 縮網址服務 Git.io","slug":"github-url-shortener","date":"2018-10-31T16:58:19.000Z","updated":"2018-11-22T08:46:18.166Z","comments":true,"path":"article/github-url-shortener.html","link":"","permalink":"https://titangene.github.io/article/github-url-shortener.html","excerpt":"最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「Git.io」，它只適用於 gist.github.com 及 github.com 兩個 hostname。","text":"最近發現原來 Github 也有提供縮網址 (URL Shortener) 服務「Git.io」，它只適用於 gist.github.com 及 github.com 兩個 hostname。下列網址都可以透過 Git.io 來建立縮網址：Github 個人或組織專業 ( https://github.com/&lt;github-id&gt; )Github repository ( https://github.com/&lt;github-id&gt;/&lt;repo-name&gt; ) 或 repository 內目錄或檔案Gist ( https://gist.github.com/&lt;github-id&gt;/&lt;gist-id&gt; )Git.io 有兩種建立短網址的方法，下面會分別介紹：直接到 Git.io 線上設定使用 curl 指令設定：Git.io: GitHub URL Shortener | GitHub BlogGit.io 線上設定最簡單的方法當然是直接打開 Git.io，接著輸入網址並點擊「shorten」按鈕就會將你剛剛輸入的網址變成短網址，短網址的格式是 git.io/xxx。但缺點是無法自訂短網址名稱，預設是自動隨機英文 + 數字的字串。使用 curl 指令建立短網址-i、--include：顯示 HTTP response headers-F、--form &lt;name=content&gt;：設定表單資料，Content-Type 會被設為 multipart/form-data$ curl -i https://git.io -F &quot;url=&lt;想縮短的網址&gt;&quot; -F &quot;code=&lt;自訂短網址名稱&gt;&quot; 例如我想將自己的 Github profile URL：github.com/titangene 縮短成 git.io/titan，就要執行下面指令：$ curl -i https://git.io -F &quot;url=https://github.com/titangene&quot; -F &quot;code=titan&quot; HTTP/1.1 201 Created ... Location: https://git.io/titan ... $ curl -i https://git.io -F &quot;url=https://titangene.github.io/&quot; -F &quot;code=titan-blog&quot; 只要輸入下面指令就可以確認是否建立成功$ curl -i https://git.io/titan HTTP/1.1 302 Found ... Location: https://github.com/titangene ... [小插曲] 縮網址不小心設定錯誤一開始在 Git.io 測試時，直接用自己的 Github profile URL ( github.com/titangene ) 來產生預設隨機英文 + 數字的短網址，想要修改成 git.io/titan 卻沒辦法！這是因為 Git.io 沒有直接提供修改短網址的功能。後來 Google 一下才發現只能聯繫 Github 客服來幫忙刪除短網址，然後再自行重新設定。過了不到半天客服就回信幫我解決了！真是太感謝 Github 客服了！","categories":[{"name":"Other","slug":"other","permalink":"https://titangene.github.io/categories/other/"}],"tags":[{"name":"Github","slug":"github","permalink":"https://titangene.github.io/tags/github/"},{"name":"URL","slug":"url","permalink":"https://titangene.github.io/tags/url/"},{"name":"URL Shortener","slug":"url-shortener","permalink":"https://titangene.github.io/tags/url-shortener/"}]},{"title":"Flutter 自訂字型","slug":"flutter-custom-fonts","date":"2018-10-29T03:40:00.000Z","updated":"2018-12-01T05:40:40.355Z","comments":true,"path":"article/flutter-custom-fonts.html","link":"","permalink":"https://titangene.github.io/article/flutter-custom-fonts.html","excerpt":"雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。","text":"雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。將字型檔放入專案資料夾內此範例是放在 ./assets/fonts 資料夾內：assets/ fonts/ FiraCode-Medium.ttf mononoki-Bold.ttf mononoki-BoldItalic.ttf mononoki-Italic.ttf mononoki-Regular.ttf 在 pubspec.yaml 定義字型資訊flutter: fonts: - family: FiraCode fonts: - asset: assets/fonts/FiraCode-Medium.ttf - family: Mononoki fonts: - asset: assets/fonts/mononoki-Regular.ttf - asset: assets/fonts/mononoki-Bold.ttf weight: 700 - asset: assets/fonts/mononoki-Italic.ttf style: italic - asset: assets/fonts/mononoki-BoldItalic.ttf weight: 700 style: italic 設定預設字型MaterialApp( title: &#39;Custom Fonts&#39;, theme: ThemeData(fontFamily: &#39;FiraCode&#39;), home: MyHomePage(title: &#39;Custom Fonts&#39;), ); 在特定 Widget 設定字型Text( &#39;Custom Fonts&#39;, style: TextStyle( fontFamily: &#39;Mononoki&#39;, fontSize: 30.0, fontWeight: FontWeight.w700, fontStyle: FontStyle.italic, ), ) 完整範例程式碼import &#39;package:flutter/material.dart&#39;; void main() =&gt; runApp(new MyApp()); class MyApp extends StatelessWidget { @override Widget build(BuildContext context) { return new MaterialApp( title: &#39;Custom Fonts&#39;, theme: new ThemeData( primarySwatch: Colors.blue, fontFamily: &#39;FiraCode&#39;, ), home: new MyHomePage(title: &#39;Custom Fonts&#39;), ); } } class MyHomePage extends StatelessWidget { MyHomePage({Key key, this.title}) : super(key: key); final String title; @override Widget build(BuildContext context) { return new Scaffold( appBar: new AppBar( title: new Text(this.title), ), body: Column( children: &lt;Widget&gt;[ new Text( &#39;&lt;-- Custom Fonts -&gt;&gt;&#39;, style: TextStyle(fontSize: 30.0), ), new Text( &#39;Custom Fonts&#39;, style: TextStyle( fontFamily: &#39;Mononoki&#39;, fontSize: 30.0, ), ), new Text( &#39;Custom Fonts&#39;, style: TextStyle( fontFamily: &#39;Mononoki&#39;, fontSize: 30.0, fontWeight: FontWeight.w700, ), ), new Text( &#39;Custom Fonts&#39;, style: TextStyle( fontFamily: &#39;Mononoki&#39;, fontSize: 30.0, fontStyle: FontStyle.italic, ), ), new Text( &#39;Custom Fonts&#39;, style: TextStyle( fontFamily: &#39;Mononoki&#39;, fontSize: 30.0, fontWeight: FontWeight.w700, fontStyle: FontStyle.italic, ), ), ], ), ); } } 詳情可參考 Using custom fonts - Flutter 官方文件","categories":[{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/categories/native-app/"}],"tags":[{"name":"Dart","slug":"dart","permalink":"https://titangene.github.io/tags/dart/"},{"name":"Flutter","slug":"flutter","permalink":"https://titangene.github.io/tags/flutter/"},{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/tags/native-app/"},{"name":"Font","slug":"font","permalink":"https://titangene.github.io/tags/font/"}]},{"title":"Flutter 環境建置 (Windows)","slug":"flutter-install-on-windows","date":"2018-10-22T22:58:44.000Z","updated":"2018-12-01T05:40:27.852Z","comments":true,"path":"article/flutter-install-on-windows.html","link":"","permalink":"https://titangene.github.io/article/flutter-install-on-windows.html","excerpt":"最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。","text":"最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。詳情可參考官方連結：Get Started: Install on Windows | Flutter系統要求OS：Windows 7 SP1 或以上 (64-bit)硬碟空間：400 MB (不包括 IDE 和工具的空間)工具PowerShell 5.0 或更新版Git for Windows (勾選 Use Git from the Windows Command Prompt 選項，若沒打勾可自行將 Git 安裝目錄內的 bin 資料夾設定為 Path 環境變數，預設目錄為 C:\\Program Files\\Git\\bin )安裝 Flutter SDK下載 Flutter SDK，可下載歷史版本，但建議安裝新版。解壓檔內有一個 flutter 資瞭夾，將此資料夾放在 Flutter SDK 所需的安裝目錄 (e.g D:\\dev\\flutter，請勿將 flutter 資瞭夾放在需要提高權限之類的目錄內，e.g. C:\\Program Files\\ )。將 flutter\\bin 的完整目錄 (e.g. D:\\dev\\flutter\\bin ) 加入 Path 環境變數 (各完整路徑記得用 ; 分號分隔)接著就可以在 Console 內執行 Flutter commands執行 flutter --version 指令確定已成功安裝 Flutter SDK$ flutter --version Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git Framework • revision 3b309bda07 (12 days ago) • 2018-08-28 12:39:24 -0700 Engine • revision af42b6dc95 Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282 之後請定期執行 flutter upgrade 指令更新 Flutter (因為目前還在 beta，大約幾週就會有新版)執行 flutter --version 指令後，若看到下面畫面就代表現在有新版可以更新：$ flutter --version ╔════════════════════════════════════════════════════════════════════════════╗ ║ A new version of Flutter is available! ║ ║ ║ ║ To update to the latest version, run &quot;flutter upgrade&quot;. ║ ╚════════════════════════════════════════════════════════════════════════════╝ Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git Framework • revision 3b309bda07 (3 weeks ago) • 2018-08-28 12:39:24 -0700 Engine • revision af42b6dc95 Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282 執行 flutter upgrade 指令更新 Flutter：$ flutter upgrade Upgrading Flutter from D:\\dev\\flutter... ... Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.git Framework • revision 3b309bda07 (3 weeks ago) • 2018-09-07 12:33:05 -0700 Engine • revision 58a1894a1c Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282 Running flutter doctor... Doctor summary (to see all details, run flutter doctor -v): [√] Flutter (Channel beta, v0.8.2, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW) [√] Android toolchain - develop for Android devices (Android SDK 28.0.2) [√] Android Studio (version 3.1) [√] VS Code (version 1.27.2) [!] Connected devices ! No devices available ! Doctor found issues in 1 category. 在執行一次 flutter --version 確認已更新至新的版本：$ flutter --version Flutter 0.8.2 • channel beta • https://github.com/flutter/flutter.git Framework • revision 5ab9e70727 (13 days ago) • 2018-09-07 12:33:05 -0700 Engine • revision 58a1894a1c Tools • Dart 2.1.0-dev.3.1.flutter-760a9690c2 flutter doctor下面指令是用來查看是否需要安裝任何依賴才能完成設定，因此他會檢查你的環境並顯示檢查報告：$ flutter doctor Dart SDK is bundled with Flutter，不用另外安裝 Dart。從檢查報告的輸出中可以了解需要安裝的其他軟體或執行的其他任務 (以粗體顯示)。例如：$ flutter doctor Doctor summary (to see all details, run flutter doctor -v): [√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.228], locale zh-TW) [!] Android toolchain - develop for Android devices (Android SDK 28.0.2) X Android license status unknown. [√] Android Studio (version 3.1) X Flutter plugin not installed; this adds Flutter specific functionality. X Dart plugin not installed; this adds Dart specific functionality. [!] Connected devices ! No devices available ! Doctor found issues in 2 categories. 下面會介紹如何執行這些任務並完成設定過程。可再次執行 flutter doctor 指令來驗證是否已正確設定所有內容。如果已驗證設定所有內容，就會看到下面輸出結果：$ flutter doctor Doctor summary (to see all details, run flutter doctor -v): [√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW) [√] Android toolchain - develop for Android devices (Android SDK 28.0.2) [√] Android Studio (version 3.1) [√] Connected devices (1 available) • No issues found! 加上參數 -v，可以看更詳細的驗證說明：$ flutter doctor -v [√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW) • Flutter version 0.7.3 at D:\\dev\\flutter • Framework revision 3b309bda07 (3 weeks ago), 2018-08-28 12:39:24 -0700 • Engine revision af42b6dc95 • Dart version 2.1.0-dev.1.0.flutter-ccb16f7282 [√] Android toolchain - develop for Android devices (Android SDK 28.0.2) • Android SDK at C:\\Users\\Titan\\AppData\\Local\\Android\\sdk • Android NDK location not configured (optional; useful for native profiling support) • Platform android-28, build-tools 28.0.2 • ANDROID_HOME = C:\\Users\\Titan\\AppData\\Local\\Android\\sdk • Java binary at: C:\\Program Files\\Android\\Android Studio\\jre\\bin\\java • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02) • All Android licenses accepted. [√] Android Studio (version 3.1) • Android Studio at C:\\Program Files\\Android\\Android Studio • Flutter plugin version 28.0.1 • Dart plugin version 173.4700 • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02) [√] Connected devices (1 available) • SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26) • No issues found! Android 設定:::infoFlutter 依賴於 Android Studio 以提供 Android 平台的依賴性。但也可以使用其他編輯器來寫 Flutter App。:::安裝 Java JDK安裝 JDK將 Java JDK 安裝目錄設定為 JAVA_HOME 環境變數 (e.g. C:\\Program Files\\Java\\jdk1.8.0_151 )，並在將 Java JDK 安裝目錄內的 bin 資料夾設定為 Path 環境變數 (e.g. C:\\Program Files\\Java\\jdk1.8.0_151\\bin，也可設定為 %JAVA_HOME%\\bin )安裝 Android Studio安裝 Android Studio，請安裝 Recommended (建議) 版執行 Android Studio，並瀏覽 Android Studio Setup Wizard，安裝最新的 Android SDK、Android SDK Platform-Tools、Android SDK Build-Tools，這些都是 Flutter 在開發 Android 時所必須的。將 Android SDK 目錄設定為 ANDROID_HOME 環境變數 (預設目錄為 C:\\Users\\Titan\\AppData\\Local\\Android\\sdk )定期更新 Android SDK (於 Android Studio &gt; Configure &gt; SDK Manager 安裝)設定你的 Android 裝置想在 Android 裝置上執行和測試 Flutter App，需要 Android 4.1 (API level 16) 或更高版本的 Android 設備。裝置請開啟 開發者模式 內的 USB 偵錯，詳情可參考 Configure on-device developer options | Android Developers 此 Android 官方文件安裝 Google USB Driver (限 Windows)使用 USB 線將裝置連接至電腦，如果你的裝置有出現提示，請授權你的電腦可訪問你的裝置開啟終端機，執行 flutter devices 指令以驗證 Flutter 是否成功連結 Android 裝置# 像我連接到 Note 8 $ flutter devices 1 connected device: SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26) Flutter 預設會以 adb 工具基於的 Android SDK 版本來使用，若想用其他版本的 Android SDK，可設定你所需的 Android SDK 目錄為 ANDROID_HOME 環境變數。如果執行 flutter run指令，而且成功將 App 安置手機並執行，就會看到 App 的畫面設定 Android 模擬器 (emulator)想在 Android 模擬器上執行和測試 Flutter App，請依照下面步驟：在主機上啟用 VM acceleration啟動 Android Studio &gt; Tools &gt; AVD Manager 並點選 Create Virtual Device選擇設備定義，然後點擇 Next選擇你所需的 Android 版本的 OS image，然後點選 Next (建議選擇 x86 或 x86_64 image)在 Emulated Performance 欄位請選擇 Hardware - GLES 2.0 以啟用 hardware acceleration驗證 AVD 設定是否正確，若確定請點選 Finish在 Android Virtual Device Manager 中，選擇某台模擬器並點擊 Run有關上述步驟的詳情可參考 Managing AVDs設定編輯器設定 Android Studio安裝 Flutter 和 Dart plugins (外掛)，有兩個 plugin 支援 Flutter：Flutter 外掛：支持 Flutter 開發人員工作流程 (running, debugging, hot reload … 等)Dart 外掛：提供程式碼分析 (輸入時的程式碼驗證、程式碼自動補全)安裝步驟：執行 Android Studio開啟外掛選項 (File &gt; Settings &gt; Plugins)點選 Browse repositories…，接著搜尋 Flutter 並選擇並安裝名為 Flutter 的 plugin (請注意，安裝 Flutter 外掛時會同時安裝 Dart 語言外掛)點擊 Restart Android Studio設定 VS Code安裝 Flutter plugin：安裝 Flutter 此擴充功能，並重啟 VS Code。使用 Flutter Doctor 驗證你的設定環境：按 F1 或 ctrl + shift + p 後，輸入 Flutter 並點選 Flutter: Run Flutter Doctor 即可至 OUTPUT (輸出) 查看驗證結果。入門Android Studio建立新 app在 Android Studio 中建立 Flutter 專案 ( File &gt; New &gt; New Flutter Project… )接著選擇 Flutter Application，並點選 Next請設定專案名稱、確定 Flutter SDK 目錄、設定專案儲存位置與填寫專案的簡單描述後，點選 Next最後輸入公司網域 (e.g. example.com) 後，點選 Finish 即可建立新的 Flutter 專案執行 app下圖為 Android Studio 的工具列：圖片來源：Get Started: Test Drive | Flutter在 target selector 中，選擇已執行的 Android 裝置，若當前未啟動或未連接任何 Android 裝置，選擇某一模擬器時，Android Studio 就會開啟該選擇的模擬器。如果沒有可用的裝置，可至前面介紹的 設定 Android 模擬器 段落來新建模擬器。點擊 Run 圖示執行 app稍後就會在模擬器或裝置上看到下圖的 app 畫面等待的過程中會初始化 gradlegradle 會 resolve dependencies將專案轉成 apk將 apk 安裝並執行於裝置上Launching lib\\main.dart on Android SDK built for x86 64 in debug mode... Initializing gradle... Resolving dependencies... Running &#39;gradlew assembleDebug&#39;... Built build\\app\\outputs\\apk\\debug\\app-debug.apk. Installing build\\app\\outputs\\apk\\app.apk... D/OpenGLRenderer( 4777): HWUI GL Pipeline I/OpenGLRenderer( 4777): Initialized EGL, version 1.4 D/OpenGLRenderer( 4777): Swap behavior 1 D/ ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e5b00, tid 4831 W/OpenGLRenderer( 4777): Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without... D/OpenGLRenderer( 4777): Swap behavior 0 D/EGL_emulation( 4777): eglCreateContext: 0x7073cf2a7600: maj 2 min 0 rcv 2 D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300) D/EGL_emulation( 4777): eglCreateContext: 0x7073cf3b10a0: maj 2 min 0 rcv 2 D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c2fe87c0) Syncing files to device Android SDK built for x86 64... D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300) D/ ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e65e0, tid 4813 D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c560d6c0) 嘗試 hot reload修改一些內容並儲存，app 就會自動做 hot reload，就會很快地看到最新的更新。VS Code建立新 app按 F1 或 ctrl + shift + p 後，輸入 Flutter 並點選 Flutter: New Project輸入專案名稱後，按 enter 鍵選擇專案目錄的儲存位置等待專案建立完成，並在畫面顯示 lib/main.dart 檔案執行 app從 VS Code 底部的藍色狀態欄中點選 Device Selector若要使用實體裝置，詳情至 設定你的 Android 裝置 參考。若連結成功會在 VS Code 底部的藍色狀態欄中看到你的裝置名稱如果沒有可用的裝置，請點選 No Devices 並啟動模擬器執行 Debug等待 App 執行，可在偵錯主控台 (Debug Console) 看到執行進度，稍後就會在模擬器或裝置上看到下圖的 app 畫面Terminal + editor建立新 app使用 flutter create 指令來建立 Flutter 專案，裡面包含 Material Components 的範例 app。app 的程式碼在 lib/main.dart。$ flutter create &lt;prject-name&gt; $ cd &lt;prject-name&gt; 執行 app使用 flutter devices 指令可檢查是否有正在執行的模擬器或裝置。如果沒有可用的裝置，可至前面介紹的 設定 Android 模擬器 段落來新建模擬器。$ flutter devices 1 connected device: Android SDK built for x86 64 • emulator-5554 • android-x64 • Android 8.0.0 (API 26) (emulator) 使用 flutter run 指令可執行 app，並提供以下功能的快速鍵：r：hot reloadR：hot restart (and rebuild state)h：顯示更多幫助訊息q：停止執行$ flutter run Using hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with &quot;--enable-software-rendering&quot;. Launching lib/main.dart on Android SDK built for x86 64 in debug mode... Initializing gradle... 1.7s Resolving dependencies... 48.1s Running &#39;gradlew assembleDebug&#39;... 88.5s Built build\\app\\outputs\\apk\\debug\\app-debug.apk. Installing build\\app\\outputs\\apk\\app.apk... 11.4s Syncing files to device Android SDK built for x86 64... D/ ( 5458): HostConnection::get() New Host Connection established 0x7073c31aabe0, tid 5513 D/EGL_emulation( 5458): eglMakeCurrent: 0x7073cf3b1280: ver 2 0 (tinfo 0x7073c2ab65c0) 12.3s 🔥 To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;. An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:2158/ For a more detailed help message, press &quot;h&quot;. To quit, press &quot;q&quot;.","categories":[{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/categories/native-app/"}],"tags":[{"name":"Dart","slug":"dart","permalink":"https://titangene.github.io/tags/dart/"},{"name":"Flutter","slug":"flutter","permalink":"https://titangene.github.io/tags/flutter/"},{"name":"Native App","slug":"native-app","permalink":"https://titangene.github.io/tags/native-app/"}]},{"title":"Hexo 加入 Disqus 討論區","slug":"hexo-disqus","date":"2018-10-22T14:40:00.000Z","updated":"2018-12-01T05:39:25.990Z","comments":true,"path":"article/hexo-disqus.html","link":"","permalink":"https://titangene.github.io/article/hexo-disqus.html","excerpt":"接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。","text":"接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。建立 Disqus至 Disqus 首頁註冊帳號後並登入，接著點擊首頁的「GET STARTED」選擇「I want to install Disqus on my site」選項Websit Name：自訂 short name，且是唯一，像我是設定 titangene-blog。short name 會在設定 Hexo 時需要Category：類別，自行選擇Language：語言，自行選擇填寫後點擊「Create Site」設定 Hexo在根目錄內的 _config.yml 內設定：disqus_shortname: your_disqus_short_name 設定後就可以看到每篇文章下面都可以留言囉！","categories":[{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/categories/blog/"}],"tags":[{"name":"Hexo","slug":"hexo","permalink":"https://titangene.github.io/tags/hexo/"},{"name":"Blog","slug":"blog","permalink":"https://titangene.github.io/tags/blog/"}]}]}