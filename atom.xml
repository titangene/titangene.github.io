<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Titangene Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://titangene.github.io/"/>
  <updated>2018-10-29T03:47:31.849Z</updated>
  <id>https://titangene.github.io/</id>
  
  <author>
    <name>Titangene</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flutter 自訂字型</title>
    <link href="https://titangene.github.io/article/flutter-custom-fonts.html"/>
    <id>https://titangene.github.io/article/flutter-custom-fonts.html</id>
    <published>2018-10-29T03:40:00.000Z</published>
    <updated>2018-10-29T03:47:31.849Z</updated>
    
    <content type="html"><![CDATA[<p><img src="flutter-install-on-windows/flutter.jpg" alt=""></p><p>雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。</p><a id="more"></a><h2 id="將字型檔放入專案資料夾內"><a href="#將字型檔放入專案資料夾內" class="headerlink" title="將字型檔放入專案資料夾內"></a>將字型檔放入專案資料夾內</h2><p>此範例是放在 <code>./assets/fonts</code> 資料夾內：</p><pre><code>assets/  fonts/    FiraCode-Medium.ttf    mononoki-Bold.ttf    mononoki-BoldItalic.ttf    mononoki-Italic.ttf    mononoki-Regular.ttf</code></pre><h2 id="在-pubspec-yaml-定義字型資訊"><a href="#在-pubspec-yaml-定義字型資訊" class="headerlink" title="在 pubspec.yaml 定義字型資訊"></a>在 <code>pubspec.yaml</code> 定義字型資訊</h2><pre><code class="yaml">flutter:  fonts:    - family: FiraCode      fonts:        - asset: assets/fonts/FiraCode-Medium.ttf    - family: Mononoki      fonts:        - asset: assets/fonts/mononoki-Regular.ttf        - asset: assets/fonts/mononoki-Bold.ttf          weight: 700        - asset: assets/fonts/mononoki-Italic.ttf          style: italic        - asset: assets/fonts/mononoki-BoldItalic.ttf          weight: 700          style: italic</code></pre><h2 id="設定預設字型"><a href="#設定預設字型" class="headerlink" title="設定預設字型"></a>設定預設字型</h2><p><img src="flutter-custom-fonts/flutter_set-default-font.png" alt=""></p><pre><code class="dart">MaterialApp(  title: &#39;Custom Fonts&#39;,  theme: ThemeData(fontFamily: &#39;FiraCode&#39;),  home: MyHomePage(title: &#39;Custom Fonts&#39;),);</code></pre><h2 id="在特定-Widget-設定字型"><a href="#在特定-Widget-設定字型" class="headerlink" title="在特定 Widget 設定字型"></a>在特定 Widget 設定字型</h2><p><img src="flutter-custom-fonts/flutter_set-the-font-on-a-specific-widget.png" alt=""></p><pre><code class="dart">Text(  &#39;Custom Fonts&#39;,  style: TextStyle(    fontFamily: &#39;Mononoki&#39;,    fontSize: 30.0,    fontWeight: FontWeight.w700,    fontStyle: FontStyle.italic,  ),)</code></pre><h2 id="完整範例程式碼"><a href="#完整範例程式碼" class="headerlink" title="完整範例程式碼"></a>完整範例程式碼</h2><p><img src="flutter-custom-fonts/flutter_custom-fonts_demo.png" alt=""></p><pre><code class="dart">import &#39;package:flutter/material.dart&#39;;void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget {  @override  Widget build(BuildContext context) {    return new MaterialApp(      title: &#39;Custom Fonts&#39;,      theme: new ThemeData(        primarySwatch: Colors.blue,        fontFamily: &#39;FiraCode&#39;,      ),      home: new MyHomePage(title: &#39;Custom Fonts&#39;),    );  }}class MyHomePage extends StatelessWidget {  MyHomePage({Key key, this.title}) : super(key: key);  final String title;  @override  Widget build(BuildContext context) {    return new Scaffold(      appBar: new AppBar(        title: new Text(this.title),      ),      body: Column(        children: &lt;Widget&gt;[          new Text(            &#39;&lt;-- Custom Fonts -&gt;&gt;&#39;,            style: TextStyle(fontSize: 30.0),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontWeight: FontWeight.w700,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontStyle: FontStyle.italic,            ),          ),          new Text(            &#39;Custom Fonts&#39;,            style: TextStyle(              fontFamily: &#39;Mononoki&#39;,              fontSize: 30.0,              fontWeight: FontWeight.w700,              fontStyle: FontStyle.italic,            ),          ),        ],      ),    );  }}</code></pre><blockquote><p>詳情可參考 <a href="https://flutter.io/cookbook/design/fonts/" target="_blank" rel="noopener">Using custom fonts - Flutter</a> 官方文件</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;flutter-install-on-windows/flutter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;雖然 Android 和 iOS 內建都有字型，但常有自訂字型的需求，所以這篇會教你如何在 Flutter 使用自訂字型。&lt;/p&gt;
    
    </summary>
    
      <category term="Native App" scheme="https://titangene.github.io/categories/native-app/"/>
    
    
      <category term="Flutter" scheme="https://titangene.github.io/tags/flutter/"/>
    
      <category term="Dart" scheme="https://titangene.github.io/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 環境建置 (Windows)</title>
    <link href="https://titangene.github.io/article/flutter-install-on-windows.html"/>
    <id>https://titangene.github.io/article/flutter-install-on-windows.html</id>
    <published>2018-10-22T22:58:44.000Z</published>
    <updated>2018-10-23T17:20:59.290Z</updated>
    
    <content type="html"><![CDATA[<p><img src="flutter-install-on-windows/flutter.jpg" alt=""></p><p>最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。</p><a id="more"></a><p>詳情可參考官方連結：<a href="https://flutter.io/setup-windows/" target="_blank" rel="noopener">Get Started: Install on Windows | Flutter</a></p><h2 id="系統要求"><a href="#系統要求" class="headerlink" title="系統要求"></a>系統要求</h2><ul><li>OS：Windows 7 SP1 或以上 (64-bit)</li><li>硬碟空間：400 MB (不包括 IDE 和工具的空間)</li><li>工具<ul><li><a href="https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-windows-powershell?view=powershell-6#upgrading-existing-windows-powershell" target="_blank" rel="noopener">PowerShell 5.0</a> 或更新版</li><li><a href="https://git-scm.com/download/win" target="_blank" rel="noopener">Git for Windows</a> (勾選 <code>Use Git from the Windows Command Prompt</code> 選項，若沒打勾可自行將 Git 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數，預設目錄為 <code>C:\Program Files\Git\bin</code> )</li></ul></li></ul><h2 id="安裝-Flutter-SDK"><a href="#安裝-Flutter-SDK" class="headerlink" title="安裝 Flutter SDK"></a>安裝 Flutter SDK</h2><ol><li>下載 Flutter SDK，可下載<a href="https://flutter.io/sdk-archive/#windows" target="_blank" rel="noopener">歷史版本</a>，但建議安裝新版。</li><li>解壓檔內有一個 <code>flutter</code> 資瞭夾，將此資料夾放在 Flutter SDK 所需的安裝目錄 (e.g <code>D:\dev\flutter</code>，請勿將 <code>flutter</code> 資瞭夾放在需要提高權限之類的目錄內，e.g. <code>C:\Program Files\</code> )。</li><li>將 <code>flutter\bin</code> 的完整目錄 (e.g. <code>D:\dev\flutter\bin</code> ) 加入 <code>Path</code> 環境變數 (各完整路徑記得用 <code>;</code> 分號分隔)</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-09-08.png" alt=""></p><ol start="4"><li>接著就可以在 Console 內執行 Flutter commands</li><li>執行 <code>flutter --version</code> 指令確定已成功安裝  Flutter SDK<pre><code class="shell">$ flutter --versionFlutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (12 days ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282</code></pre></li><li>之後請定期執行 <code>flutter upgrade</code> 指令更新 Flutter (因為目前還在 beta，大約幾週就會有新版)</li></ol><p>執行 <code>flutter --version</code> 指令後，若看到下面畫面就代表現在有新版可以更新：</p><pre><code class="shell">$ flutter --version  ╔════════════════════════════════════════════════════════════════════════════╗  ║ A new version of Flutter is available!                                     ║  ║                                                                            ║  ║ To update to the latest version, run &quot;flutter upgrade&quot;.                    ║  ╚════════════════════════════════════════════════════════════════════════════╝Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-08-28 12:39:24 -0700Engine • revision af42b6dc95Tools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282</code></pre><p>執行 <code>flutter upgrade</code> 指令更新 Flutter：</p><pre><code class="shell">$ flutter upgradeUpgrading Flutter from D:\dev\flutter......Flutter 0.7.3 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 3b309bda07 (3 weeks ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.1.0.flutter-ccb16f7282Running flutter doctor...Doctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.8.2, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] VS Code (version 1.27.2)[!] Connected devices    ! No devices available! Doctor found issues in 1 category.</code></pre><p>在執行一次 <code>flutter --version</code> 確認已更新至新的版本：</p><pre><code class="shell">$ flutter --versionFlutter 0.8.2 • channel beta • https://github.com/flutter/flutter.gitFramework • revision 5ab9e70727 (13 days ago) • 2018-09-07 12:33:05 -0700Engine • revision 58a1894a1cTools • Dart 2.1.0-dev.3.1.flutter-760a9690c2</code></pre><h2 id="flutter-doctor"><a href="#flutter-doctor" class="headerlink" title="flutter doctor"></a>flutter doctor</h2><p>下面指令是用來查看是否需要安裝任何依賴才能完成設定，因此他會檢查你的環境並顯示檢查報告：</p><pre><code class="shell">$ flutter doctor</code></pre><p>Dart SDK is bundled with Flutter，不用另外安裝 Dart。從檢查報告的輸出中可以了解需要安裝的其他軟體或執行的其他任務 (以粗體顯示)。例如：</p><pre><code class="shell">$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.228], locale zh-TW)[!] Android toolchain - develop for Android devices (Android SDK 28.0.2)    X Android license status unknown.[√] Android Studio (version 3.1)    X Flutter plugin not installed; this adds Flutter specific functionality.    X Dart plugin not installed; this adds Dart specific functionality.[!] Connected devices    ! No devices available! Doctor found issues in 2 categories.</code></pre><p>下面會介紹如何執行這些任務並完成設定過程。可再次執行 <code>flutter doctor</code> 指令來驗證是否已正確設定所有內容。</p><p>如果已驗證設定所有內容，就會看到下面輸出結果：</p><pre><code class="shell">$ flutter doctorDoctor summary (to see all details, run flutter doctor -v):[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)[√] Android Studio (version 3.1)[√] Connected devices (1 available)• No issues found!</code></pre><p>加上參數 <code>-v</code>，可以看更詳細的驗證說明：</p><pre><code class="shell">$ flutter doctor -v[√] Flutter (Channel beta, v0.7.3, on Microsoft Windows [Version 10.0.17134.285], locale zh-TW)    • Flutter version 0.7.3 at D:\dev\flutter    • Framework revision 3b309bda07 (3 weeks ago), 2018-08-28 12:39:24 -0700    • Engine revision af42b6dc95    • Dart version 2.1.0-dev.1.0.flutter-ccb16f7282[√] Android toolchain - develop for Android devices (Android SDK 28.0.2)    • Android SDK at C:\Users\Titan\AppData\Local\Android\sdk    • Android NDK location not configured (optional; useful for native profiling support)    • Platform android-28, build-tools 28.0.2    • ANDROID_HOME = C:\Users\Titan\AppData\Local\Android\sdk    • Java binary at: C:\Program Files\Android\Android Studio\jre\bin\java    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)    • All Android licenses accepted.[√] Android Studio (version 3.1)    • Android Studio at C:\Program Files\Android\Android Studio    • Flutter plugin version 28.0.1    • Dart plugin version 173.4700    • Java version OpenJDK Runtime Environment (build 1.8.0_152-release-1024-b02)[√] Connected devices (1 available)    • SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)• No issues found!</code></pre><h2 id="Android-設定"><a href="#Android-設定" class="headerlink" title="Android 設定"></a>Android 設定</h2><p>:::info<br>Flutter 依賴於 Android Studio 以提供 Android 平台的依賴性。但也可以使用其他編輯器來寫 Flutter App。<br>:::</p><h3 id="安裝-Java-JDK"><a href="#安裝-Java-JDK" class="headerlink" title="安裝 Java JDK"></a>安裝 Java JDK</h3><ol><li>安裝 <a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="noopener">JDK</a></li><li>將 Java JDK 安裝目錄設定為 <code>JAVA_HOME</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151</code> )，並在將 Java JDK 安裝目錄內的 <code>bin</code> 資料夾設定為 <code>Path</code> 環境變數 (e.g. <code>C:\Program Files\Java\jdk1.8.0_151\bin</code>，也可設定為 <code>%JAVA_HOME%\bin</code> )</li></ol><h3 id="安裝-Android-Studio"><a href="#安裝-Android-Studio" class="headerlink" title="安裝 Android Studio"></a>安裝 Android Studio</h3><ol><li>安裝 <a href="https://developer.android.com/studio/" target="_blank" rel="noopener">Android Studio</a>，請安裝 Recommended (建議) 版</li><li>執行 Android Studio，並瀏覽 <code>Android Studio Setup Wizard</code>，安裝最新的 Android SDK、Android SDK Platform-Tools、Android SDK Build-Tools，這些都是 Flutter 在開發 Android 時所必須的。</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-10-14.png" alt=""></p><ol start="3"><li>將 Android SDK 目錄設定為 <code>ANDROID_HOME</code> 環境變數 (預設目錄為 <code>C:\Users\Titan\AppData\Local\Android\sdk</code> )</li><li>定期更新 Android SDK (於 <code>Android Studio</code> &gt; <code>Configure</code> &gt; <code>SDK Manager</code> 安裝)</li></ol><h3 id="設定你的-Android-裝置"><a href="#設定你的-Android-裝置" class="headerlink" title="設定你的 Android 裝置"></a>設定你的 Android 裝置</h3><p>想在 Android 裝置上執行和測試 Flutter App，需要 Android 4.1 (API level 16) 或更高版本的 Android 設備。</p><ol><li>裝置請開啟 <code>開發者模式</code> 內的 <code>USB 偵錯</code>，詳情可參考 <a href="https://developer.android.com/studio/debug/dev-options" target="_blank" rel="noopener">Configure on-device developer options  |  Android Developers</a> 此 Android 官方文件</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-10-23.png" alt=""></p><ol start="2"><li>安裝 <a href="https://developer.android.com/studio/run/win-usb" target="_blank" rel="noopener">Google USB Driver</a> (限 Windows)</li><li>使用 USB 線將裝置連接至電腦，如果你的裝置有出現提示，請授權你的電腦可訪問你的裝置</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-10-36.png" alt=""></p><ol start="4"><li>開啟終端機，執行 <code>flutter devices</code> 指令以驗證 Flutter 是否成功連結 Android 裝置</li></ol><pre><code class="shell"># 像我連接到 Note 8$ flutter devices1 connected device:SM N950F • 988a98444d********** • android-arm64 • Android 8.0.0 (API 26)</code></pre><p>Flutter 預設會以 <code>adb</code> 工具基於的 Android SDK 版本來使用，若想用其他版本的 Android SDK，可設定你所需的 Android SDK 目錄為 <code>ANDROID_HOME</code> 環境變數。</p><p>如果執行 <code>flutter run</code>指令，而且成功將 App 安置手機並執行，就會看到 App 的畫面</p><p><img src="flutter-install-on-windows/2018-10-23-07-10-45.png" alt=""></p><h3 id="設定-Android-模擬器-emulator"><a href="#設定-Android-模擬器-emulator" class="headerlink" title="設定 Android 模擬器 (emulator)"></a>設定 Android 模擬器 (emulator)</h3><p>想在 Android 模擬器上執行和測試 Flutter App，請依照下面步驟：</p><ol><li>在主機上啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">VM acceleration</a></li><li>啟動 <strong>Android Studio</strong> &gt; <strong>Tools</strong> &gt; <strong>AVD Manager</strong> 並點選 <strong>Create Virtual Device</strong></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-10-55.png" alt=""></p><p><img src="flutter-install-on-windows/2018-10-23-07-11-05.png" alt=""></p><ol><li>選擇設備定義，然後點擇 <strong>Next</strong></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-11-14.png" alt=""></p><ol start="2"><li>選擇你所需的 Android 版本的 OS image，然後點選 <strong>Next</strong> (建議選擇 <em>x86</em> 或 x86_64 image)</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-11-23.png" alt=""></p><ol start="3"><li>在 Emulated Performance 欄位請選擇 <strong>Hardware - GLES 2.0</strong> 以啟用 <a href="https://developer.android.com/studio/run/emulator-acceleration" target="_blank" rel="noopener">hardware acceleration</a></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-11-38.png" alt=""></p><ol start="4"><li>驗證 AVD 設定是否正確，若確定請點選 <strong>Finish</strong></li><li>在 Android Virtual Device Manager 中，選擇某台模擬器並點擊 Run</li></ol><p><img src="https://i.imgur.com/59VlIiY.png" alt=""></p><p>有關上述步驟的詳情可參考 <a href="https://developer.android.com/studio/run/managing-avds.html" target="_blank" rel="noopener">Managing AVDs</a></p><h2 id="設定編輯器"><a href="#設定編輯器" class="headerlink" title="設定編輯器"></a>設定編輯器</h2><h3 id="設定-Android-Studio"><a href="#設定-Android-Studio" class="headerlink" title="設定 Android Studio"></a>設定 Android Studio</h3><p>安裝 Flutter 和 Dart plugins (外掛)，有兩個 plugin 支援 Flutter：</p><ul><li><code>Flutter</code> 外掛：支持 Flutter 開發人員工作流程 (running, debugging, hot reload … 等)</li><li><code>Dart</code> 外掛：提供程式碼分析 (輸入時的程式碼驗證、程式碼自動補全)</li></ul><p>安裝步驟：</p><ol><li>執行 Android Studio</li><li>開啟外掛選項 (<strong>File</strong> &gt; <strong>Settings</strong> &gt; <strong>Plugins</strong>)</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-14-00.png" alt=""></p><ol start="3"><li>點選 <strong>Browse repositories…</strong>，接著搜尋 <code>Flutter</code> 並選擇並安裝名為 <code>Flutter</code> 的 plugin (請注意，安裝 <code>Flutter</code> 外掛時會同時安裝 <code>Dart</code> 語言外掛)</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-14-06.png" alt=""></p><p><img src="flutter-install-on-windows/2018-10-23-07-14-13.png" alt=""></p><ol start="4"><li>點擊 <strong>Restart Android Studio</strong></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-14-20.png" alt=""></p><h3 id="設定-VS-Code"><a href="#設定-VS-Code" class="headerlink" title="設定 VS Code"></a>設定 VS Code</h3><ul><li>安裝 Flutter plugin：<ul><li>安裝 <a href="https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter" target="_blank" rel="noopener">Flutter</a> 此擴充功能，並重啟 VS Code。</li></ul></li></ul><p><img src="flutter-install-on-windows/2018-10-23-07-14-30.png" alt=""></p><ul><li>使用 Flutter Doctor 驗證你的設定環境：<ul><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: Run Flutter Doctor</strong> 即可至 <strong>OUTPUT (輸出)</strong> 查看驗證結果。</li></ul></li></ul><p><img src="flutter-install-on-windows/2018-10-23-07-14-39.png" alt=""></p><h1 id="入門"><a href="#入門" class="headerlink" title="入門"></a>入門</h1><h2 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h2><h3 id="建立新-app"><a href="#建立新-app" class="headerlink" title="建立新 app"></a>建立新 app</h3><p>在 Android Studio 中建立 Flutter 專案 ( <strong>File</strong> &gt; <strong>New</strong> &gt; <strong>New Flutter Project…</strong> )</p><p><img src="flutter-install-on-windows/2018-10-23-07-15-04.png" alt=""></p><p>接著選擇 <strong>Flutter Application</strong>，並點選 <strong>Next</strong></p><p><img src="flutter-install-on-windows/2018-10-23-07-15-10.png" alt=""></p><p>請設定專案名稱、確定 Flutter SDK 目錄、設定專案儲存位置與填寫專案的簡單描述後，點選 <strong>Next</strong></p><p><img src="flutter-install-on-windows/2018-10-23-07-15-17.png" alt=""></p><p>最後輸入公司網域 (e.g. example.com) 後，點選 <strong>Finish</strong> 即可建立新的 Flutter 專案</p><p><img src="flutter-install-on-windows/2018-10-23-07-15-23.png" alt=""></p><h3 id="執行-app"><a href="#執行-app" class="headerlink" title="執行 app"></a>執行 app</h3><p>下圖為 Android Studio 的工具列：</p><p><img src="flutter-install-on-windows/2018-10-23-07-15-29.png" alt=""></p><p>圖片來源：<a href="https://flutter.io/get-started/test-drive/#androidstudio" target="_blank" rel="noopener">Get Started: Test Drive | Flutter</a></p><ol><li>在 <strong>target selector</strong> 中，選擇已執行的 Android 裝置，若當前未啟動或未連接任何 Android 裝置，選擇某一模擬器時，Android Studio 就會開啟該選擇的模擬器。如果沒有可用的裝置，可至前面介紹的 <a href="#設定-Android-模擬器-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</li><li>點擊 <strong>Run</strong> 圖示執行 app</li><li>稍後就會在模擬器或裝置上看到下圖的 app 畫面<ol><li>等待的過程中會初始化 gradle</li><li>gradle 會 resolve dependencies</li><li>將專案轉成 apk</li><li>將 apk 安裝並執行於裝置上</li></ol></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-15-41.png" alt=""></p><pre><code class="shell">Launching lib\main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle...Resolving dependencies...Running &#39;gradlew assembleDebug&#39;...Built build\app\outputs\apk\debug\app-debug.apk.Installing build\app\outputs\apk\app.apk...D/OpenGLRenderer( 4777): HWUI GL PipelineI/OpenGLRenderer( 4777): Initialized EGL, version 1.4D/OpenGLRenderer( 4777): Swap behavior 1D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e5b00, tid 4831W/OpenGLRenderer( 4777): Failed to choose config with EGL_SWAP_BEHAVIOR_PRESERVED, retrying without...D/OpenGLRenderer( 4777): Swap behavior 0D/EGL_emulation( 4777): eglCreateContext: 0x7073cf2a7600: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/EGL_emulation( 4777): eglCreateContext: 0x7073cf3b10a0: maj 2 min 0 rcv 2D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c2fe87c0)Syncing files to device Android SDK built for x86 64...D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf2a7600: ver 2 0 (tinfo 0x7073b4be9300)D/        ( 4777): HostConnection::get() New Host Connection established 0x7073cf2e65e0, tid 4813D/EGL_emulation( 4777): eglMakeCurrent: 0x7073cf3b10a0: ver 2 0 (tinfo 0x7073c560d6c0)</code></pre><h3 id="嘗試-hot-reload"><a href="#嘗試-hot-reload" class="headerlink" title="嘗試 hot reload"></a>嘗試 hot reload</h3><p>修改一些內容並儲存，app 就會自動做 hot reload，就會很快地看到最新的更新。</p><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="建立新-app-1"><a href="#建立新-app-1" class="headerlink" title="建立新 app"></a>建立新 app</h3><ol><li>按 <code>F1</code> 或 <code>ctrl + shift + p</code> 後，輸入 <strong>Flutter</strong> 並點選 <strong>Flutter: New Project</strong></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-15-50.png" alt=""></p><ol start="2"><li>輸入專案名稱後，按 <code>enter</code> 鍵</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-15-56.png" alt=""></p><ol start="3"><li>選擇專案目錄的儲存位置</li><li>等待專案建立完成，並在畫面顯示 <code>lib/main.dart</code> 檔案</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-16-01.png" alt=""></p><h3 id="執行-app-1"><a href="#執行-app-1" class="headerlink" title="執行 app"></a>執行 app</h3><ol><li><p>從 VS Code 底部的藍色狀態欄中點選 <strong>Device Selector</strong></p><ul><li><p>若要使用實體裝置，詳情至 <a href="#%E8%A8%AD%E5%AE%9A%E4%BD%A0%E7%9A%84-Android-%E8%A3%9D%E7%BD%AE">設定你的 Android 裝置</a> 參考。若連結成功會在 VS Code 底部的藍色狀態欄中看到你的裝置名稱</p><p><img src="flutter-install-on-windows/2018-10-23-07-16-14.png" alt=""></p></li><li><p>如果沒有可用的裝置，請點選 <strong>No Devices</strong> 並啟動模擬器</p><p><img src="flutter-install-on-windows/2018-10-23-07-16-34.png" alt=""></p><p><img src="flutter-install-on-windows/2018-10-23-07-16-41.png" alt=""></p></li></ul></li><li>執行 <strong>Debug</strong></li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-16-46.png" alt=""></p><ol start="3"><li>等待 App 執行，可在偵錯主控台 (Debug Console) 看到執行進度，稍後就會在模擬器或裝置上看到下圖的 app 畫面</li></ol><p><img src="flutter-install-on-windows/2018-10-23-07-16-52.png" alt=""></p><h2 id="Terminal-editor"><a href="#Terminal-editor" class="headerlink" title="Terminal + editor"></a>Terminal + editor</h2><h3 id="建立新-app-2"><a href="#建立新-app-2" class="headerlink" title="建立新 app"></a>建立新 app</h3><p>使用 <code>flutter create</code> 指令來建立 Flutter 專案，裡面包含 <a href="https://material.io/design/" target="_blank" rel="noopener">Material Components</a> 的範例 app。app 的程式碼在 <code>lib/main.dart</code>。</p><pre><code class="shell">$ flutter create &lt;prject-name&gt;$ cd &lt;prject-name&gt;</code></pre><h3 id="執行-app-2"><a href="#執行-app-2" class="headerlink" title="執行 app"></a>執行 app</h3><p>使用 <code>flutter devices</code> 指令可檢查是否有正在執行的模擬器或裝置。如果沒有可用的裝置，可至前面介紹的 <a href="#設定-Android-模擬器-emulator">設定 Android 模擬器</a> 段落來新建模擬器。</p><pre><code class="shell">$ flutter devices1 connected device:Android SDK built for x86 64 • emulator-5554 • android-x64 • Android 8.0.0 (API 26) (emulator)</code></pre><p>使用 <code>flutter run</code> 指令可執行 app，並提供以下功能的快速鍵：</p><ul><li><code>r</code>：hot reload</li><li><code>R</code>：hot restart (and rebuild state)</li><li><code>h</code>：顯示更多幫助訊息</li><li><code>q</code>：停止執行</li></ul><pre><code class="shell">$ flutter runUsing hardware rendering with device Android SDK built for x86 64. If you get graphics artifacts, consider enabling software rendering with &quot;--enable-software-rendering&quot;.Launching lib/main.dart on Android SDK built for x86 64 in debug mode...Initializing gradle...                                       1.7sResolving dependencies...                                   48.1sRunning &#39;gradlew assembleDebug&#39;...                          88.5sBuilt build\app\outputs\apk\debug\app-debug.apk.Installing build\app\outputs\apk\app.apk...                 11.4sSyncing files to device Android SDK built for x86 64...D/        ( 5458): HostConnection::get() New Host Connection established 0x7073c31aabe0, tid 5513D/EGL_emulation( 5458): eglMakeCurrent: 0x7073cf3b1280: ver 2 0 (tinfo 0x7073c2ab65c0)                                       12.3s🔥  To hot reload changes while running, press &quot;r&quot;. To hot restart (and rebuild state), press &quot;R&quot;.An Observatory debugger and profiler on Android SDK built for x86 64 is available at: http://127.0.0.1:2158/For a more detailed help message, press &quot;h&quot;. To quit, press &quot;q&quot;.</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;flutter-install-on-windows/flutter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;最近剛接觸 Flutter，於是就把在 Windows 上建置環境的記錄寫成一篇筆記，裡面包括 Android Studio 和 VS Code 的開發流程。&lt;/p&gt;
    
    </summary>
    
      <category term="Native App" scheme="https://titangene.github.io/categories/native-app/"/>
    
    
      <category term="Flutter" scheme="https://titangene.github.io/tags/flutter/"/>
    
      <category term="Dart" scheme="https://titangene.github.io/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 加入 Disqus 討論區</title>
    <link href="https://titangene.github.io/article/hexo-disqus.html"/>
    <id>https://titangene.github.io/article/hexo-disqus.html</id>
    <published>2018-10-22T14:40:00.000Z</published>
    <updated>2018-10-22T22:08:31.818Z</updated>
    
    <content type="html"><![CDATA[<p>接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。</p><a id="more"></a><h2 id="建立-Disqus"><a href="#建立-Disqus" class="headerlink" title="建立 Disqus"></a>建立 Disqus</h2><p>至 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 首頁註冊帳號後並登入，接著點擊首頁的「GET STARTED」</p><p><img src="hexo-disqus/disqus-home-page.png" alt=""></p><p>選擇「I want to install Disqus on my site」選項</p><p><img src="hexo-disqus/disqus-on-my-site.png" alt=""></p><ul><li>Websit Name：自訂 short name，且是唯一，像我是設定 titangene-blog。short name 會在設定 Hexo 時需要</li><li>Category：類別，自行選擇</li><li>Language：語言，自行選擇</li></ul><p>填寫後點擊「Create Site」</p><p><img src="hexo-disqus/disqus-create-a-new-site.png" alt=""></p><h2 id="設定-Hexo"><a href="#設定-Hexo" class="headerlink" title="設定 Hexo"></a>設定 Hexo</h2><p>在根目錄內的 <code>_config.yml</code> 內設定：</p><pre><code class="yaml">disqus_shortname: your_disqus_short_name</code></pre><p>設定後就可以看到每篇文章下面都可以留言囉！</p><p><img src="hexo-disqus/disqus-hexo.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接續從零建置 Github Page + Hexo blog，這次來研究如何在 Hexo 加入 Disqus 討論區。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://titangene.github.io/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="https://titangene.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
