<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Titangene Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://titangene.github.io/"/>
  <updated>2019-09-19T13:02:33.591Z</updated>
  <id>https://titangene.github.io/</id>
  
  <author>
    <name>Titangene</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重新認識 CSS - CSS Selector (3)</title>
    <link href="https://titangene.github.io/article/css-selector-3.html"/>
    <id>https://titangene.github.io/article/css-selector-3.html</id>
    <published>2019-09-19T08:20:52.000Z</published>
    <updated>2019-09-19T13:02:33.591Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/css.png" alt=""></p><p>Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。本篇會介紹 pseudo-class (偽類)。</p><a id="more"></a><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><blockquote><p>「重新認識 CSS」這個系列名稱的由來就如其名，我想要重新認識它。雖然以前就有學過 CSS，但這次想從 CSS Spec 中學到最原始的定義和內容，更加了解 CSS 的原理，讓我在切版的時候可以更加確定自己在做什麼，我踩到的雷只是因為我不夠了解它才會炸開。</p><p>在這 30 天的內容中，會將 Spec 內看到的資料整理成這個系列，也希望正在學 CSS 的各位可以更加了解它。另外我也會同時將文章發至我的 Blog，如果想直接看文內的程式碼 Demo 畫面，可以到我的 Blog 來看 😃。</p><p>本文同步發表於 iT 邦幫忙：<a href="https://ithelp.ithome.com.tw/articles/10217730" target="_blank" rel="noopener">重新認識 CSS - CSS Selector (3)</a></p><p>「重新認識 CSS」系列文章發文於：</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20117586/ironman/2617" target="_blank" rel="noopener">iT 邦幫忙</a></li><li><a href="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/">Titangene Blog</a></li></ul></blockquote><h2 id="pseudo-classes"><a class="header-anchor" href="#pseudo-classes"></a>Pseudo-classes</h2><p>pseudo-class 是以 <code>:</code> 為開頭，後面接著 pseudo-class 的名稱，有些會在後面加上括號 <code>()</code>，並在括號之間加上值。例如：<code>:nth-child(2)</code>。</p><div class="warning"><p>注意：</p><ul><li>pseudo-class 和 pseudo-element 不相同</li><li>pseudo-class 是以 <code>:</code> 為開頭</li><li>pseudo-element 是以 <code>::</code> 為開頭，但也可以以 <code>:</code> 為開頭，因為在舊版的 W3C Spec 中沒有將 pseudo-class 和 pseudo-element 區分成 <code>:</code> 和 <code>::</code>。如果你寫 pseudo-element 是用 <code>:</code>，大部份瀏覽器也還是會支援這種語法。</li></ul></div><h3 id="dynamic-pseudo-classes"><a class="header-anchor" href="#dynamic-pseudo-classes"></a>Dynamic pseudo-classes</h3><p>Dynamic pseudo-classes 不會出現在 document source 或 document tree 中。</p><p>Dynamic pseudo-classes 又分為：</p><ul><li>link pseudo-classes：<code>:link</code> 和 <code>:visited</code></li><li>user action pseudo-classes：<code>:hover</code>、<code>:active</code> 和 <code>:focus</code></li></ul><h4 id="the-link-pseudo-classes：-link-和-visited"><a class="header-anchor" href="#the-link-pseudo-classes：-link-和-visited"></a>The link pseudo-classes：<code>:link</code> 和 <code>:visited</code></h4><p><a href="https://www.w3.org/TR/CSS22/conform.html#user-agent" target="_blank" rel="noopener">UA</a> (User agent，對 HTML 來說就是瀏覽器) 以不同的方式來顯示連結是否已訪問：</p><ul><li><code>:link</code>：未訪問過的連結</li><li><code>:visited</code>：已訪問過的連結</li></ul><p>不過，過了一段時間之後，UA 可以將已訪問的連結從 <code>:visited</code> 變回 <code>:link</code> 的狀態。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io"</span>&gt;</span>Titangene Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io/article/css-selector-3.html"</span>&gt;</span>重新認識 CSS - CSS Selector (3)<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:visited</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/jONejbv" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-3/2019-09-19-16-40-27.png" alt=""></p><iframe height="215" style="width:100%" scrolling="no" title="link pseudo-class: :visited &amp; :link" src="https://codepen.io/titangene/embed/jONejbv/?height=215&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/jONejbv/" target="_blank" rel="noopener">link pseudo-class: :visited &amp; :link</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h4 id="the-user-action-pseudo-classes：-hover-active-和-focus"><a class="header-anchor" href="#the-user-action-pseudo-classes：-hover-active-和-focus"></a>The user action pseudo-classes：<code>:hover</code>、<code>:active</code> 和 <code>:focus</code></h4><p>用於 response 使用者的操作：</p><ul><li><code>:hover</code>：<ul><li>當 cursor (滑鼠指標) hover 在元素上時，visual UA 就可以應用此 pseudo-class</li><li>不支援 <a href="https://www.w3.org/TR/CSS22/media.html#media-groups" target="_blank" rel="noopener">互動式 media</a> 的 UA 不用支援此 pseudo-class</li></ul></li><li><code>:active</code>：<ul><li>在使用者按下滑鼠按鈕並放開它之間的時間會應用此 pseudo-class</li><li>如果滑鼠上有多個按鈕時，<code>:active</code> 只適用於主要或主要 actived 的按鈕 (通常為滑鼠左鍵) …等</li></ul></li><li><code>:focus</code>：當元素有焦點時會應用此 pseudo-class，例如：按鍵盤的 Tab 鍵所選到的元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io"</span>&gt;</span>Titangene Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io/article/css-selector-3.html"</span>&gt;</span>重新認識 CSS - CSS Selector (3)<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123; <span class="hljs-attribute">color</span>: black; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">color</span>: purple; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/YzKJobe" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-3/user-action-pseudo-class.gif" alt=""></p><iframe height="227" style="width:100%" scrolling="no" title="user action pseudo-class" src="https://codepen.io/titangene/embed/YzKJobe/?height=227&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/YzKJobe/" target="_blank" rel="noopener">user action pseudo-class</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>也可以一次使用多個 dynamic pseudo-class，如下範例：</p><ul><li>同時有 <code>:focus</code> 和 <code>:hover</code> 的狀態</li><li>同時有 <code>:link</code> 和 <code>:active</code> 的狀態</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:focus</span><span class="hljs-selector-pseudo">:hover</span> &#123; <span class="hljs-attribute">color</span>: teal; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:link</span><span class="hljs-selector-pseudo">:active</span> &#123; <span class="hljs-attribute">color</span>: fuchsia; &#125;<br></code></pre></td></tr></table></figure><h3 id="the-target-pseudo-classes：-target"><a class="header-anchor" href="#the-target-pseudo-classes：-target"></a>The target pseudo-classes：<code>:target</code></h3><p>有些 URI 的最後會以 <code>#</code> (number sign) 為結尾，後面會接著 anchor identifier (也稱為 fragment identifier)，代表該 URI 是指向資源中的某個位置。通常帶有 fragment identifier 的 URL 會 link 到文件中的某些元素，該元素被稱為 target 元素。</p><p>例如：在下面的 HTML 文件中有名為 <code>hello</code> 的 anchor (錨點) (也就是 <code>&lt;a href=&quot;#hello&quot;&gt;Hello&lt;/a&gt;</code> 這個連結)：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"#hello"</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"hello"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>Target<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#hello</span><span class="hljs-selector-pseudo">:target</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/jONegME" target="_blank" rel="noopener">Codepen 連結</a></p><p>如果此 HTML 的 URL 為：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">https://s.codepen.io/titangene/debug/jONegME/vWkRwRNmBvOM<br></code></pre></td></tr></table></figure><p>在還沒點擊 <code>#hello</code> 錨點時，畫面如下：</p><p><img src="../images/css-selector-3/2019-09-19-18-59-06.png" alt=""></p><p>只要點擊 <code>#hello</code> 錨點後，下面的 “Target” 文字就會變成紅色 (也就是會應用 <code>#hello:target</code> 的樣式)，畫面如下：</p><p><img src="../images/css-selector-3/2019-09-19-18-59-29.png" alt=""></p><p>並且 URL 的最後會加上 <code>#hello</code>，而 <code>#hello</code> 就是 fragment identifier。</p><p>剛剛點擊的錨點會 link 到 target 元素，而 target 元素就是 <code>&lt;div id=&quot;hello&quot;&gt;</code>，所以 selector 才會 match 到 <code>#hello:target</code>。</p><iframe height="227" style="width:100%" scrolling="no" title="target pseudo-classes :target" src="https://codepen.io/titangene/embed/jONegME/?height=227&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/jONegME/" target="_blank" rel="noopener">target pseudo-classes :target</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>在 <a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/:target#Creating_a_pure_CSS_lightbox" target="_blank" rel="noopener">MDN</a> 有一個範例也蠻有趣的，可以用 <code>:target</code> pseudo-class 來實作 lightbox：</p><p><img src="../images/css-selector-3/lightbox.gif" alt=""></p><p>運作原理是用 <code>display: none</code> 和 <code>display: block</code> 來控制 lightbox 是否開啟，觸發的機制就是用剛剛介紹的 <code>:target</code> pseudo-class 來做的。</p><blockquote><p>這個範例很有趣，以前用 JavaScript 才能做到的事情，沒想到也能用純 CSS 來實作出來。</p></blockquote><h3 id="ui-element-states-pseudo-classes"><a class="header-anchor" href="#ui-element-states-pseudo-classes"></a>UI element states pseudo-classes</h3><p>分為：</p><ul><li><code>:enabled</code>：處於啟用狀態的 UI 元素</li><li><code>:disabled</code>：處於禁用狀態的 UI 元素</li><li><code>:checked</code>：選取 radio 或勾選 checkbox 元素時會應用</li></ul><h4 id="enabled-disabled-pseudo-class"><a class="header-anchor" href="#enabled-disabled-pseudo-class"></a><code>:enabled</code> &amp; <code>:disabled</code> pseudo-class</h4><p>直接看範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"enabledField"</span>&gt;</span>enabled field:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"enabledField"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Lorem"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"disabledField"</span>&gt;</span>disabled field:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"disabledField"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Lorem"</span> <span class="hljs-attr">disabled</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"enabledCheckbox"</span>&gt;</span>enabled checkbox:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"enabledCheckbox"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"disabledCheckbox"</span>&gt;</span>disabled checkbox:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"disabledCheckbox"</span> <span class="hljs-attr">disabled</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"button"</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"Submit"</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:enabled</span> &#123; <span class="hljs-attribute">outline</span>: <span class="hljs-number">3px</span> solid red; &#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:disabled</span> &#123; <span class="hljs-attribute">outline</span>: <span class="hljs-number">3px</span> solid blue; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/qBWQBEd" target="_blank" rel="noopener">Codepen 連結</a></p><p>只要被加上 <code>disabled</code> 屬性的 <code>input</code> 元素都代表該元素處於禁用狀態，所以這些元素就會套用 <code>input:disabled</code> 此 selector 的樣式。其餘的元素則會套用 <code>input:enabled</code> 此 selector 的樣式。</p><p><img src="../images/css-selector-3/2019-09-19-19-37-25.png" alt=""></p><div class="info"><p>不過要注意的事元素有無啟用，跟一些會影響使用者互動 UI 元素的 CSS 屬性沒關係，這些都不會影響 selector 是否 match 到 <code>:enabled</code> 或 <code>:disabled</code>。</p><p>例如：<code>display</code> 和 <code>visibility</code> 屬性都會讓元素在畫面上消失，但是都不會影響到啟用或禁用的狀態。</p><ul><li><code>display: none</code> 不會讓元素出現在 <a href="https://www.w3.org/TR/CSS22/intro.html#formatting-structure" target="_blank" rel="noopener">formatting structure</a> 中，很像不在畫面上，會完全消失</li><li><code>visibility: hidden</code> 生成的 box 是看不見的，完全透明，不會 draw 任何內容，但會影響佈局，也就是會在畫面上佔用空間，但會看不到元素的樣子</li></ul></div><iframe height="299" style="width:100%" scrolling="no" title=":enabled and :disabled pseudo-classes" src="https://codepen.io/titangene/embed/qBWQBEd/?height=299&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/qBWQBEd/" target="_blank" rel="noopener">:enabled and :disabled pseudo-classes</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h4 id="checked-pseudo-class"><a class="header-anchor" href="#checked-pseudo-class"></a><code>:checked</code> pseudo-class</h4><p>直接看範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"firstCheckbox"</span> <span class="hljs-attr">checked</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"firstCheckbox"</span>&gt;</span>First checkbox<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"secondCheckbox"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"secondCheckbox"</span>&gt;</span>Second checkbox<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"firstRadio"</span> <span class="hljs-attr">checked</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"firstRadio"</span>&gt;</span>First radio<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"radio"</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"secondRadio"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">"secondRadio"</span>&gt;</span>Second radio<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">input</span> + <span class="hljs-selector-tag">label</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">input</span><span class="hljs-selector-pseudo">:checked</span> + <span class="hljs-selector-tag">label</span> &#123; <span class="hljs-attribute">color</span>: blue; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/vYBQYrW" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-3/2019-09-19-20-02-40.png" alt=""></p><iframe height="280" style="width:100%" scrolling="no" title=":checked pseudo-class" src="https://codepen.io/titangene/embed/vYBQYrW/?height=280&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/vYBQYrW/" target="_blank" rel="noopener">:checked pseudo-class</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="最後"><a class="header-anchor" href="#最後"></a>最後</h2><p>今天介紹一些 pseudo-class，接下來幾天會接續介紹其他 selector。</p><p>資料來源：</p><ul><li><a href="https://www.w3.org/TR/CSS22/selector.html" target="_blank" rel="noopener">CSS 2.2 Specification - Selectors</a></li><li><a href="https://www.w3.org/TR/selectors-3/" target="_blank" rel="noopener">Selectors Level 3</a></li><li><a href="https://www.w3.org/TR/selectors-4/" target="_blank" rel="noopener">Selectors Level 4</a></li><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/:target" target="_blank" rel="noopener">:target - CSS | MDN</a></li></ul><blockquote><p>About MDN by Mozilla Contributors is licensed under CC-BY-SA 2.5</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/css.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。本篇會介紹 pseudo-class (偽類)。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://titangene.github.io/categories/css/"/>
    
    
      <category term="IT 鐵人賽" scheme="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>重新認識 CSS - CSS Selector (2)</title>
    <link href="https://titangene.github.io/article/css-selector-2.html"/>
    <id>https://titangene.github.io/article/css-selector-2.html</id>
    <published>2019-09-18T08:20:52.000Z</published>
    <updated>2019-09-18T09:02:52.683Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/css.png" alt=""></p><p>Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。本篇會介紹 attribute selector (屬性選擇器)。</p><a id="more"></a><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><blockquote><p>「重新認識 CSS」這個系列名稱的由來就如其名，我想要重新認識它。雖然以前就有學過 CSS，但這次想從 CSS Spec 中學到最原始的定義和內容，更加了解 CSS 的原理，讓我在切版的時候可以更加確定自己在做什麼，我踩到的雷只是因為我不夠了解它才會炸開。</p><p>在這 30 天的內容中，會將 Spec 內看到的資料整理成這個系列，也希望正在學 CSS 的各位可以更加了解它。另外我也會同時將文章發至我的 Blog，如果想直接看文內的程式碼 Demo 畫面，可以到我的 Blog 來看 😃。</p><p>本文同步發表於 iT 邦幫忙：<a href="https://ithelp.ithome.com.tw/articles/10217082" target="_blank" rel="noopener">重新認識 CSS - CSS Selector (2)</a></p><p>「重新認識 CSS」系列文章發文於：</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20117586/ironman/2617" target="_blank" rel="noopener">iT 邦幫忙</a></li><li><a href="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/">Titangene Blog</a></li></ul></blockquote><h2 id="attribute-selector"><a class="header-anchor" href="#attribute-selector"></a>Attribute selector</h2><p>Selector 允許表示元素的屬性。當 selector 作為 expression (表達式) 來 match 元素時，如果該元素具有與 attribute selector (屬性選擇器) 表示的屬性 match 的屬性，則必須將 attribute selector 視為與元素 match。</p><h3 id="attribute-presence-and-value-selector"><a class="header-anchor" href="#attribute-presence-and-value-selector"></a>Attribute presence and value selector</h3><p><a href="https://www.w3.org/TR/CSS22/selector.html#attribute-selectors" target="_blank" rel="noopener">CSS2</a> 引入了四個 attribute selector：</p><ul><li><code>[att]</code>：代表具有 <code>att</code> 屬性的元素，無論屬性的值為何</li><li><code>[att=val]</code>：代表具有 <code>att</code> 屬性的元素，且該屬性值為 <code>val</code></li><li><code>[att~=val]</code>：代表具有 <code>att</code> 屬性的元素，該屬性的值是以空格分隔的單詞列表，其中一個正好是 <code>val</code><ul><li>如果 <code>val</code> 包含空格，就不代表任何內容 (因為單字之間是用空格來分隔)</li><li>如果 <code>val</code> 是空字串，就不代表任何內容</li></ul></li><li><code>[att|=val]</code>：代表具有 <code>att</code> 屬性的元素，且該屬性值為 <code>val</code> 或以 <code>val</code> 為開頭，後面接著 <code>-</code> (也就是以 <code>val-</code> 為開頭)</li></ul><p>直接看範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Titan<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"hello"</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"titan"</span>&gt;</span>Titan<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"hello"</span>&gt;</span>Hello<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"titan"</span>&gt;</span>Titan<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight Titan<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"titan"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight Titan<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text text-primary text-bold"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-primary text"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"textPrimary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-primary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"alert-primary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-attr">[title="titan"]</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[title="titan"]</span><span class="hljs-selector-attr">[class="highlight"]</span> &#123; <span class="hljs-attribute">color</span>: blue; &#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[class~="text"]</span> &#123; <span class="hljs-attribute">color</span>: purple; &#125;<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-attr">[class|="text"]</span> &#123; <span class="hljs-attribute">color</span>: olive; &#125;<br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[class="alert"]</span>, <span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[class="alert-primary"]</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br></code></pre></td></tr></table></figure><ul><li><code>h1[title]</code>：帶有 <code>title</code> 屬性的 <code>h1</code> 元素</li><li><code>h2[title=&quot;titan&quot;]</code>：帶有 <code>title</code> 屬性的 <code>h2</code> 元素，並且該屬性值為 <code>titan</code></li><li><code>h1[title=&quot;titan&quot;][class=&quot;highlight&quot;]</code>：帶有 <code>title</code> 和 <code>class</code> 屬性的 <code>h1</code> 元素，並且 <code>title</code> 的屬性值為 <code>titan</code> 以及 <code>class</code> 屬性值為 <code>highlight</code></li><li><code>h1[class~=&quot;text&quot;]</code>：帶有 <code>class</code> 屬性的 <code>h1</code> 元素，並且該屬性值需包含 <code>text</code></li><li><code>h2[class|=&quot;text&quot;]</code>：帶有 <code>class</code> 屬性的 <code>h2</code> 元素，並且該屬性值為需為 <code>text</code> 或以 <code>text-</code> 為開頭</li><li><code>h1[class=&quot;alert&quot;], h1[class=&quot;alert-primary&quot;]</code>：帶有 <code>class</code> 屬性的 <code>h1</code> 元素，並且該屬性值為 <code>alert</code>，以及帶有 <code>class</code> 屬性的 <code>h1</code> 元素，並且該屬性值為 <code>alert-primary</code></li></ul><div class="info"><p>註：<code>[title=&quot;titan&quot;]</code> 中的 <code>title</code> 是屬性名稱，<code>titan</code> 是名為 <code>title</code> 的屬性值。</p></div><p>Demo：<a href="https://codepen.io/titangene/pen/MWgPyyG" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-2/attribute-presence-and-value-selector.png" alt=""></p><iframe height="590" style="width:100%" scrolling="no" title="Attribute presence and value selectors" src="https://codepen.io/titangene/embed/MWgPyyG/?height=590&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/MWgPyyG/" target="_blank" rel="noopener">Attribute presence and value selectors</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="substring-matching-attribute-selector"><a class="header-anchor" href="#substring-matching-attribute-selector"></a>Substring matching attribute selector</h3><p>在 <a href="https://www.w3.org/TR/selectors-3/#attribute-substrings" target="_blank" rel="noopener">Selectors Level 3</a> 提供了三個額外的 attribute selector，用於 match 屬性值中的子字串：</p><ul><li><code>[att^=val]</code>：代表具有 <code>att</code> 屬性的元素，該屬性值以 <code>val</code> 為開頭。如果 <code>val</code> 是空字串，則 selector 不代表任何內容</li><li><code>[att$=val]</code>：代表具有 <code>att</code> 屬性的元素，該屬性值以 <code>val</code> 為結尾。如果 <code>val</code> 是空字串，則 selector 不代表任何內容</li><li><code>[att*=val]</code>：代表具有 <code>att</code> 屬性的元素，該屬性值至少包含 <code>val</code> 這個子字串。如果 <code>val</code> 是空字串，則 selector 不代表任何內容</li></ul><p>直接看範例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"textPrimary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-primary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io/article/css-selector-2.html"</span>&gt;</span>重新認識 CSS - CSS Selector (2)<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io"</span>&gt;</span>Titangene Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-alert"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"myAlertPrimary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"my-alert-primary"</span>&gt;</span>Text<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-attr">[class^="text"]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[href$=".html"]</span> &#123; <span class="hljs-attribute">color</span>: gray; &#125;<br><span class="hljs-selector-tag">h2</span><span class="hljs-selector-attr">[class*="alert"]</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br></code></pre></td></tr></table></figure><ul><li><code>h2[class^=&quot;text&quot;]</code>：代表具有 <code>class</code> 屬性的元素，該屬性值以 <code>text</code> 為開頭</li><li><code>a[href$=&quot;.html&quot;]</code>：代表具有 <code>href</code> 屬性的元素，該屬性值以 <code>.html</code> 為結尾 (也就是該頁面為 <code>.html</code> 檔)</li><li><code>h2[class*=&quot;alert&quot;]</code>：代表具有 <code>class</code> 屬性的元素，該屬性值至少包含 <code>alert</code> 這個子字串</li></ul><p>Demo：<a href="https://codepen.io/titangene/pen/vYBVKEm" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-2/substring-matching-attribute-selector.png" alt=""></p><iframe height="383" style="width:100%" scrolling="no" title="Substring matching attribute selectors" src="https://codepen.io/titangene/embed/vYBVKEm/?height=383&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/vYBVKEm/" target="_blank" rel="noopener">Substring matching attribute selectors</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="最後"><a class="header-anchor" href="#最後"></a>最後</h2><p>今天介紹一些 attribute selector，接下來幾天會接續介紹其他 selector。</p><p>資料來源：</p><ul><li><a href="https://www.w3.org/TR/CSS22/selector.html" target="_blank" rel="noopener">CSS 2.2 Specification - Selectors</a></li><li><a href="https://www.w3.org/TR/selectors-3/" target="_blank" rel="noopener">Selectors Level 3</a></li><li><a href="https://www.w3.org/TR/selectors-4/" target="_blank" rel="noopener">Selectors Level 4</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/css.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。本篇會介紹 attribute selector (屬性選擇器)。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://titangene.github.io/categories/css/"/>
    
    
      <category term="IT 鐵人賽" scheme="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>重新認識 CSS - CSS Selector (1)</title>
    <link href="https://titangene.github.io/article/css-selector-1.html"/>
    <id>https://titangene.github.io/article/css-selector-1.html</id>
    <published>2019-09-17T10:20:52.000Z</published>
    <updated>2019-09-18T07:17:17.853Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/css.png" alt=""></p><p>Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。</p><a id="more"></a><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><blockquote><p>「重新認識 CSS」這個系列名稱的由來就如其名，我想要重新認識它。雖然以前就有學過 CSS，但這次想從 CSS Spec 中學到最原始的定義和內容，更加了解 CSS 的原理，讓我在切版的時候可以更加確定自己在做什麼，我踩到的雷只是因為我不夠了解它才會炸開。</p><p>在這 30 天的內容中，會將 Spec 內看到的資料整理成這個系列，也希望正在學 CSS 的各位可以更加了解它。另外我也會同時將文章發至我的 Blog，如果想直接看文內的程式碼 Demo 畫面，可以到我的 Blog 來看 😃。</p><p>本文同步發表於 iT 邦幫忙：<a href="https://ithelp.ithome.com.tw/articles/10216566" target="_blank" rel="noopener">重新認識 CSS - CSS Selector (1)</a></p><p>「重新認識 CSS」系列文章發文於：</p><ul><li><a href="https://ithelp.ithome.com.tw/users/20117586/ironman/2617" target="_blank" rel="noopener">iT 邦幫忙</a></li><li><a href="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/">Titangene Blog</a></li></ul></blockquote><h2 id="selector-語法"><a class="header-anchor" href="#selector-語法"></a>Selector 語法</h2><p>Selector 是由一個或多個 simple selector (簡單選擇器) 序列組合，並用 combinator 分隔的一串東西。</p><p>simple selector 序列：</p><ul><li>由多個 simple selector 組成，沒有被 combinator 分隔</li><li>以 type selector 或 universal selector 為開頭</li></ul><p>以下這些都是 simple selector：</p><ul><li>type selector：例如 <code>E</code></li><li>universal selector：例如 <code>*</code></li><li>attribute selector：例如 <code>E[foo]</code></li><li>class selector：例如 <code>.myclass</code></li><li>ID selector：例如 <code>#myid</code></li><li>pseudo-class：例如 <code>E:hover</code></li></ul><p>combinator 是 <code></code> (空白字元)、<code>&gt;</code>、<code>+</code>、<code>~</code>，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">E F &#123; color: red; &#125;<br>E &gt; F &#123; color: red; &#125;<br>E + F &#123; color: red; &#125;<br>E ~ F &#123; color: red; &#125;<br></code></pre></td></tr></table></figure><p>simple selector 與 combinator 之間可以加上空白，不加空白也可以。例如：下面兩個選擇器是相同的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">E &gt; F<br>E&gt;F<br></code></pre></td></tr></table></figure><p>不過，通常在之間都會加空白，因為可讀性較佳。</p><h2 id="groups-of-selector"><a class="header-anchor" href="#groups-of-selector"></a>Groups of selector</h2><p>當多個選擇器共享相同的宣告時，它們可以用逗號來分隔每個選擇器，每個選擇器都會選到 match 的所有元素，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>header 3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h2</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>等同於：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>, <span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/ExYevee" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-15-40-57.png" alt=""></p><p><img src="../images/css-selector-1/2019-09-17-15-41-34.png" alt=""></p><iframe height="244" style="width:100%" scrolling="no" title="Groups of selector" src="https://codepen.io/titangene/embed/ExYevee/?height=244&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/ExYevee/" target="_blank" rel="noopener">Groups of selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>不要要注意的是，上面兩個範例會有一樣的結果是因為所有選擇器都是有效的選擇器 (valid selector)。如果其中一個選擇器為無效時，就會讓整個選擇器群組都無效。不過，若將三個選擇器分開宣告時，就只有那一個會失效。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>header 3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h2</span>.<span class="hljs-selector-class">.foo</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>不等於：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span>, <span class="hljs-selector-tag">h2</span>.<span class="hljs-selector-class">.foo</span>, <span class="hljs-selector-tag">h3</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/gOYdxQP" target="_blank" rel="noopener">Codepen 連結</a></p><p>如下圖，因為上面其中的 <code>h2..foo</code> 是無效選擇器 (invalid selector)，所以會造成 <code>h1, h2..foo, h3</code> 完全無效，並且會刪除這個樣式規則：</p><p><img src="../images/css-selector-1/2019-09-17-15-37-08.png" alt=""></p><p>如果是分開宣告，就只會刪除 <code>h2..foo</code> 這個樣式規則，如下圖：</p><p><img src="../images/css-selector-1/2019-09-17-15-38-56.png" alt=""></p><iframe height="268" style="width:100%" scrolling="no" title="Groups of selector: valid selector" src="https://codepen.io/titangene/embed/gOYdxQP/?height=268&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/gOYdxQP/" target="_blank" rel="noopener">Groups of selector: valid selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="simple-selector"><a class="header-anchor" href="#simple-selector"></a>Simple selector</h2><p>以下這些都是 simple selector：</p><ul><li>type selector</li><li>universal selector</li><li>attribute selector</li><li>class selector</li><li>ID selector</li><li>pseudo-class</li></ul><h3 id="type-selector"><a class="header-anchor" href="#type-selector"></a>Type selector</h3><p>選到 HTML tag 名稱的元素，例如：match 所有 h1 元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/JjPaMpm" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-15-45-55.png" alt=""></p><iframe height="265" style="width:100%" scrolling="no" title="type selector" src="https://codepen.io/titangene/embed/JjPaMpm/?height=265&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/JjPaMpm/" target="_blank" rel="noopener">type selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="universal-selector"><a class="header-anchor" href="#universal-selector"></a>Universal Selector</h3><p>Universal selector 是使用 <code>*</code> 來 match 任何元素。</p><p>例如：下面範例可以選到所有元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>header 3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"https://titangene.github.io/"</span>&gt;</span>Titangene Blog<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/NWKLvQg" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-15-47-50.png" alt=""></p><iframe height="285" style="width:100%" scrolling="no" title="Universal Selector" src="https://codepen.io/titangene/embed/NWKLvQg/?height=285&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/NWKLvQg/" target="_blank" rel="noopener">Universal Selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="class-selector"><a class="header-anchor" href="#class-selector"></a>Class selector</h3><p>如果要對多個元素需要相同的樣式時，就可以用 <code>class</code> 這個屬性來標識它們。在 CSS 是使用 <code>.</code> 來代表 class 屬性，也等同於 <code>~=</code> 表示法 (notation)，屬性值必須在 <code>.</code> 之後。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-class">.highlight</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>等同於：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span><span class="hljs-selector-attr">[class~=highlight]</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/gOYdXOe" target="_blank" rel="noopener">Codepen 連結</a></p><p>第一個 <code>h1</code> 元素的字體顏色不會變成紅色，只有第二個 <code>h1</code> 元素才會變紅色：</p><p><img src="../images/css-selector-1/2019-09-17-16-46-57.png" alt=""></p><p><img src="../images/css-selector-1/2019-09-17-16-47-15.png" alt=""></p><iframe height="240" style="width:100%" scrolling="no" title="class selector" src="https://codepen.io/titangene/embed/gOYdXOe/?height=240&theme-id=dark&default-tab=css,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/gOYdXOe/" target="_blank" rel="noopener">class selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>如果只單獨使用 class selector (也就是 <code>.</code> )，也等同於在前面加上 universal selector (也就是 <code>*</code> )。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">*<span class="hljs-selector-class">.highlight</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.highlight</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/GRKXOZx" target="_blank" rel="noopener">Codepen 連結</a></p><p>第一個 <code>h1</code> 和 <code>h2</code> 元素的字體顏色不會變成紅色，只有第二個 <code>h1</code> 和 <code>h2</code> 元素才會變紅色：</p><p><img src="../images/css-selector-1/2019-09-17-16-53-46.png" alt=""></p><p><img src="../images/css-selector-1/2019-09-17-16-55-21.png" alt=""></p><iframe height="320" style="width:100%" scrolling="no" title="class selector &amp; universal selector" src="https://codepen.io/titangene/embed/GRKXOZx/?height=320&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/GRKXOZx/" target="_blank" rel="noopener">class selector &amp; universal selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>如果需要同時指定某元素上的兩個 class，可以寫成這樣：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"text-primary highlight"</span>&gt;</span>highlight header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>highlight header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.text-primary</span><span class="hljs-selector-class">.highlight</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><div class="info"><p>註：在 HTML 要對某元素上同時設定多個 class，是使用空白字元來分隔多個 class。以上面範例來說，第二個 <code>h1</code> 上有兩個 class，分別是 <code>text-primary</code> 和 <code>highlight</code>。</p></div><p>Demo：<a href="https://codepen.io/titangene/pen/WNegdxr" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-17-27-15.png" alt=""></p><iframe height="320" style="width:100%" scrolling="no" title="multi class selector" src="https://codepen.io/titangene/embed/WNegdxr/?height=320&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/WNegdxr/" target="_blank" rel="noopener">multi class selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="id-selector"><a class="header-anchor" href="#id-selector"></a>ID selector</h3><p>如果要對某個元素作唯一的標示，就可以用 <code>id</code> 這個屬性來標識它們。在 CSS 是使用 <code>#</code> 來代表 id 屬性，屬性值必須在 <code>#</code> 之後。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"titan"</span>&gt;</span>header 1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"titan"</span>&gt;</span>header 2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#titan</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/GRKXyjb" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-17-52-36.png" alt=""></p><iframe height="320" style="width:100%" scrolling="no" title="id selector" src="//codepen.io/titangene/embed/GRKXyjb/?height=320&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/GRKXyjb/" target="_blank" rel="noopener">id selector</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>如果只想選擇帶有 <code>titan</code> 這個 id 的 <code>h2</code> 元素，可以寫成這樣：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h2</span><span class="hljs-selector-id">#titan</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：<a href="https://codepen.io/titangene/pen/KKPxZma" target="_blank" rel="noopener">Codepen 連結</a></p><p><img src="../images/css-selector-1/2019-09-17-17-56-01.png" alt=""></p><iframe height="320" style="width:100%" scrolling="no" title="id selector: specific element" src="//codepen.io/titangene/embed/KKPxZma/?height=320&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/KKPxZma/" target="_blank" rel="noopener">id selector: specific element</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h2 id="最後"><a class="header-anchor" href="#最後"></a>最後</h2><p>今天介紹一些 simple selector，接下來幾天會接續介紹其他 selector。</p><p>資料來源：</p><ul><li><a href="https://www.w3.org/TR/CSS22/selector.html" target="_blank" rel="noopener">CSS 2.2 Specification - Selectors</a></li><li><a href="https://www.w3.org/TR/selectors-3/" target="_blank" rel="noopener">Selectors Level 3</a></li><li><a href="https://www.w3.org/TR/selectors-4/" target="_blank" rel="noopener">Selectors Level 4</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/css.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Selector (選擇器) 可用來選擇 HTML 和 XML 文件中的節點，並將樣式屬性綁定到文件 (HTML 和 XML) 中的元素上。當選擇器與某元素 match 的時候，就可以對選到的元素進行 CSS 樣式設定。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://titangene.github.io/categories/css/"/>
    
    
      <category term="IT 鐵人賽" scheme="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>重新認識 CSS - CSS 簡介</title>
    <link href="https://titangene.github.io/article/css-introduction.html"/>
    <id>https://titangene.github.io/article/css-introduction.html</id>
    <published>2019-09-16T10:10:11.000Z</published>
    <updated>2019-09-16T13:58:19.006Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/css.png" alt=""></p><p>CSS 是 Cascading Style Sheets 的縮寫，是一種 style sheet (樣式表) 語言，可將自訂的樣式 (例如：字體、顏色) 附加在 HTML 文件上。這篇會先簡介 CSS，以及如何在 HTML 設定 CSS。</p><a id="more"></a><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><blockquote><p>「重新認識 CSS」這個系列名稱的由來就如其名，我想要重新認識它。雖然以前就有學過 CSS，但這次想從 CSS Spec 中學到最原始的定義和內容，更加了解 CSS 的原理，讓我在切版的時候可以更加確定自己在做什麼，我踩到的雷只是因為我不夠了解它才會炸開。</p><p>在這 30 天的內容中，會將 Spec 內看到的資料整理成這個系列，也希望正在學 CSS 的各位可以更加了解它。另外我也會同時將文章發至我的 Blog，如果想直接看文內的程式碼 Demo 畫面，可以到我的 Blog 來看 😃。</p></blockquote><p>CSS 規則是由 selector 和宣告 (declaration) 組成，以下面程式碼的 CSS 規則為例，<code>h1</code> 就是 selector，<code>color: red</code> 就是宣告。在 HTML 中，元素名稱不分大小寫，例如：<code>H1</code> 和 <code>h1</code> 相同，但通常會寫小寫。</p><p>宣告又由屬性名稱和屬性值組成，以下面程式碼為例，<code>color</code> 就是屬性名稱，<code>red</code> 就是屬性值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><h2 id="在-html-設定-css"><a class="header-anchor" href="#在-html-設定-css"></a>在 HTML 設定 CSS</h2><p>要在 HTML 內設定 CSS 有三種方法：</p><ul><li>Inline CSS：元素上的 <code>style</code> 屬性</li><li>Internal CSS：<code>style</code> 元素</li><li>External CSS：<code>link</code> 元素引入外部 CSS</li></ul><h3 id="inline-css：元素上的-style-屬性"><a class="header-anchor" href="#inline-css：元素上的-style-屬性"></a>Inline CSS：元素上的 <code>style</code> 屬性</h3><ul><li>在指定的元素上透過 <code>style</code> 屬性來設定 CSS 樣式</li><li>相同的樣式無法共用，如果要在不同元素設定相同的樣式，就需要在每個元素上設定 <code>style</code> 屬性</li><li>CSS 樣式與 HTML 結構寫在一起，可讀性差，不建議這樣寫</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red;"</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"color: red;"</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Demo：</p><p><img src="../images/css-introduction/css-style-attr.png" alt=""></p><iframe height="214" style="width:100%" scrolling="no" title="Inline CSS" src="https://codepen.io/titangene/embed/JjPBmzR/?height=214&theme-id=dark&default-tab=html,result" frameborder="no" allowtransparency="true" allowfullscreen>See the Pen <a href="https://codepen.io/titangene/pen/JjPBmzR/" target="_blank" rel="noopener">Inline CSS</a> by Titangene (<a href="https://codepen.io/titangene" target="_blank" rel="noopener">@titangene</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="internal-css：style-元素"><a class="header-anchor" href="#internal-css：style-元素"></a>Internal CSS：<code>style</code> 元素</h3><ul><li>直接在 HTML 原始碼內利用 <code>style</code> 元素來設定 CSS</li><li>只能在單獨的 HTML 內使用 <code>style</code> 元素裡的樣式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>      <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Demo：</p><p><img src="../images/css-introduction/title-red.png" alt=""></p><h3 id="external-css：link-元素引入外部-css"><a class="header-anchor" href="#external-css：link-元素引入外部-css"></a>External CSS：<code>link</code> 元素引入外部 CSS</h3><ul><li>使用 <code>link</code> 元素引入外部 CSS 檔案內的樣式</li><li>可將 HTML 與 CSS 的原始碼分開管理<ul><li>若要更改樣式，只要更換成其他 CSS 檔案或修改外部 CSS 檔案內的樣式</li></ul></li><li>同一份 CSS 樣式可套用至多個 HTML 文件使用</li><li>常見會使用 CDN (Content Delivery Network)</li></ul><p><a href="https://html.spec.whatwg.org/multipage/semantics.html#the-link-element" target="_blank" rel="noopener"><code>link</code> 元素</a> 上的設定：</p><ul><li>用 <code>rel</code> 屬性 (relationships) 設定連結類型：<code>stylesheet</code></li><li>用 <code>href</code> 屬性 (hyperlink reference) 指定的 CSS 路徑</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"./style.css"</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面內容為 <code>style.css</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>Demo：</p><p><img src="../images/css-introduction/title-red.png" alt=""></p><h3 id="multiple-style-sheets"><a class="header-anchor" href="#multiple-style-sheets"></a>Multiple Style Sheets</h3><p>如果以不同的方式來對同一個元素設定樣式，則會使用最後設定的樣式。</p><p>例如：同時使用 internal CSS 和 external CSS 的方式設定 CSS：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"./style.css"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>      <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>下面內容為 <code>style.css</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: red; &#125;<br></code></pre></td></tr></table></figure><p>那 <code>h1</code> 的顏色會是綠色：</p><p><img src="../images/css-introduction/title-green.png" alt=""></p><p>如果更換 <code>style</code> 和 <code>link</code> 元素的順序，<code>h1</code> 的顏色則會是紅色：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"><br>      <span class="hljs-selector-tag">h1</span> &#123; <span class="hljs-attribute">color</span>: green; &#125;<br>    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"./style.css"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="../images/css-introduction/title-red.png" alt=""></p><p>資料來源：</p><ul><li><a href="https://www.w3.org/TR/html401/present/styles.html" target="_blank" rel="noopener">Style Sheets in HTML documents</a></li><li><a href="https://html.spec.whatwg.org/multipage/semantics.html#the-link-element" target="_blank" rel="noopener">HTML Standard - 4.2.4 The link element</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/css.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;CSS 是 Cascading Style Sheets 的縮寫，是一種 style sheet (樣式表) 語言，可將自訂的樣式 (例如：字體、顏色) 附加在 HTML 文件上。這篇會先簡介 CSS，以及如何在 HTML 設定 CSS。&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://titangene.github.io/categories/css/"/>
    
      <category term="HTML" scheme="https://titangene.github.io/categories/css/html/"/>
    
    
      <category term="IT 鐵人賽" scheme="https://titangene.github.io/tags/it-%E9%90%B5%E4%BA%BA%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>套用自訂 HackMD 暗主題</title>
    <link href="https://titangene.github.io/article/hackmd-dark-theme.html"/>
    <id>https://titangene.github.io/article/hackmd-dark-theme.html</id>
    <published>2019-05-18T12:16:35.000Z</published>
    <updated>2019-05-19T16:02:51.484Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/hackmd-dark-theme.jpg" alt=""></p><p>HackMD 是我常用的寫作平台，因官方沒有提供暗主題的瀏覽模式，所以我就刻了自訂的暗主題，也將自訂主題<a href="https://github.com/titangene/hackmd-dark-theme" target="_blank" rel="noopener">開源在 GitHub</a>，歡迎大家發 PR 給我，並記得幫我按個 ⭐️ 星。</p><a id="more"></a><p>應該有很多人在瀏覽器安裝 <a href="https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh" target="_blank" rel="noopener">Dark reader</a> 這個擴充功能吧？通常使用的原因大多是想把畫面變成深色瀏覽模式，比較保護眼睛。但是有些網站使用這個擴充功能之後，有些顏色不是你習慣或喜歡的，尤其是在個人常用的網站上會感覺沒那麼習慣。</p><p>而 <a href="https://hackmd.io/" target="_blank" rel="noopener">HackMD</a> 是我常用來寫技術筆記的寫作平台，尤其是程式碼的 highlight，我個人偏好 VS Code 預設的暗主題 (Dark+ 這個主題)，所以我就在網頁上加上自己自訂的 CSS 去改成我想要的主題。</p><p>那如何將自定的 CSS 加在指定的網站上呢？原本我是用 <a href="https://userstyles.org/" target="_blank" rel="noopener">Stylish</a> 來管理自訂的網頁樣式，但後來因為<a href="https://forum.userstyles.org/discussion/53233/announcement-to-the-community" target="_blank" rel="noopener">一些原因這個擴充功能多了在背景上傳資訊的功能</a> (雖然官方說不會上傳個資)，於是我就改用 <a href="https://github.com/openstyles/stylus" target="_blank" rel="noopener">Stylus</a> 來管理樣式。Stylus 是 Stylish 的分支，刪除了任何與分析、回傳資料的功能。</p><h2 id="如何使用主題"><a class="header-anchor" href="#如何使用主題"></a>如何使用主題</h2><ol><li>在瀏覽器安裝 <a href="https://github.com/openstyles/stylus" target="_blank" rel="noopener">Stylus</a> 擴充功能，Stylus 目前提供這幾種瀏覽器版本的擴充功能：<ul><li><a href="https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne" target="_blank" rel="noopener">Chrome</a></li><li><a href="https://addons.mozilla.org/zh-TW/firefox/addon/styl-us/" target="_blank" rel="noopener">Firefox</a></li><li><a href="https://addons.opera.com/zh-tw/extensions/details/stylus/" target="_blank" rel="noopener">Opera</a></li></ul></li><li>下載我自定的 <a href="https://userstyles.org/styles/147272/hackmd-dark-theme" target="_blank" rel="noopener">HackMD dark theme</a> 至 Stylus</li></ol><p><img src="../images/hackmd-dark-theme/install-style.png" alt=""></p><ol start="3"><li>下載樣式後會自動套用，開啟 HackMD 就會看到介面變成暗主題囉！如果是之前就開啟的 HackMD 頁面，有時會需要重新整理頁面才會套用暗主題。</li></ol><p>就是這麼簡單 😄。</p><p>這邊要另外說明一下，雖然剛剛提到因為 Stylish 有收集資料的問題，所以我改用 Stylus 來管理自定樣式，但是要將自定的樣是分享給別人使用，還是要註冊 <a href="https://userstyles.org/" target="_blank" rel="noopener">Stylish</a> 官方平台的帳號，將要分享的樣式上傳至這個平台，讓其他人可以下載使用。</p><p>不過如果只是下載別人的主題是不需要註冊帳號，所以不用擔因。</p><h2 id="原始碼"><a class="header-anchor" href="#原始碼"></a>原始碼</h2><p>這就是我自定 HackMD 樣式的原始碼：<a href="https://github.com/titangene/hackmd-dark-theme" target="_blank" rel="noopener">titangene/hackmd-dark-theme</a></p><p>如果發現需修正的地方，歡迎發 pull request 給我 😎。<br>如果喜歡，記得幫我按個 ⭐️ 星，Thanks。</p><h2 id="畫面截圖"><a class="header-anchor" href="#畫面截圖"></a>畫面截圖</h2><h3 id="overview"><a class="header-anchor" href="#overview"></a>Overview</h3><p><img src="../images/hackmd-dark-theme/overview.png" alt=""></p><h3 id="recent"><a class="header-anchor" href="#recent"></a>Recent</h3><p><img src="../images/hackmd-dark-theme/recent.png" alt=""></p><h3 id="view-mode"><a class="header-anchor" href="#view-mode"></a>View mode</h3><p><img src="../images/hackmd-dark-theme/view.png" alt=""></p><h3 id="book-mode"><a class="header-anchor" href="#book-mode"></a>Book mode</h3><p><img src="../images/hackmd-dark-theme/book-mode.png" alt=""></p><h3 id="slide-mode"><a class="header-anchor" href="#slide-mode"></a>Slide mode</h3><p><img src="../images/hackmd-dark-theme/slide.png" alt=""></p><h3 id="emoji-todo-list-code-block-highlight"><a class="header-anchor" href="#emoji-todo-list-code-block-highlight"></a>Emoji &amp; Todo list &amp; Code block highlight</h3><p><img src="../images/hackmd-dark-theme/emoji_todo-list_code-block.png" alt=""></p><h3 id="github-gist"><a class="header-anchor" href="#github-gist"></a>Github Gist</h3><p><img src="../images/hackmd-dark-theme/gist.png" alt=""></p><h3 id="latex-uml"><a class="header-anchor" href="#latex-uml"></a>LaTeX &amp; UML</h3><p><img src="../images/hackmd-dark-theme/latex_uml.png" alt=""></p><h3 id="table"><a class="header-anchor" href="#table"></a>Table</h3><p><img src="../images/hackmd-dark-theme/table.png" alt=""></p><h3 id="toc-table-of-contents"><a class="header-anchor" href="#toc-table-of-contents"></a>ToC (Table of Contents)</h3><p><img src="../images/hackmd-dark-theme/toc.png" alt=""></p><h3 id="history"><a class="header-anchor" href="#history"></a>History</h3><p><img src="../images/hackmd-dark-theme/history.png" alt=""></p><h3 id="permission"><a class="header-anchor" href="#permission"></a>Permission</h3><p><img src="../images/hackmd-dark-theme/permission.png" alt=""></p><h3 id="comment"><a class="header-anchor" href="#comment"></a>Comment</h3><p><img src="../images/hackmd-dark-theme/comment.png" alt=""></p><h2 id="小結"><a class="header-anchor" href="#小結"></a>小結</h2><p>其實這個 side project 我在 2017 年 8 月就開始做了，期間做了一些不定期的更新，這次的更新算是所有我發現想改的部分 (洞) 都填好了 (有可能我眼殘沒發現的部分也需要改 XD，歡迎大家發 PR 給我)，包括最近 HackMD 官方推出的可分享文件給指定帳號的功能，我也把介面變成暗主題了。</p><h2 id="套用暗主題的其他秘訣"><a class="header-anchor" href="#套用暗主題的其他秘訣"></a>套用暗主題的其他秘訣</h2><p>在 HackMD 擔任 Developer 的 <a href="https://www.facebook.com/yukaihuangtw" target="_blank" rel="noopener">黃鈺凱</a> 在我發文的 Facebook 社團 <a href="https://www.facebook.com/groups/markdown.tw/permalink/1535146039952824/" target="_blank" rel="noopener">Markdown 台灣</a>，跟大家分享另一種可以套用暗主題的小秘訣，而且這個方法可以將你自定的樣式，套用至你分享的筆記，或是跟夥伴參與的共筆，讓大家都能共享同樣的暗主題。</p><p>這個祕訣就是在筆記內，加上 HackMD 的內嵌筆記語法，例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&#123;%hackmd BJrTq20hE %&#125;<br></code></pre></td></tr></table></figure><p>以 <a href="https://hackmd.io/IpJEFpXkQg2yvdsY9IbTVg?both" target="_blank" rel="noopener">https://hackmd.io/IpJEFpXkQg2yvdsY9IbTVg?both</a> (這個連結是由 <a href="https://www.facebook.com/yukaihuangtw" target="_blank" rel="noopener">黃鈺凱</a> 大大提供) 這個筆記為例，在這個筆記內可以看到 HackMD 的內嵌筆記語法，而且可以看到我沒有在 Stylus 開啟我自定的 <a href="https://userstyles.org/styles/147272/hackmd-dark-theme" target="_blank" rel="noopener">HackMD dark theme</a>，竟然還可以保有暗主題的樣式：</p><p><img src="../images/hackmd-dark-theme/2019-05-19-23-38-41.png" alt=""></p><p>原因就發生在這個 HackMD 的內嵌筆記語法，因為這個語法背後幫你多加了暗主題的樣式。那是怎麼做到的呢？於是我就從 <code>BJrTq20hE</code> 這個看似奇怪亂碼的東西下手。</p><p>馬上就直覺想到，其實 <code>BJrTq20hE</code> 是另一篇筆記的編號，這個筆記的完整連結像是下面這樣，網址其中的 <code>s</code> 是 HackMD 的發表模式 (應該是叫這樣吧？)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">https://hackmd.io/s/BJrTq20hE<br></code></pre></td></tr></table></figure><p>進入這個連結後，可以看到整個筆記畫面沒有任何文字內容，但是一樣在沒有套用自訂暗主題的情況下，還能有暗主題的樣式。</p><p><img src="../images/hackmd-dark-theme/2019-05-19-23-46-11.png" alt=""></p><p>接著我進入這個筆記的編輯模式就發現答案已揭曉，原來這個看似沒內文的筆記中，有我寫的暗主題樣式，這些樣式直接被寫在這篇 HackMD 的筆記裡面，並且放在 <code>&lt;style&gt;</code> 的 HTML element 內：</p><p><img src="../images/hackmd-dark-theme/2019-05-19-23-48-02.png" alt=""></p><p>也就是說如果未來想在其他筆記也套用相同的主題樣式，只要建立專門放樣式的筆記，然後將這個筆記透過 HackMD 的內嵌筆記語法套用至其他筆記上，這樣那些筆記都會共享相同的樣式囉！好神奇啊！感謝 HackMD Developer 大大的分享！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/hackmd-dark-theme.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;HackMD 是我常用的寫作平台，因官方沒有提供暗主題的瀏覽模式，所以我就刻了自訂的暗主題，也將自訂主題&lt;a href=&quot;https://github.com/titangene/hackmd-dark-theme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;開源在 GitHub&lt;/a&gt;，歡迎大家發 PR 給我，並記得幫我按個 ⭐️ 星。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="https://titangene.github.io/categories/blog/"/>
    
      <category term="CSS" scheme="https://titangene.github.io/categories/blog/css/"/>
    
    
      <category term="Markdown" scheme="https://titangene.github.io/tags/markdown/"/>
    
      <category term="Dark Theme" scheme="https://titangene.github.io/tags/dark-theme/"/>
    
  </entry>
  
  <entry>
    <title>透過 Docker Compose 設定 network</title>
    <link href="https://titangene.github.io/article/networking-in-docker-compose.html"/>
    <id>https://titangene.github.io/article/networking-in-docker-compose.html</id>
    <published>2019-05-15T13:03:15.000Z</published>
    <updated>2019-05-15T13:02:26.117Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/docker-compose.jpg" alt=""></p><p>Docker Compose 預設會建立 default network，這篇會告訴你如何自訂 network、如何使用現有的 network，以及如何自訂 network 名稱。</p><a id="more"></a><p>Docker Compose 預設會幫你的應用程式設定一個 network，service 的每個容器都會加入 default network，並且該 network 上的其他容器都可以連接 (reachable) 以及發現 (discoverable) 與容器名稱相同的 hostname。</p><p>預設的 network 名稱是基於 “專案目錄名稱”，並加上 <code>_default</code>。例如：你的應用程式放在名為 <code>myapp</code> 的專案目錄中，而 <code>docker-compose.yml</code> 的內容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  web:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">.</span><br><span class="hljs-attr">    ports:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'8000:8000'</span><br><span class="hljs-attr">  db:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">postgres</span><br><span class="hljs-attr">    ports:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'8001:5432'</span><br></code></pre></td></tr></table></figure><p>當你執行 <code>docker-compose up</code> 指令時，會發生以下情況：</p><ol><li>建立一個名為 <code>myapp_default</code> 的 network</li><li>使用 <code>web</code> 的設定建立容器，並以 <code>web</code> 這個名稱加入名為 <code>myapp_default</code> 的 network</li><li>使用 <code>db</code> 的設定建立容器，並以 <code>db</code> 這個名稱加入名為 <code>myapp_default</code> 的 network</li></ol><div class="info"><p>當然你也可以使用 <a href="https://docs.docker.com/compose/reference/overview/" target="_blank" rel="noopener"><code>--project-name</code> (可簡寫成 <code>-p</code> ) 參數</a> 或使用 <code>COMPOSE_PROJECT_NAME</code> 這個 <a href="https://docs.docker.com/compose/reference/envvars/#compose-project-name" target="_blank" rel="noopener">環境變數</a> 來複寫專案名稱。</p></div><p>現在，每個容器都可以找到名為 <code>web</code> 或 <code>db</code> 的 hostname，並獲得對應容器的 IP 位址。例如：<code>web</code> 的應用程式的程式碼可以連接到 <code>postgres://db:5432</code> 的 URL，並開始使用 Postgres 資料庫。</p><p>不過要注意 <code>HOST_PORT</code> 和 <code>CONTAINER_PORT</code> 之間的差別。以上面範例中的 <code>db</code> 來說，<code>HOST_PORT</code> 是 <code>8001</code>，<code>CONTAINER_PORT</code> 是 <code>5432</code> (postgres 的預設 port)。Networked service-to-service 通訊使用 <code>CONTAINER_PORT</code>。定義 <code>HOST_PORT</code> 之後，service 也可以在 swarm 外部存取。</p><p>在 <code>web</code> 的容器中，如果要連接到 <code>db</code> 的連接字串會看起來像是 <code>postgres://db:5432</code> 這樣，而從 host machine 來看，連接字串看起來像是 <code>postgres://{DOCKER_IP}:8001</code>。</p><h2 id="更新容器"><a class="header-anchor" href="#更新容器"></a>更新容器</h2><p>如果有變更 service 的設定，請執行 <code>docker-compose up</code> 指令來更新 service，它會刪除舊的容器，而新容器會以不同的 IP 位址加入相同名稱的 network。執行中的容器可以找到該名稱並連接到新的 IP 位址，而舊的 IP 位址就無法使用。</p><p>如果任何容器對舊容器開放連線，那這些容器就會被關閉連線。容器有責任檢測這個情況，再次找到名稱並重新連接。</p><h2 id="links"><a class="header-anchor" href="#links"></a>Links</h2><p>link 到另一個 service 中的容器。透過 link 可以指定 service 名稱和 link 別名 ( <code>SERVICE:ALIAS</code> ），或僅指定 service 名稱。透過該別名可以從其他 service 存取到 service。link 不需要啟用 service 進行通訊 - 預設情況下，任何 service 都可以通過該 service 的名稱存取任何其他 service。</p><p>鏈接 (linked) service 的容器可在別名相同的 hostname 上存取，如果未指定別名，則可以存取 service 名稱。</p><p>在下面範例中，可以從 <code>web</code> 的 hostname <code>db</code> 和 <code>database</code> 存取到 <code>db</code>：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  web:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">.</span><br><span class="hljs-attr">    links:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'db:database'</span><br><span class="hljs-attr">  db:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">postgres</span><br></code></pre></td></tr></table></figure><p><code>link</code> 和 <a href="https://docs.docker.com/compose/compose-file/#depends_on" target="_blank" rel="noopener"><code>depends_on</code></a> 都是以相同的方式表達 service 之間的依賴關係，因此可以使用它們來決定 service 啟動的順序。</p><div class="info"><ul><li>如果同時定義 <code>links</code> 和 <code>networks</code>，則它們之間具有 <code>links</code> 的 service 必須共享至少一個共同的網絡才能進行通訊。建議使用 network</li><li><a href="https://docs.docker.com/engine/reference/commandline/stack_deploy/" target="_blank" rel="noopener">在 swarm 模式下使用 Compose 檔案 (v3) 部署 stack 時</a>，會忽略 <code>links</code> 這個 option</li></ul></div><div class="warning"><p><code>--link</code> 參數為 legacy 功能，可能會被刪除。不建議使用 <code>--link</code>，建議使用 <a href="https://docs.docker.com/network/" target="_blank" rel="noopener">user-defined networks</a> (使用者定義的網路) 來促成兩個容器之間的溝通。user-defined networks 不支援你用 <code>--link</code> 參數在容器之間共享環境變數。但是，你可以使用其他機制 (例如：volume)，以更可控的方式在容器之間共享環境變數。</p></div><blockquote><p>詳情可參考官方的 <a href="https://docs.docker.com/compose/compose-file/#links" target="_blank" rel="noopener">Compose file version 3 reference | Docker Documentation</a> 文件。</p></blockquote><h2 id="multi-host-networking"><a class="header-anchor" href="#multi-host-networking"></a>Multi-host networking</h2><div class="info"><p>注意：本節中的說明只適用於 <a href="https://docs.docker.com/compose/swarm/" target="_blank" rel="noopener">legacy Docker Swarm</a> 的相關操作，並且只有目標為 legacy Swarm 叢集才有用。有關將 compose 專案部署至較新的整合 swarm mode，請參考<a href="https://docs.docker.com/compose/bundles/" target="_blank" rel="noopener">Docker Stacks</a> 文件。</p></div><p>將 <a href="https://docs.docker.com/compose/swarm/" target="_blank" rel="noopener">Compose 應用程式部署至 Swarm 叢集</a> 時，可以使用內建的 <code>overlay</code> driver 在容器之間啟用 multi-host 通訊，而無需更改 Compose 檔案或應用程式的程式碼。</p><p>想了解如何設定 Swarm 叢集可參考官方的 <a href="https://docs.docker.com/network/overlay-standalone.swarm/" target="_blank" rel="noopener">Multi-host networking</a> 這篇。叢集預設是使用 <code>overlay</code> driver，不過也可以參考下一節指定其他 driver。</p><h2 id="指定自定-network"><a class="header-anchor" href="#指定自定-network"></a>指定自定 network</h2><p>若不想使用預設的 app network，可以使用 <a href="https://docs.docker.com/compose/compose-file/#network-configuration-reference" target="_blank" rel="noopener">top-level <code>networks</code> key</a> 來指定自己的 network，讓你可以建立更複雜的拓撲，並指定 <a href="https://docs.docker.com/engine/extend/plugins_network/" target="_blank" rel="noopener">custom network driver</a> 和 option。還可以使用它，將 service 連接到不由 Compose 管理，而是由外部建立的 network。</p><p>每個 service 都可以使用 <a href="https://docs.docker.com/compose/compose-file/#networks" target="_blank" rel="noopener">service-level <code>networks</code> key</a> 指定要連接的 network，該 key 是引用至 <a href="https://docs.docker.com/compose/compose-file/#network-configuration-reference" target="_blank" rel="noopener">top-level <code>networks</code> key</a> 下的名稱。</p><p>以下面定義的兩個自定 network 的 Compose 檔案為例，<code>proxy</code> service 與 <code>db</code> service 隔離，因為它們不共享共同的 network，只有 <code>app</code> 可以與兩者溝通：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  proxy:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">./proxy</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">frontend</span><br><span class="hljs-attr">  app:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">./app</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">frontend</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">backend</span><br><span class="hljs-attr">  db:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">postgres</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">backend</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  frontend:</span><br>    <span class="hljs-comment"># Use a custom driver</span><br><span class="hljs-attr">    driver:</span> <span class="hljs-string">custom-driver-1</span><br><span class="hljs-attr">  backend:</span><br>    <span class="hljs-comment"># Use a custom driver which takes special options</span><br><span class="hljs-attr">    driver:</span> <span class="hljs-string">custom-driver-2</span><br><span class="hljs-attr">    driver_opts:</span><br><span class="hljs-attr">      foo:</span> <span class="hljs-string">'1'</span><br><span class="hljs-attr">      bar:</span> <span class="hljs-string">'2'</span><br></code></pre></td></tr></table></figure><p>通過為每個連接 (attached) 的 network 設定 <a href="https://docs.docker.com/compose/compose-file/#ipv4_address-ipv6_address" target="_blank" rel="noopener"><code>ipv4_address</code> 和/或 <code>ipv6_address</code></a>，可以為 network 設定靜態 IP 位址。</p><h2 id="設定-default-network"><a class="header-anchor" href="#設定-default-network"></a>設定 default network</h2><p>透過在 top-level <code>networks</code> key 內，名為 <code>default</code> network 下定義 entry，來更改應用程序範圍 (app-wide) 的 default network 的設定：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3'</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  web:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">.</span><br><span class="hljs-attr">    ports:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">'8000:8000'</span><br><span class="hljs-attr">  db:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">postgres</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  default:</span><br>    <span class="hljs-comment"># Use a custom driver</span><br><span class="hljs-attr">    driver:</span> <span class="hljs-string">custom-driver-1</span><br></code></pre></td></tr></table></figure><h2 id="使用-pre-existing-network"><a class="header-anchor" href="#使用-pre-existing-network"></a>使用 pre-existing network</h2><p>如果希望容器加入預先定義好的 network，就可以使用 <code>external</code> option。</p><p>如果 <code>external</code> 設為 <code>true</code>，就會指定已在 Compose 之外先建立的那個 network，所以 <code>docker-compose up</code> 不會嘗試建立此 network。</p><p>如果此 network 不存在，會因為找不到參考的目標 network 而發生錯誤。錯誤如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker-compose up<br>ERROR: Network my_network declared as external, but could be found. Please create the network manually using `docker network create my_network` and try again.<br></code></pre></td></tr></table></figure><p>如果找不到此 network，可以執行 <code>docker network create [network_name]</code> 來建立 network。</p><p>在 Compose v3.3 以及更舊版的檔案格式下，<code>external</code> 不能跟其他 network configuration keys 一起使用，包括：<code>driver</code>、<code>driver_opts</code>、<code>ipam</code> 和 <code>internal</code> 。Compose <a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-34" target="_blank" rel="noopener">v3.4</a> 以及更新版的格式就沒有這個限制。</p><p>下面範例的 Compose 會找到名為 <code>my-network-name</code> 的已存在的 network，並將應用程式的容器連接到該 network，這樣就不會嘗試建立一個名為 <code>[projectname]_default</code> 的 network：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.7"</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  app:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">whatever</span><br><span class="hljs-attr">  networks:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">my-network</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  my-network:</span><br><span class="hljs-attr">    external:</span><br><span class="hljs-attr">      name:</span> <span class="hljs-string">my-network-name</span><br></code></pre></td></tr></table></figure><p>在下面範例中，<code>proxy</code> 是通往外部世界的 gateway，所以不需要建立一個名為 <code>[projectname]_outside</code> 的 network。Compose 會找到一個名為 <code>outside</code> 的已存在的 network，並將 <code>proxy</code> service 的容器連接到 <code>outside</code> network。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.7"</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  proxy:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">./proxy</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">outside</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">default</span><br><span class="hljs-attr">  app:</span><br><span class="hljs-attr">    build:</span> <span class="hljs-string">./app</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">default</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  outside:</span><br><span class="hljs-attr">    external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>下面範例的 Compose 不會嘗試建立一個名為 <code>[projectname]_default</code> 的 network，Compose 會找到名為 <code>my-pre-existing-network</code> 的 network，並將應用程式的容器連接到該 network。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.7"</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  default:</span><br><span class="hljs-attr">    external:</span><br><span class="hljs-attr">      name:</span> <span class="hljs-string">my-pre-existing-network</span><br></code></pre></td></tr></table></figure><div class="info"><p><code>external.name</code> 在 <a href="https://docs.docker.com/compose/compose-file/compose-versioning/#version-35" target="_blank" rel="noopener">Compose v3.5 檔案格式</a> 中已被棄用，請改用同版本新增的 <code>name</code>，下一節會說明。</p></div><h2 id="自訂-network-名稱"><a class="header-anchor" href="#自訂-network-名稱"></a>自訂 network 名稱</h2><p>network 也可以自訂名稱，<code>name</code> 屬性可引用包含特殊字元的 network。</p><p>下面以這個 Compose 為例，介紹如何自訂 network 名稱：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">'3.5'</span><br><br><span class="hljs-attr">services:</span><br><span class="hljs-attr">  app:</span><br><span class="hljs-attr">    image:</span> <span class="hljs-string">whatever</span><br><span class="hljs-attr">    networks:</span><br><span class="hljs-bullet">      -</span> <span class="hljs-string">my-network</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  my-network:</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">my-app-network</span><br></code></pre></td></tr></table></figure><p>在 <a href="https://docs.docker.com/compose/compose-file/#network-configuration-reference" target="_blank" rel="noopener">top-level <code>networks</code> key</a></p><ol><li>先把 Compose 裡面的 <code>version</code> 改成 3.5 以上，因為在 v3.5 版才開始提供自訂 network 名稱 (也就是增加 <code>name</code> 屬性)</li><li>在 <a href="https://docs.docker.com/compose/compose-file/#networks" target="_blank" rel="noopener">service-level <code>networks</code> key</a> 裡面 (也就是自訂的 service 內的 <code>networks</code> )，加入自訂的 network 名稱 (此範例為 <code>my-network</code> )</li><li>network 的詳細定義是寫在 <a href="https://docs.docker.com/compose/compose-file/#network-configuration-reference" target="_blank" rel="noopener">top-level <code>networks</code> key</a> (也就是通常寫在檔案最後面的 <code>networks</code> ) 裡面。這裡的 network 名稱要和 service-level <code>networks</code> key 裡面自訂的名稱對應 (也就是 <code>my-network</code> 這個 network 名稱要和上面 <code>services</code> 內的一樣)，在 <code>my-network</code> 下面就可以使用 <code>name</code> 屬性來自定 network 名稱 ( <code>my-app-network</code> 就是你真正自訂的 network 名稱 )</li></ol><blockquote><p>詳情可參考官方的 <a href="https://docs.docker.com/compose/compose-file/#name-1" target="_blank" rel="noopener">Compose file version 3 reference | Docker Documentation</a> 文件。</p></blockquote><p>也可以與 <code>external</code> 屬性一起使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">"3.7"</span><br><br><span class="hljs-attr">networks:</span><br><span class="hljs-attr">  network1:</span><br><span class="hljs-attr">    external:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    name:</span> <span class="hljs-string">my-app-network</span><br></code></pre></td></tr></table></figure><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://docs.docker.com/compose/networking" target="_blank" rel="noopener">Networking in Compose | Docker Documentation</a></li><li><a href="https://docs.docker.com/compose/compose-file" target="_blank" rel="noopener">Compose file version 3 reference | Docker Documentation</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/docker-compose.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;Docker Compose 預設會建立 default network，這篇會告訴你如何自訂 network、如何使用現有的 network，以及如何自訂 network 名稱。&lt;/p&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://titangene.github.io/categories/devops/"/>
    
    
      <category term="Docker" scheme="https://titangene.github.io/tags/docker/"/>
    
      <category term="Container" scheme="https://titangene.github.io/tags/container/"/>
    
      <category term="Docker Compose" scheme="https://titangene.github.io/tags/docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>在 GCP 建立 Network Load Balancer 和 HTTP Load Balancer</title>
    <link href="https://titangene.github.io/article/gcp-network-and-http-load-balancer.html"/>
    <id>https://titangene.github.io/article/gcp-network-and-http-load-balancer.html</id>
    <published>2019-04-24T14:22:43.000Z</published>
    <updated>2019-04-24T14:21:10.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gcp.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/558?parent=catalog" target="_blank" rel="noopener">Set Up Network and HTTP Load Balancers</a>」這個 quest 所學到的內容，包括如何建立多個 web server instance，以及如何建立 network load balancer 和 HTTP load balancer。</p><a id="more"></a><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-24-22-19-00.png" alt=""></p><p>在此 lab 中，你將了解 network load balancer 和 HTTP load balancer 之間的差異，以及如何為 Google Compute Engine (GCE) VM 上執行的應用程式設定 load balancer。</p><p>你可通過多種方式<a href="https://cloud.google.com/load-balancing/docs/load-balancing-overview#a_closer_look_at_cloud_load_balancers" target="_blank" rel="noopener">在 GCP 內進行負載平衡 (load balance)</a>。此 lab 將教你完成以下 load balancer 的設定：</p><ul><li>L3 (Network Layer) <a href="https://cloud.google.com/compute/docs/load-balancing/network/" target="_blank" rel="noopener">Network Load Balancer</a></li><li>L7 (Application Layer) <a href="https://cloud.google.com/compute/docs/load-balancing/http/" target="_blank" rel="noopener">HTTP(s) Load Balancer</a></li></ul><h2 id="本篇將會做什麼？"><a class="header-anchor" href="#本篇將會做什麼？"></a>本篇將會做什麼？</h2><ul><li>設定 network load balancer</li><li>設定 HTTP load balancer</li><li>透過實作，了解 network load balancer 和 HTTP load balancer 之間的差異</li></ul><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><p>在點擊「Start Lab」之前，準備好網路瀏覽器 (推薦用 Google Chrome)，並且至少 40 分鐘可以專注的時間，因為 lab 是有時間限制，當你按下「Start Lab」開始學習時，無法暫停倒數計時，你只能在這段時間內使用 lab 提供給你的全新暫時 GCP Console 可用帳號，時間到之後的幾分鐘就會自動登出。</p><div class="warning"><p>注意：如果你有自己的個人 GCP 帳號或專案，請不要在此 lab 使用</p></div><h2 id="開始你的-lab-然後登入-gcp-console"><a class="header-anchor" href="#開始你的-lab-然後登入-gcp-console"></a>開始你的 Lab，然後登入 GCP Console</h2><ol><li>如果準備要開始，可以點擊右上角的「Start Lab」開始：</li></ol><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-00-25-52.png" alt=""></p><ol start="2"><li>接著會出現這個畫面，因為我參加 <a href="https://www.facebook.com/events/2005848903055499/" target="_blank" rel="noopener">GDG Tainan</a> 的活動，活動有提供 Qwiklabs 一個月的免費額度，所以我點選下圖左邊的「Use Subscription」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-21-15.png" alt=""></p><ol start="3"><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><ol start="4"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="5"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="6"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="7"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="啟動-google-cloud-shell"><a class="header-anchor" href="#啟動-google-cloud-shell"></a>啟動 Google Cloud Shell</h2><p>Google Cloud Shell 是載入了開發工具的 VM，它提供 5GB 的 home 目錄，並在 Google Cloud 上執行。可用 Google Cloud Shell 提供的 command-line 來存取 GCP 的資源。</p><ol><li>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><ol start="2"><li>在打開的對話框內，點擊「START CLOUD SHELL」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-25-23.png" alt=""></p><ol start="3"><li>連接和提供環境需要一些時間：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-05.png" alt=""></p><ol start="4"><li>連接後，就代表你已經過身份驗證，專案已設置為 <code>PROJECT_ID</code>，以下圖的為例，此專案的 ID 為 <code>qwiklabs-gcp-f9d61ede8167e6b0</code>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-34.png" alt=""></p><p><code>gcloud</code> 是 GCP 的 command-line 工具，他已預先安裝在 Cloud Shell 上，並且支援 tab 自動補齊 (tab-completion)。</p><p>使用下面指令可列出有效帳號名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud auth list<br>          Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>可以使用以下指令列出專案 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config list project<br>[core]<br>project = qwiklabs-gcp-f9d61ede8167e6b0<br><br>Your active configuration is: [cloudshell-9292]<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener">Google Cloud gcloud Overview</a> 文件。</p></blockquote><h2 id="為所有資源設定預設的-region-和-zone"><a class="header-anchor" href="#為所有資源設定預設的-region-和-zone"></a>為所有資源設定預設的 region 和 zone</h2><p>在 Cloud Shell 中，執行以下指令設定預設 zone 為 <code>us-central1-a</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config set compute/zone us-central1-a<br>Updated property [compute/zone].<br></code></pre></td></tr></table></figure><p>在 Cloud Shell 中，執行以下指令設定預設 region 為 <code>us-central1</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config set compute/region us-central1<br>Updated property [compute/region].<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/regions-zones/" target="_blank" rel="noopener">Regions &amp; Zones</a> 文件。</p></blockquote><div class="info"><p>注意：在自己的機器上執行 <code>gcloud</code> 時，<code>config</code> 設定在 session 中保持不變 (persist across)。在 Cloud Shell 中，你需要為每個新的 session 或重新連接設定此項。</p></div><h2 id="建立多個-web-server-instance"><a class="header-anchor" href="#建立多個-web-server-instance"></a>建立多個 web server instance</h2><p>為了模擬來至一個叢集主機的服務，請使用 <a href="https://cloud.google.com/compute/docs/instance-templates" target="_blank" rel="noopener">Instance Templates</a> 和 <a href="https://cloud.google.com/compute/docs/instance-groups/" target="_blank" rel="noopener">Managed Instance Groups</a> 建立一個簡單的 Nginx web server 叢集來提供靜態內容。Instance Templates 定義叢集中每個 VM 的規格 (硬碟、CPU、記憶體…等)，Managed Instance Groups 使用 Instance Templates 實例化 (instantiate) 多個 VM instance。</p><p>要建立一個 Nginx web server 叢集，請建立以下內容：</p><ul><li>一個用來在每個 VM instance 啟動時設定 Nginx server 的 startup script</li><li>一個要使用 startup script 的 instance template</li><li>一個 target pool</li><li>一個使用 instance template 的 managed instance group</li></ul><h3 id="建立-startup-script"><a class="header-anchor" href="#建立-startup-script"></a>建立 startup script</h3><p>在 Cloud Shell 執行下面指令，建立要讓每個 VM instance 使用的 startup script。此 script 會在啟動時設定 Nginx server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">cat &lt;&lt; EOF &gt; startup.sh<br><span class="hljs-meta">#! /bin/bash</span><br>apt-get update<br>apt-get install -y nginx<br>service nginx start<br>sed -i -- <span class="hljs-string">'s/nginx/Google Cloud Platform - '</span><span class="hljs-string">"\$HOSTNAME"</span><span class="hljs-string">'/'</span> /var/www/html/index.nginx-debian.html<br>EOF<br></code></pre></td></tr></table></figure><h3 id="建立-instance-template"><a class="header-anchor" href="#建立-instance-template"></a>建立 instance template</h3><p>建立一個使用 startup script 的 instance template：</p><ul><li><code>nginx-template</code>：instance template 的名稱</li><li><code>--metadata-from-file startup-script=startup.sh</code>：<code>--metadata-from-file</code> 參數會從 local 檔案中找到指定的 startup script</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instance-templates create nginx-template \</span><br>         --metadata-from-file startup-script=startup.sh<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/instanceTemplates/nginx-template].<br>NAME            MACHINE_TYPE   PREEMPTIBLE  CREATION_TIMESTAMP<br>nginx-template  n1-standard-1               2019-04-22T04:53:53.045-07:00<br></code></pre></td></tr></table></figure><p>如果上面指令沒有提供明確的 template 設定，<code>gcloud compute</code> 會使用以下預設值建立 template：</p><ul><li>機型：<code>n1-standard-1</code></li><li>image：最新版的 Debian image</li><li>開機磁碟：以 instance 命名的新標準開機磁碟</li><li>網路：<code>default</code> VPC 網路</li><li>IP 位址：臨時的外部 IP 位址</li></ul><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/sdk/gcloud/reference/compute/instance-templates/" target="_blank" rel="noopener"><code>gcloud compute instance-templates</code></a> 文件。</p></blockquote><blockquote><p>若想了解更多建立 instance template 的方法，詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/instance-templates/create-instance-templates" target="_blank" rel="noopener">Creating Instance Templates</a> 文件。</p></blockquote><h3 id="建立-target-pool"><a class="header-anchor" href="#建立-target-pool"></a>建立 target pool</h3><p>target pool 資源定義了一組可以從 forwarding rules 接收收到流量的 instance。當 forwarding rules 將流量導向到 target pool 時，Google Cloud Load Balancing 會根據 source IP 和 port 以及目標 IP 和 port 的 hash 值，從這些 target pool 中選擇一個 instance。</p><p>建立 target pool，target pool 允許單個存取點到群組中的所有 instance，而且對於之後步驟的負載平衡來說是必需的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute target-pools create nginx-pool</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../regions/us-central1/targetPools/nginx-pool].<br>NAME        REGION       SESSION_AFFINITY  BACKUP  HEALTH_CHECKS<br>nginx-pool  us-central1  NONE<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方文件：</p><ul><li>建立 target pool 指令：<a href="https://cloud.google.com/sdk/gcloud/reference/compute/target-pools/create" target="_blank" rel="noopener"><code>gcloud compute target-pools create</code></a></li><li><a href="https://cloud.google.com/load-balancing/docs/network/" target="_blank" rel="noopener">Network Load Balancing Concepts</a></li><li><a href="https://cloud.google.com/load-balancing/docs/target-pools" target="_blank" rel="noopener">Using Target Pools</a></li></ul></blockquote><h3 id="建立-managed-instance-group"><a class="header-anchor" href="#建立-managed-instance-group"></a>建立 managed instance group</h3><p>使用 instance template 建立 managed instance group：</p><ul><li><code>nginx-group</code>：instance group 的名稱</li><li><code>--base-instance-name nginx</code>：其中的 <code>nginx</code> 是指在此 managed instance group 中建立的 instance 使用的名稱。由於這些 instance 都一樣，系統會用隨機字串來作為 instance 名稱的一部分，例如：如果 base 名稱是 <code>nginx</code>，instance 的名稱就可能會是 <code>nginx-cl3t</code>、<code>nginx-sqgw</code> … 等</li><li><code>--size 2</code>：instance group 的大小</li><li><code>--template nginx-template</code>：用於此群組的 instance template 的名稱</li><li><code>--target-pool nginx-pool</code>：要新增此 instance group 的 target pool 的名稱 (可多個 target pool)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instance-groups managed create nginx-group \</span><br>         --base-instance-name nginx \<br>         --size 2 \<br>         --template nginx-template \<br>         --target-pool nginx-pool<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../zones/us-central1-a/instanceGroupManagers/nginx-group].<br>NAME         LOCATION       SCOPE  BASE_INSTANCE_NAME  SIZE  TARGET_SIZE  INSTANCE_TEMPLATE  AUTOSCALED<br>nginx-group  us-central1-a  zone   nginx               0     2            nginx-template     no<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances" target="_blank" rel="noopener">Creating groups of managed instances</a> 文件。</p></blockquote><p>執行上面的指令後，會建立兩個 VM instance，名稱會以 <code>nginx-</code> 為前綴，可能需要等幾分鐘。</p><p>接著查看已建立的所有 compute engine instance：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instances list</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME        ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP     STATUS<br>nginx-cl3t  us-central1-a  n1-standard-1               10.128.0.3   35.193.149.246  RUNNING<br>nginx-sqgw  us-central1-a  n1-standard-1               10.128.0.2   130.211.208.12  RUNNING<br></code></pre></td></tr></table></figure><h3 id="設定防火牆"><a class="header-anchor" href="#設定防火牆"></a>設定防火牆</h3><p>設定防火牆後，就可以透過 <code>EXTERNAL_IP</code> 位址和 80 port 來連接機器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute firewall-rules create www-firewall --allow tcp:80</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Creating firewall...⠛Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/firewalls/www-firewall].<br>Creating firewall...done.<br>NAME          NETWORK  DIRECTION  PRIORITY  ALLOW   DENY  DISABLED<br>www-firewall  default  INGRESS    1000      tcp:80        False<br></code></pre></td></tr></table></figure><p>執行上面的指令後，應該就能透過外部 IP 位址 (也就是 <code>http://EXTERNAL_IP/</code> ) 來連接剛剛建立的兩個 instance，可以在各別的頁面中，看到各個 instance 的名稱：</p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-01-58.png" alt=""></p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-02-42.png" alt=""></p><h2 id="建立-network-load-balancer"><a class="header-anchor" href="#建立-network-load-balancer"></a>建立 Network Load Balancer</h2><p>Network load balancing 允許你依據收到的 IP 協定資料 (例如：位址、port 和協定類型) 來平衡系統的負載。你還可以取得 HTTP(S) load balancing 沒有提供的一些選項。例如：可以對其他基於 TCP/UDP 的協定 (例如：SMTP 流量) 進行負載平衡。如果你的應用程式對 TCP 連接相關的特性感興趣，network load balancing 也允許你的應用程式去檢查封包，而 HTTP(S) load balancing 則沒有提供。</p><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/load-balancing/network/" target="_blank" rel="noopener">Setting Up Network Load Balancing</a> 文件。</p></blockquote><p>針對你的 instance group 來建立 L3 network load balancer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute forwarding-rules create nginx-lb \</span><br>         --region us-central1 \<br>         --ports=80 \<br>         --target-pool nginx-pool<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../regions/us-central1/forwardingRules/nginx-lb].<br></code></pre></td></tr></table></figure><p>Forwarding rule 要與 target pool 一起使用，以支援 load balancing 功能，要使用 load balancing 就必須建立 forwarding rule，這樣才會將流量導向到特定的 target pool (用於 load balancing)，而下面指令中的 <code>--ports=80</code> 代表指向 target pool 的外部 port 範圍。</p><p>列出專案中所有 Google Compute Engine (GCE) 的 Forwarding rule：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute forwarding-rules list</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME      REGION       IP_ADDRESS      IP_PROTOCOL  TARGET<br>nginx-lb  us-central1  35.202.173.185  TCP          us-central1/targetPools/nginx-pool<br></code></pre></td></tr></table></figure><p>接著透過 <code>http://IP_ADDRESS/</code> 來存取 load balancer，<code>IP_ADDRESS</code> 是上面執行的指令中所輸出的 IP 位址。</p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-05-28.png" alt=""></p><h2 id="建立-http-s-load-balancer"><a class="header-anchor" href="#建立-http-s-load-balancer"></a>建立 HTTP(S) Load Balancer</h2><p>HTTP(S) Load Balancing 提供全球性的 load balancing，能將 HTTP 請求送往你的 instance。你可以設定 URL 規則，將一些 URL 路由 (route) 到一組 instance，並將其他 URL 路由到其他 instance。請求都會路由到最接近使用者的 instance group，前提是該 group 具有足夠的資源，並且適合請求。如果最近的 group 沒有足夠的資源，那請求將會送至具有足夠資源，並且是最接近使用者的 group。</p><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/load-balancing/http/" target="_blank" rel="noopener">HTTP(S) Load Balancer</a> 文件。</p></blockquote><p>首先，建立 <a href="https://cloud.google.com/compute/docs/load-balancing/health-checks" target="_blank" rel="noopener">health check</a>。health check 可以確認 instance 是否有回應 HTTP 或 HTTPS 流量，其他的 <code>http-basic-check</code> 是 legacy health check 的名稱。在專案中，每個 legacy health check 的名稱不能重複：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute http-health-checks create http-basic-check</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/httpHealthChecks/http-basic-check].<br>NAME              HOST  PORT  REQUEST_PATH<br>http-basic-check        80    /<br></code></pre></td></tr></table></figure><p>定義 HTTP service，並將 port 號 map 到 instance group 的相關 port。現在 load balancing service 可以將流量 forward 到指定的 port 號：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instance-groups managed \</span><br>       set-named-ports nginx-group \<br>       --named-ports http:80<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../zones/us-central1-a/instanceGroups/nginx-group].<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/instance-groups/creating-groups-of-managed-instances" target="_blank" rel="noopener">Creating groups of managed instances</a> 文件。</p></blockquote><p>建立 <a href="https://cloud.google.com/compute/docs/reference/latest/backendServices" target="_blank" rel="noopener">後端服務 (backend service)</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute backend-services create nginx-backend \</span><br>      --protocol HTTP \<br>      --http-health-checks http-basic-check \<br>      --global<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/backendServices/nginx-backend].<br>NAME           BACKENDS  PROTOCOL<br>nginx-backend            HTTP<br></code></pre></td></tr></table></figure><p>將 instance group 加到後端服務中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute backend-services add-backend nginx-backend \</span><br>    --instance-group nginx-group \<br>    --instance-group-zone us-central1-a \<br>    --global<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Updated [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/backendServices/nginx-backend].<br></code></pre></td></tr></table></figure><p>建立一個預設的 URL map，將所有收到的請求導向你的所有 instance：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute url-maps create web-map \</span><br>    --default-service nginx-backend<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/urlMaps/web-map].<br>NAME     DEFAULT_SERVICE<br>web-map  backendServices/nginx-backend<br></code></pre></td></tr></table></figure><blockquote><p>若要根據請求的 URL 將流量導向不同的 instance，詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/load-balancing/http/content-based-example" target="_blank" rel="noopener">content-based routing</a> 文件。</p></blockquote><p>建立 target HTTP proxy，將請求路由到 URL map：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute target-http-proxies create http-lb-proxy \</span><br>    --url-map web-map<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/targetHttpProxies/http-lb-proxy].<br>NAME           URL_MAP<br>http-lb-proxy  web-map<br></code></pre></td></tr></table></figure><p>建立 <a href="https://cloud.google.com/load-balancing/docs/https/global-forwarding-rules" target="_blank" rel="noopener">global forwarding rule</a>，以處理和路由收到的請求。forwarding rule 會根據指定的 IP 位址、IP 協定和 port，將流量送至特定的 target HTTP 或 HTTPS proxy。global forwarding rule 不支援多 port。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute forwarding-rules create http-content-rule \</span><br>        --global \<br>        --target-http-proxy http-lb-proxy \<br>        --ports 80<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-.../global/forwardingRules/http-content-rule].<br></code></pre></td></tr></table></figure><p>建立 global forwarding rule 後，設定可能需要幾分鐘才能傳播 (propagate)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute forwarding-rules list</span><br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME               REGION       IP_ADDRESS      IP_PROTOCOL  TARGET<br>http-content-rule               34.96.77.47     TCP          http-lb-proxy<br>nginx-lb           us-central1  35.202.173.185  TCP          us-central1/targetPools/nginx-pool<br></code></pre></td></tr></table></figure><p>複製 forwarding rule 內的 <code>http-content-rule</code> 中的 <code>IP_ADDRESS</code>。</p><p>你可能需要幾分鐘才能透過瀏覽器連接到 <code>http://IP_ADDRESS/</code>。如果無法連接 (就像下圖這樣)，請稍等一下，再重新整理瀏覽器：</p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-15-02.png" alt=""></p><p>下面兩張圖就是多次連接 <code>http://IP_ADDRESS/</code> 的時候，常會看到畫面在這兩個之前建立的 VM instance 間切換：</p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-16-47.png" alt=""></p><p><img src="../images/gcp-network-and-http-load-balancer/2019-04-22-20-17-26.png" alt=""></p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/558?parent=catalog" target="_blank" rel="noopener">Set Up Network and HTTP Load Balancers</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/558?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Set Up Network and HTTP Load Balancers&lt;/a&gt;」這個 quest 所學到的內容，包括如何建立多個 web server instance，以及如何建立 network load balancer 和 HTTP load balancer。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/cloud/"/>
    
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
      <category term="HTTP" scheme="https://titangene.github.io/tags/http/"/>
    
      <category term="Load Balancer" scheme="https://titangene.github.io/tags/load-balancer/"/>
    
  </entry>
  
  <entry>
    <title>Google Kubernetes Engine (GKE) 入門</title>
    <link href="https://titangene.github.io/article/getting-started-with-google-k8s-engine.html"/>
    <id>https://titangene.github.io/article/getting-started-with-google-k8s-engine.html</id>
    <published>2019-04-19T09:30:24.000Z</published>
    <updated>2019-04-30T16:00:09.450Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gke.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/878?parent=catalog" target="_blank" rel="noopener">Kubernetes Engine: Qwik Start</a>」這個 quest 所學到的內容，包括如何透過 GKE 建立容器和部署容器化應用程式。</p><a id="more"></a><p><img src="../images/getting-started-with-google-k8s-engine/2019-04-18-23-36-15.png" alt=""></p><p><a href="https://cloud.google.com/kubernetes-engine/" target="_blank" rel="noopener">Google Kubernetes Engine</a> (GKE) 提供了一個代管環境，可以使用 Google 基礎架構來部署、管理和擴展容器化應用程式。GKE 提供的環境是由多台機器 (特別是 <a href="https://cloud.google.com/compute" target="_blank" rel="noopener">Google Compute Engine</a> instance) 組成，組成一個<a href="https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture" target="_blank" rel="noopener">容器叢集</a>。在此 lab 中，你將透過 GKE 來實際練習如何建立容器和部署應用程式。</p><h2 id="gke-的叢集編排管理-orchestration"><a class="header-anchor" href="#gke-的叢集編排管理-orchestration"></a>GKE 的叢集編排管理 (orchestration)</h2><p>GKE 叢集是由 <a href="https://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a> 開源叢集管理系統提供技術支援。你可以透過 Kubernetes 提供的機制與容器叢集互動。可以使用 Kubernetes 指令和資源來部署以及管理應用程式、執行管理任務、制訂政策，以及監控已部署工作負載 (workload) 的健康狀態。</p><p>Kubernetes 採用相同的設計原則來執行常用的 Google 服務，並提供相同的優勢：應用程序容器的自動管理、監控與有效性探測 (liveness probe)、自動擴展，滾動升級…等。當您在容器叢集上執行應用程序時，你所使用的技術是由 Google 在容器中執行 production 工作負載的十餘年經驗的技術。</p><h2 id="gcp-上的-kubernetes"><a class="header-anchor" href="#gcp-上的-kubernetes"></a>GCP 上的 Kubernetes</h2><p>執行 GKE 叢集時，你也可以獲得 GCP 所提供的進階叢集管理功能優點，其中包括：</p><ul><li>Google Compute Engine (GCE) instances 提供的<a href="https://cloud.google.com/compute/docs/load-balancing-and-autoscaling" target="_blank" rel="noopener">負載平衡</a></li><li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-pools" target="_blank" rel="noopener">節點池 (Node Pools)</a> 可以指定叢集中的子集節點，以獲得額外的靈活性</li><li><a href="https://cloud.google.com/kubernetes-engine/docs/cluster-autoscaler" target="_blank" rel="noopener">自動擴展 (Automatic scaling)</a> 叢集的節點 instance 數量</li><li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-upgrades" target="_blank" rel="noopener">自動升級</a>叢集的節點軟體</li><li><a href="https://cloud.google.com/kubernetes-engine/docs/concepts/node-auto-repair" target="_blank" rel="noopener">自動修復節點</a>：可維護節點的健康狀態和可用性</li><li>使用 Stackdriver 來<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/logging" target="_blank" rel="noopener">記錄 (logging)</a> 和<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/monitoring" target="_blank" rel="noopener">監控</a>，用於查看叢集的狀態</li></ul><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><p>在點擊「Start Lab」之前，準備好網路瀏覽器 (推薦用 Google Chrome)，並且至少 40 分鐘可以專注的時間，因為 lab 是有時間限制，當你按下「Start Lab」開始學習時，無法暫停倒數計時，你只能在這段時間內使用 lab 提供給你的全新暫時 GCP Console 可用帳號，時間到之後的幾分鐘就會自動登出。</p><div class="warning"><p>注意：如果你有自己的個人 GCP 帳號或專案，請不要在此 lab 使用</p></div><h2 id="開始你的-lab-然後登入-gcp-console"><a class="header-anchor" href="#開始你的-lab-然後登入-gcp-console"></a>開始你的 Lab，然後登入 GCP Console</h2><ol><li>如果準備要開始，可以點擊右上角的「Start Lab」開始：</li></ol><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-00-25-52.png" alt=""></p><ol start="2"><li>接著會出現這個畫面，因為我參加 <a href="https://www.facebook.com/events/2005848903055499/" target="_blank" rel="noopener">GDG Tainan</a> 的活動，活動有提供 Qwiklabs 一個月的免費額度，所以我點選下圖左邊的「Use Subscription」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-21-15.png" alt=""></p><ol start="3"><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><ol start="4"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="5"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="6"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="7"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="啟動-google-cloud-shell"><a class="header-anchor" href="#啟動-google-cloud-shell"></a>啟動 Google Cloud Shell</h2><p>Google Cloud Shell 是載入了開發工具的 VM，它提供 5GB 的 home 目錄，並在 Google Cloud 上執行。可用 Google Cloud Shell 提供的 command-line 來存取 GCP 的資源。</p><ol><li>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><ol start="2"><li>在打開的對話框內，點擊「START CLOUD SHELL」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-25-23.png" alt=""></p><ol start="3"><li>連接和提供環境需要一些時間：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-05.png" alt=""></p><ol start="4"><li>連接後，就代表你已經過身份驗證，專案已設置為 <code>PROJECT_ID</code>，以下圖的為例，此專案的 ID 為 <code>qwiklabs-gcp-f9d61ede8167e6b0</code>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-34.png" alt=""></p><p><code>gcloud</code> 是 GCP 的 command-line 工具，他已預先安裝在 Cloud Shell 上，並且支援 tab 自動補齊 (tab-completion)。</p><p>使用下面指令可列出有效帳號名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud auth list</span><br>          Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>可以使用以下指令列出專案 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud config list project</span><br>[core]<br>project = qwiklabs-gcp-f9d61ede8167e6b0<br><br>Your active configuration is: [cloudshell-9292]<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener">Google Cloud gcloud Overview</a> 文件。</p></blockquote><h2 id="設定預設的-compute-zone"><a class="header-anchor" href="#設定預設的-compute-zone"></a>設定預設的 compute zone</h2><p><a href="https://cloud.google.com/compute/docs/regions-zones/#available" target="_blank" rel="noopener">compute zone</a> 是你的叢集及其資源所在的大概區域位置，例如：<code>us-central1-a</code> 是 <code>us-central1</code> region 中的一個 zone。</p><p>在 Cloud Shell 中啟用新的 session 並執行以下指令，將預設 compute zone 設為 <code>us-central1-a</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud config <span class="hljs-built_in">set</span> compute/zone us-central1<span class="hljs-_">-a</span></span><br>Updated property [compute/zone].<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/managing-clusters#before_you_begin" target="_blank" rel="noopener">Managing clusters</a> 文件。</p></blockquote><h2 id="建立-gke-叢集"><a class="header-anchor" href="#建立-gke-叢集"></a>建立 GKE 叢集</h2><p>一個<a href="https://cloud.google.com/kubernetes-engine/docs/concepts/cluster-architecture" target="_blank" rel="noopener">叢集</a>包含至少一個叢集主要 (master) 機器和多個稱為 node 的工作 (worker) 機器組成。node 是 <a href="https://cloud.google.com/compute/docs/instances/" target="_blank" rel="noopener">Google Compute Engine (GCE) 的 VM instance</a>，執行 Kubernetes 的必要程序 (process)，使它們成為叢集的一部分。</p><p>若要建立叢集，請執行以下指令，並將 <code>[CLUSTER-NAME]</code> 替換為自訂的叢集名稱 (例如：<code>my-cluster</code> )。叢集名稱必須以字母開頭，結尾必須是字母或數字，且不能超過 40 個字元。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud container clusters create [CLUSTER-NAME]</span><br></code></pre></td></tr></table></figure><p>你可以無視下面這些輸出內的任何警告：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">WARNING: In June 2019, node auto-upgrade will be enabled by default for newly created clusters and node pools. To disable it, use the `--no-enable-autoupgrade`flag.<br>WARNING: Starting in 1.12, new clusters will have basic authentication disabled by default. Basic authentication can be enabled (or disabled) manually using the `--[no-]enable-basic-auth` flag.<br>WARNING: Starting in 1.12, new clusters will not have a client certificate issued. You can manually enable (or disable) the issuance of the client certificate using the `--[no-]issue-client-certificate` flag.<br>WARNING: Currently VPC-native is not the default mode during cluster creation. In the future, this will become the default mode and can be disabled using `--no-enable-ip-alias` flag. Use `--[no-]enable-ip-alias` flag to suppress this warning.<br>WARNING: Starting in 1.12, default node pools in new clusters will have their legacy Compute Engine instance metadata endpoints disabled by default. To create a cluster with legacy instance metadata endpoints disabled in the default node pool, run `clusters create` with the flag `--metadata disable-legacy-endpoints=true`.<br>This will enable the autorepair feature for nodes. Please see https://cloud.google.com/kubernetes-engine/docs/node-auto-repair for more information on node autorepairs.<br>WARNING: Starting in Kubernetes v1.10, new clusters will no longer get compute-rw and storage-ro scopes added to what is specified in --scopes (though the latter will remain included in the default --scopes). To use these scopes, add them explicitly to --scopes. To use the new behavior, set container/new_scopes_behavior property (gcloud config set container/new_scopes_behavior true).<br></code></pre></td></tr></table></figure><p>建立叢集可能需要一些時間，很快應該會看到類似下面的輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME        LOCATION       MASTER_VERSION  MASTER_IP      MACHINE_TYPE   NODE_VERSION   NUM_NODES  STATUS<br>my-cluster  us-central1-a  1.11.7-gke.12   104.154.18.48  n1-standard-1  1.11.7-gke.12  3          RUNNING<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/creating-a-cluster" target="_blank" rel="noopener">Creating a cluster</a> 文件。</p></blockquote><h2 id="取得叢集的驗證憑證"><a class="header-anchor" href="#取得叢集的驗證憑證"></a>取得叢集的驗證憑證</h2><p>建立叢集後，需要取得驗證憑證 (authentication credentials) 才能操作叢集。</p><p>執行下面指定來對叢集進行驗證，將 <code>[CLUSTER-NAME]</code> 替換成叢集名成：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud container clusters get-credentials [CLUSTER-NAME]</span><br></code></pre></td></tr></table></figure><p>輸出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Fetching cluster endpoint and auth data.<br>kubeconfig entry generated for my-cluster.<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-access-for-kubectl" target="_blank" rel="noopener">Cluster access for kubectl</a> 文件。</p></blockquote><h2 id="將應用部署至叢集"><a class="header-anchor" href="#將應用部署至叢集"></a>將應用部署至叢集</h2><p>現在你已經建立了一個叢集，可以將<a href="https://cloud.google.com/kubernetes-engine/docs/concepts/kubernetes-engine-overview" target="_blank" rel="noopener">容器化應用程式</a>部署到該叢集。在此 lab 中，你將在叢集中執行 <code>hello-app</code>。</p><p>GKE 使用 Kubernetes 物件來建立和管理叢集的資源。Kubernetes 提供 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployment</a> 物件來部署 stateless 的應用，例如：web server。<a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a> 物件定義了從網際網路上存取應用程式的規則和負載平衡。</p><p>在 Cloud Shell 中執行下面的 <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run" target="_blank" rel="noopener"><code>kubectl run</code></a> 指令，從 <code>hello-app</code> 容器 image 建立新的名為 <code>hello-server</code> 的 <a href="https://kubernetes.io/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployment</a>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl run hello-server --image=gcr.io/google-samples/hello-app:1.0 --port 8080</span><br>deployment.apps "hello-server" created<br></code></pre></td></tr></table></figure><blockquote><p>我在 Github 上面找到 <code>hello-app</code> image 的專案原始碼：<a href="https://github.com/GoogleCloudPlatform/kubernetes-engine-samples/tree/master/hello-app" target="_blank" rel="noopener">GoogleCloudPlatform/kubernetes-engine-samples</a></p></blockquote><blockquote><p>如果想在自己的專案上使用自己建置的容器 image，並將此 image 的應用部署至 GKE，可參考官方的 <a href="https://cloud.google.com/kubernetes-engine/docs/tutorials/hello-app" target="_blank" rel="noopener">Deploying a containerized web application</a> 文件。</p></blockquote><p>此 Kubernetes 指令建立一個代表 <code>hello-app</code> 的 Deployment 物件。在此指令中：</p><ul><li><code>--image</code>：指定要部署的容器 image。在這種情況下，該指令從 <a href="https://cloud.google.com/container-registry/docs" target="_blank" rel="noopener">Google Container Registry</a> bucket 中 pull 範例 image。<code>gcr.io/google-samples/hello-app:1.0</code> 代表這個指令要 pull 的特定 image 版本。如果未指定版本，會使用最新版</li><li><code>--port</code>：指定容器要公開的 port</li></ul><h2 id="將應用公開發佈到網際網路"><a class="header-anchor" href="#將應用公開發佈到網際網路"></a>將應用公開發佈到網際網路</h2><p>根據預設，在 GKE 上執行的容器無法從網際網路存取，因為這些容器沒有外部 IP 位址。所以你必須執行 <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#expose" target="_blank" rel="noopener"><code>kubectl expose</code></a> 這個指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl expose deployment hello-server --<span class="hljs-built_in">type</span>=<span class="hljs-string">"LoadBalancer"</span></span><br>service/hello-server exposed<br></code></pre></td></tr></table></figure><p>此指令會建立一個 Kubernetes Service，它是一個 Kubernetes 資源。GKE 會為應用程式建立外部 IP，明確地將應用程序公開給來自網際網路的流量 (外部流量)。加上 <code>type=&quot;LoadBalancer&quot;</code> 參數會為容器建立一個 GCE 的 Load Balancer (在自己的專案上使用<a href="https://cloud.google.com/compute/pricing#lb" target="_blank" rel="noopener">需要計費</a>)。</p><p>GKE 會將外部 IP 位址指派給 Service 資源，而不是指派給 Deployment。如果你想要找出 GKE 為應用程式佈建 (provisioned) 的外部 IP，可執行 <a href="https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#get" target="_blank" rel="noopener"><code>kubectl get service</code></a> 來檢查 <code>hello-server</code> Service：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl get service hello-server</span><br></code></pre></td></tr></table></figure><div class="info"><p>產生外部 IP 位址可能需要一分鐘。如果 <code>EXTERNAL-IP</code> 欄位顯示為 <code>pending</code> 狀態時 (如下)，請等待一段時間後，再次執行上面的指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME           TYPE           CLUSTER-IP     EXTERNAL-IP   PORT(S)          AGE<br>hello-server   LoadBalancer   10.39.249.21   &lt;pending&gt;     8080:31693/TCP   51s<br></code></pre></td></tr></table></figure></div><p>確認應用程式的外部 IP 位址後 ( <code>EXTERNAL-IP</code> 欄位提供的 IP)，請複製此 IP 位址，以下面的輸出範例來說，要複製的 Service 外部 IP 位址就是 <code>35.222.35.96</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">NAME           TYPE           CLUSTER-IP     EXTERNAL-IP    PORT(S)          AGE<br>hello-server   LoadBalancer   10.39.249.21   35.222.35.96   8080:31693/TCP   1m<br></code></pre></td></tr></table></figure><p>接著將剛剛複製的外部 IP 位址，加上公開的 port，網址格式就會像下面這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">http://[EXTERNAL-IP]:8080<br></code></pre></td></tr></table></figure><p>使用瀏覽器開啟此網址，查看應用程式是否能存取。</p><p>看到的頁面應該會像下圖這樣：</p><p><img src="../images/getting-started-with-google-k8s-engine/2019-04-18-23-26-18.png" alt=""></p><h2 id="清除"><a class="header-anchor" href="#清除"></a>清除</h2><p>執行下面的指令來刪除 Service，此步驟將取消分配為你的 Service 所建立的 Cloud Load Balancer：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> kubectl delete service hello-server</span><br></code></pre></td></tr></table></figure><p>執行下面的指令來刪除容器叢集，此步驟會一併刪除容器叢集的組成資源，例如：運算執行個體、磁碟和網路資源：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud container clusters delete [CLUSTER-NAME]</span><br>The following clusters will be deleted.<br> - [my-cluster] in [us-central1-a]<br><br>Do you want to continue (Y/n)?<br></code></pre></td></tr></table></figure><p>當出現提示時，輸入 <code>Y</code> 進行確認。刪除叢集可能需要一些時間。刪除叢集後的輸出會像下面這樣：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">The following clusters will be deleted.<br> - [my-cluster] in [us-central1-a]<br><br>Do you want to continue (Y/n)?  y<br><br>Deleting cluster my-cluster...done.<br>Deleted [https://container.googleapis.com/v1/projects/qwiklabs-gcp-deb218c6553ee39c/zones/us-central1-a/clusters/my-cluster].<br></code></pre></td></tr></table></figure><blockquote><p>詳情可查看官方的 <a href="https://cloud.google.com/kubernetes-engine/docs/how-to/deleting-a-cluster" target="_blank" rel="noopener">Deleting a cluster | Google Kubernetes Engine</a> 文件。</p></blockquote><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/878?parent=catalog" target="_blank" rel="noopener">Kubernetes Engine: Qwik Start | Qwiklabs</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gke.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/878?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Kubernetes Engine: Qwik Start&lt;/a&gt;」這個 quest 所學到的內容，包括如何透過 GKE 建立容器和部署容器化應用程式。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/cloud/"/>
    
    
      <category term="Container" scheme="https://titangene.github.io/tags/container/"/>
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
      <category term="Load Balancer" scheme="https://titangene.github.io/tags/load-balancer/"/>
    
      <category term="Kubernetes" scheme="https://titangene.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Google Cloud Shell 入門：gcloud &amp; gsutil</title>
    <link href="https://titangene.github.io/article/getting-started-with-cloud-shell-gcloud-and-gsutil.html"/>
    <id>https://titangene.github.io/article/getting-started-with-cloud-shell-gcloud-and-gsutil.html</id>
    <published>2019-04-17T08:56:38.000Z</published>
    <updated>2019-04-17T08:56:02.565Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gcp.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/563?parent=catalog" target="_blank" rel="noopener">Getting Started with Cloud Shell &amp; gcloud</a>」這個 quest 所學到的內容，包括如何使用 <code>gcloud</code> 指令，以及如何使用 <code>gsutil</code> 工具來管理 Cloud Storage 資源，將檔案上傳至指定的 bucket。</p><a id="more"></a><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-01-56-04.png" alt=""></p><p>Google Cloud Shell 為你提供 <code>gcloud</code> command-line 存取 GCP 上託管的運算資源。Cloud Shell 是基於 Debian 的 VM，具有 5 GB persistent disk 的 home 目錄，讓你可以輕鬆管理 GCP 專案和資源。你需要的 Cloud SDK <code>gcloud</code> 和其他工具都已預裝在 Cloud Shell 中，讓你可以快速啟動和執行。</p><blockquote><p>若想了解如何 <a href="./gcp-vm-nignx-web-server.html">在 GCP 上建立 VM 架設 NIGNX Web server</a> 可參考此篇。<br>若想了解如何 <a href="./gcp-vm-windows-server.html">在 GCP 上建立 VM 架設 Windows Server</a> 可參考此篇。</p></blockquote><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><p>在點擊「Start Lab」之前，準備好網路瀏覽器 (推薦用 Google Chrome)，並且至少 40 分鐘可以專注的時間，因為 lab 是有時間限制，當你按下「Start Lab」開始學習時，無法暫停倒數計時，你只能在這段時間內使用 lab 提供給你的全新暫時 GCP Console 可用帳號，時間到之後的幾分鐘就會自動登出。</p><div class="warning"><p>注意：如果你有自己的個人 GCP 帳號或專案，請不要在此 lab 使用</p></div><h2 id="開始你的-lab-然後登入-gcp-console"><a class="header-anchor" href="#開始你的-lab-然後登入-gcp-console"></a>開始你的 Lab，然後登入 GCP Console</h2><ol><li>如果準備要開始，可以點擊右上角的「Start Lab」開始：</li></ol><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-00-25-52.png" alt=""></p><ol start="2"><li>接著會出現這個畫面，因為我參加 <a href="https://www.facebook.com/events/2005848903055499/" target="_blank" rel="noopener">GDG Tainan</a> 的活動，活動有提供 Qwiklabs 一個月的免費額度，所以我點選下圖左邊的「Use Subscription」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-21-15.png" alt=""></p><ol start="3"><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><ol start="4"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="5"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="6"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="7"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="啟動-google-cloud-shell"><a class="header-anchor" href="#啟動-google-cloud-shell"></a>啟動 Google Cloud Shell</h2><p>Google Cloud Shell 是載入了開發工具的 VM，它提供 5GB 的 home 目錄，並在 Google Cloud 上執行。可用 Google Cloud Shell 提供的 command-line 來存取 GCP 的資源。</p><ol><li>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><ol start="2"><li>在打開的對話框內，點擊「START CLOUD SHELL」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-25-23.png" alt=""></p><ol start="3"><li>連接和提供環境需要一些時間：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-05.png" alt=""></p><ol start="4"><li>連接後，就代表你已經過身份驗證，專案已設置為 <code>PROJECT_ID</code>，以下圖的為例，此專案的 ID 為 <code>qwiklabs-gcp-f9d61ede8167e6b0</code>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-34.png" alt=""></p><p><code>gcloud</code> 是 GCP 的 command-line 工具，他已預先安裝在 Cloud Shell 上，並且支援 tab 自動補齊 (tab-completion)。</p><p>使用下面指令可列出有效帳號名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud auth list<br>          Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>可以使用以下指令列出專案 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config list project<br>[core]<br>project = qwiklabs-gcp-f9d61ede8167e6b0<br><br>Your active configuration is: [cloudshell-9292]<br></code></pre></td></tr></table></figure><h2 id="理解-regions-和-zones"><a class="header-anchor" href="#理解-regions-和-zones"></a>理解 Regions 和 Zones</h2><p>Compute Engine 資源位於不同的 regions (地區) 或 zones (區域)。region 是你可以執行資源的所在特定地理位置。每個 region 都有一個或多個 zones。例如，<code>us-central1</code> region 代表美國中部地區，其中包含的 Zones 有 <code>us-central1-a</code>、<code>us-central1-b</code>、<code>us-central1-c</code> 與 <code>us-central1-f</code>。</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-17-58-23.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><p>位於 zone 中的資源都稱為 zonel (區域) 資源，VM instance (實例) 和 persistent disk (永久磁碟) 都位於 zone 中，如果要將 persistent disk 附加到 VM instance，這兩個資源都必須位於同一個 zone 中。同樣，如果要將靜態 IP 位址分配到 instance，此 instance 就必須與靜態 IP 位於同一個 region 中。</p><blockquote><p>詳情可參考 GCP 官方的 <a href="https://cloud.google.com/compute/docs/regions-zones/" target="_blank" rel="noopener">Regions &amp; Zones</a> 文件。</p></blockquote><h2 id="使用-command-line"><a class="header-anchor" href="#使用-command-line"></a>使用 command line</h2><p>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕開啟新的 Cloud Shell session：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><p>啟用 Cloud Shell 後，你可以使用 command line invoke Cloud SDK <code>gcloud</code> 指令或 VM instance 上可用的其他工具，還可以在不同專案和 Cloud Shell session 之間，將要存取的檔案儲存在 persistent disk storage 的 <code>$HOME</code> 目錄內。<code>$HOME</code> 目錄是私有的，其他使用者無法存取。</p><p>可以在任何 <code>gcloud</code> 指令的末端加上 <code>-h</code> 參數來查看使用指南：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud -h<br></code></pre></td></tr></table></figure><p>加上 <code>--help</code> 參數或執行 <code>gcloud help</code> 可以查看更詳細的 help 內容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config --help<br></code></pre></td></tr></table></figure><p>透過按 <code>Enter</code> 或空白建來捲動瀏覽 help 內容，按 <code>q</code> 按鍵會退出內容。</p><p>下面兩個指令是一樣的意思，都是用來查看詳細的 help 內容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config --help<br><span class="hljs-meta">$</span> gcloud help config<br></code></pre></td></tr></table></figure><h2 id="使用你的-home-目錄"><a class="header-anchor" href="#使用你的-home-目錄"></a>使用你的 home 目錄</h2><p>現在讓我們試試你的 <code>HOME</code> 目錄。就算去終止和重啟 VM，Cloud Shell <code>HOME</code> 錄的內容都會在所有 Cloud Shell session 之間的專案中保留。</p><p>變更目前的工作目錄：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> cd $HOME<br></code></pre></td></tr></table></figure><p>使用 <code>vi</code> 打開 <code>.bashrc</code> 設定檔：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> vi ./.bashrc<br></code></pre></td></tr></table></figure><h2 id="使用-gcloud-指令"><a class="header-anchor" href="#使用-gcloud-指令"></a>使用 gcloud 指令</h2><p>檢視環境內的設定列表：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config list<br></code></pre></td></tr></table></figure><p>如果要檢查其他屬性的設定，請在指令後面加上 <code>--all</code> 參數：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config list --all<br></code></pre></td></tr></table></figure><h2 id="管理-cloud-storage-資料"><a class="header-anchor" href="#管理-cloud-storage-資料"></a>管理 Cloud Storage 資料</h2><p>可以使用 Cloud Shell 中的 <code>gsutil</code> 工具來管理 Cloud Storage 資源，包括建立和刪除 bucket 和物件、複製和移動儲存資料以及管理 bucket 和物件 ACLs (Access Control List)。<code>gsutil</code> 還能將資料傳入和傳出 Cloud Shell instance。</p><p>bucket 是用於儲存資料的基本容器，儲存在 Cloud Storage 的所有資料都必須放在 bucket 中。你可以用 bucket 來整理資料、控制資料的存取權，但 bucket 不能像目錄和資料夾可以巢狀儲存。由於<a href="https://cloud.google.com/storage/quotas" target="_blank" rel="noopener">建立和刪除 bucket 有一些限制</a>，所以你設計的儲存應用程式應儘量執行密集的物件作業和相對較少的 bucket 作業。</p><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/storage/docs/key-terms#buckets" target="_blank" rel="noopener">Buckets</a>、<a href="https://cloud.google.com/storage/docs/creating-buckets#storage-create-bucket-gsutil" target="_blank" rel="noopener">Creating Storage Buckets</a> 和 <a href="https://cloud.google.com/storage/docs/access-control/lists?hl=zh-tw" target="_blank" rel="noopener">Access Control List (ACL)</a> 文件。</p></blockquote><p>嘗試建立 Cloud Storage bucket，bucket 名稱不能重複，因此請將 <code>unique-name</code> 替換為其他名稱，或者 append 名稱讓它不重複。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil mb gs://unique-name<br></code></pre></td></tr></table></figure><p>像我是使用名為 <code>unique-name-titan</code> 的 bucket，剛好沒有重複，所以成功建立了 bucket：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil mb gs://unique-name-titan<br>Creating gs://unique-name-titan/...<br></code></pre></td></tr></table></figure><p>如果使用重複的 bucket 名稱就會出現類似下面的訊息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil mb gs://unique-name<br>Creating gs://unique-name/...<br>ServiceException: 409 Bucket unique-name already exists.<br></code></pre></td></tr></table></figure><p>現在來建立一些資料，上傳到你的 bucket。首先，建立一個測試檔案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> vi test.dat<br></code></pre></td></tr></table></figure><p>加一些資料進去：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Welcome to gcloud!<br></code></pre></td></tr></table></figure><p>存儲檔案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">:wq<br></code></pre></td></tr></table></figure><p>現在，上傳一些檔案到你建立的 bucket，請將 <code>unique-name</code> 取代成你的 storage bucket：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil cp test.dat gs://unique-name<br></code></pre></td></tr></table></figure><p>剛剛我是使用 <code>unique-name-titan</code> 的 bucket，所以上傳指令如下，可以看到我已成功上傳：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil cp test.dat gs://unique-name-titan<br>Copying file://test.dat [Content-Type=application/octet-stream]...<br>- [1 files][   19.0 B/   19.0 B]<br>Operation completed over 1 objects/19.0 B.<br></code></pre></td></tr></table></figure><p>如果是使用重複的 bucket 名稱上傳，就會出現類似下面的訊息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gsutil cp test.dat gs://unique-name<br>Copying file://test.dat [Content-Type=application/octet-stream]...<br>BadRequestException: 400 Project does not exist: 666160882299<br></code></pre></td></tr></table></figure><p>若要查看你的 bucket 和檔案，請開啟導航選單，然後選擇「Storage &gt; Browser」：</p><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-01-52-25.png" alt=""></p><p>然後點擊你的 bucket：</p><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-01-53-17.png" alt=""></p><p>你應該會看到 <code>test.dat</code> 這個檔案：</p><p><img src="../images/getting-started-with-cloud-shell-gcloud-and-gsutil/2019-04-16-01-53-59.png" alt=""></p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/563?parent=catalog" target="_blank" rel="noopener">Getting Started with Cloud Shell &amp; gcloud | Qwiklabs</a> (本篇大多數的圖片來源)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/563?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Getting Started with Cloud Shell &amp;amp; gcloud&lt;/a&gt;」這個 quest 所學到的內容，包括如何使用 &lt;code&gt;gcloud&lt;/code&gt; 指令，以及如何使用 &lt;code&gt;gsutil&lt;/code&gt; 工具來管理 Cloud Storage 資源，將檔案上傳至指定的 bucket。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/cloud/"/>
    
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
      <category term="VM" scheme="https://titangene.github.io/tags/vm/"/>
    
  </entry>
  
  <entry>
    <title>在 GCP 上建立 VM 架設 Windows Server</title>
    <link href="https://titangene.github.io/article/gcp-vm-windows-server.html"/>
    <id>https://titangene.github.io/article/gcp-vm-windows-server.html</id>
    <published>2019-04-16T13:17:46.000Z</published>
    <updated>2019-04-30T15:56:57.523Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gcp.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/560?parent=catalog" target="_blank" rel="noopener">Compute Engine: Qwik Start - Windows</a>」這個 quest 所學到的內容，包括如何透過 GCP Console 在 GCP 建立 instance 架設 Windows Server，以及如何使用 <a href="https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm" target="_blank" rel="noopener">Chrome RDP for GCP</a> 擴充功能直接從瀏覽器進行 RDP 連接至 Windows Server。</p><a id="more"></a><p><img src="../images/gcp-vm-windows-server/2019-04-16-00-21-39.png" alt=""></p><p>Google Compute Engine 可讓你在 Google 基礎架構上建立和執行 VM。 Compute Engine 提供擴展、效能和價值，讓你可以輕鬆地在 Google 基礎架構上啟動大型運算群集。</p><p>你可以在 Google Compute Engine 上執行 Windows 應用程式，並利用 VM instance 可用的許多優勢，例如：可靠的<a href="https://cloud.google.com/compute/docs/disks/" target="_blank" rel="noopener">儲存選項</a>、<a href="https://cloud.google.com/compute/docs/vpc" target="_blank" rel="noopener">Google 網路</a>的速度和<a href="https://cloud.google.com/compute/docs/autoscaler/" target="_blank" rel="noopener">自動擴展 (Autoscaling)</a>。</p><p>在此 lab 中，你將學習如何在 Google Compute Engine 中啟動 Windows Server instance，並使用遠端桌面協定連接到該 instance。</p><blockquote><p>若想了解如何 <a href="./gcp-vm-nignx-web-server.html">在 GCP 上建立 VM 架設 NIGNX Web server</a> 可參考此篇。</p></blockquote><p>如果你未在 local 主機上使用 Windows，請安裝第三方的 RDP client，例如：FusionLabs 的 <a href="https://chrome.google.com/webstore/detail/chrome-rdp/cbkkbcmdlboombapidmoeolnmdacpkch" target="_blank" rel="noopener">Chrome RDP</a>。</p><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><p>在點擊「Start Lab」之前，準備好網路瀏覽器 (推薦用 Google Chrome)，並且至少 40 分鐘可以專注的時間，因為 lab 是有時間限制，當你按下「Start Lab」開始學習時，無法暫停倒數計時，你只能在這段時間內使用 lab 提供給你的全新暫時 GCP Console 可用帳號，時間到之後的幾分鐘就會自動登出。</p><div class="warning"><p>注意：如果你有自己的個人 GCP 帳號或專案，請不要在此 lab 使用</p></div><h2 id="開始你的-lab-然後登入-gcp-console"><a class="header-anchor" href="#開始你的-lab-然後登入-gcp-console"></a>開始你的 Lab，然後登入 GCP Console</h2><ol><li>如果準備要開始，可以點擊右上角的「Start Lab」開始：</li></ol><p><img src="../images/gcp-vm-windows-server/2019-04-16-00-56-15.png" alt=""></p><ol start="2"><li>接著會出現這個畫面，因為我參加 <a href="https://www.facebook.com/events/2005848903055499/" target="_blank" rel="noopener">GDG Tainan</a> 的活動，活動有提供 Qwiklabs 一個月的免費額度，所以我點選下圖左邊的「Use Subscription」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-21-15.png" alt=""></p><ol start="3"><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><ol start="4"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="5"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="6"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="7"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="建立-vm-instance"><a class="header-anchor" href="#建立-vm-instance"></a>建立 VM instance</h2><p>在 GCP Console 的左上角，點選「Navigation menu &gt; Compute Engine &gt; VM Instances」：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-18-16-42.png" alt=""></p><p>接著點擊「Create」按鈕建立新的 instance：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-31-03.png" alt=""></p><p>在「Boot disk」部分中，點擊「Change」按鈕以開始配置 boot disk：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-10-06.png" alt=""></p><p>選擇「Windows Server 2012 R2 Datacenter」，然後點擊「Select」按鈕：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-38-30.png" alt=""></p><p>將所有其他設定都保留為預設值。設定好之後，點擊「Create」按鈕建立 instance：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-09-42.png" alt=""></p><h2 id="啟動-google-cloud-shell"><a class="header-anchor" href="#啟動-google-cloud-shell"></a>啟動 Google Cloud Shell</h2><p>Google Cloud Shell 是載入了開發工具的 VM，它提供 5GB 的 home 目錄，並在 Google Cloud 上執行。可用 Google Cloud Shell 提供的 command-line 來存取 GCP 的資源。</p><ol><li>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><ol start="2"><li>在打開的對話框內，點擊「START CLOUD SHELL」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-25-23.png" alt=""></p><ol start="3"><li>連接和提供環境需要一些時間：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-05.png" alt=""></p><ol start="4"><li>連接後，就代表你已經過身份驗證，專案已設置為 <code>PROJECT_ID</code>，以下圖的為例，此專案的 ID 為 <code>qwiklabs-gcp-f9d61ede8167e6b0</code>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-34.png" alt=""></p><p>使用下面指令可列出有效帳號名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud auth list<br>          Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>可以使用以下指令列出專案 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud config list project<br>[core]<br>project = qwiklabs-gcp-f9d61ede8167e6b0<br><br>Your active configuration is: [cloudshell-9292]<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/sdk/gcloud" target="_blank" rel="noopener">Google Cloud gcloud Overview</a> 文件。</p></blockquote><h2 id="測試-windows-startup-的狀態"><a class="header-anchor" href="#測試-windows-startup-的狀態"></a>測試 Windows Startup 的狀態</h2><p>在「VM Instances」頁面上看到帶有綠色狀態的 icon 就代表該 instance 已建立完成，如下圖：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-40-28.png" alt=""></p><p>但是，它可能尚未準備好接受 RDP 連接，因為所有 OS 元件初始化都需要一段時間。</p><p>要查看 server 是否已準備好進行 RDP 連接，請在 Cloud Shell terminal command-line 中執行以下指令，其中的 <code>instance-1</code> 是剛剛建立的 instance 名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud compute instances get-serial-port-output instance-1 --zone us-central1-a<br></code></pre></td></tr></table></figure><p>重複這個指令，直到指令輸出以下內容為止。這個指令的輸出會告訴你 OS 元件已初始化，並且 Windows Server 已準備好接受 RDP 連接 (嘗試下一步)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Finished running startup scripts.<br></code></pre></td></tr></table></figure><p>這個指令完整的輸出訊息會類似下面這樣：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud compute instances get-serial-port-output instance-1 --zone us-central1-a<br>SeaBIOS (version 1.8.2-20190322_093631-google)<br>Total RAM Size = 0x00000000f0000000 = 3840 MiB<br>CPUs found: 1     Max CPUs supported: 1<br>found virtio-scsi at 0:3<br>virtio-scsi vendor='Google' product='PersistentDisk' rev='1' type=0 removable=0<br>virtio-scsi blksize=512 sectors=104857600 = 51200 MiB<br>drive 0x000f29f0: PCHS=0/0/0 translation=lba LCHS=1024/255/63 s=104857600<br>Booting from Hard Disk 0...<br>2019/04/15 15:39:21 GCEWindowsAgent: GCE Agent Started (version 4.6.0@1)<br>2019/04/15 15:39:56 GCEInstanceSetup: Starting sysprep specialize phase.<br>2019/04/15 15:39:57 GCEInstanceSetup: All networks set to DHCP.<br>2019/04/15 15:39:57 GCEInstanceSetup: Running 'netsh' with arguments 'interface ipv4 set interface Ethernet mtu=1460'<br>2019/04/15 15:39:57 GCEInstanceSetup: --&gt; Ok.<br>2019/04/15 15:39:58 GCEInstanceSetup: MTU set to 1460.<br>2019/04/15 15:39:58 GCEInstanceSetup: Running 'route' with arguments '/p add 169.254.169.254 mask 255.255.255.255 0.0.0.0 if 12 metric 1'<br>2019/04/15 15:39:58 GCEInstanceSetup: --&gt; OK!<br>2019/04/15 15:39:58 GCEInstanceSetup: Added persistent route to metadata netblock via first netkvm adapter.<br>2019/04/15 15:39:58 GCEInstanceSetup: Getting hostname from metadata server.<br>2019/04/15 15:39:58 GCEInstanceSetup: Changing hostname from WIN-MQ2QFF14J03 to instance-1.<br>2019/04/15 15:39:58 GCEInstanceSetup: Renamed from WIN-MQ2QFF14J03 to instance-1.<br>2019/04/15 15:39:58 GCEMetadataScripts: Starting specialize scripts (version 4.2.1@1).<br>2019/04/15 15:39:58 GCEMetadataScripts: No specialize scripts to run.<br>2019/04/15 15:39:58 GCEMetadataScripts: Finished running specialize scripts.<br>2019/04/15 15:39:58 GCEInstanceSetup: Finished with sysprep specialize phase, restarting...<br>2019/04/15 15:39:59 GCEWindowsAgent: GCE Agent Stopped<br>SeaBIOS (version 1.8.2-20190322_093631-google)<br>Total RAM Size = 0x00000000f0000000 = 3840 MiB<br>CPUs found: 1     Max CPUs supported: 1<br>found virtio-scsi at 0:3<br>virtio-scsi vendor='Google' product='PersistentDisk' rev='1' type=0 removable=0<br>virtio-scsi blksize=512 sectors=104857600 = 51200 MiB<br>drive 0x000f29f0: PCHS=0/0/0 translation=lba LCHS=1024/255/63 s=104857600<br>Booting from Hard Disk 0...<br>2019/04/15 15:40:36 GCEWindowsAgent: GCE Agent Started (version 4.6.0@1)<br>2019/04/15 15:40:43 GCEInstanceSetup: Disabled Ctrl + Alt + Del.<br>2019/04/15 15:40:43 GCEInstanceSetup: Enable RDP firewall rules.<br>2019/04/15 15:40:43 GCEInstanceSetup: Running 'netsh' with arguments 'advfirewall firewall set rule group=remote desktop new enable=Yes'<br>2019/04/15 15:40:43 GCEInstanceSetup: --&gt; Updated 3 rule(s).<br>2019/04/15 15:40:43 GCEInstanceSetup: --&gt; Ok.<br>2019/04/15 15:40:43 GCEInstanceSetup: Restarting Terminal Service services, to enable RDP.<br>2019/04/15 15:40:44 GCEInstanceSetup: Enabled Remote Desktop.<br>2019/04/15 15:40:44 GCEInstanceSetup: Configuring WinRM...<br>2019/04/15 15:40:47 GCEInstanceSetup: Running 'netsh' with arguments 'advfirewall firewall add rule profile=any name=Windows Remote Management (HTTPS-In) dir=in localport=5986 protocol=TCP action=allow'<br>2019/04/15 15:40:47 GCEInstanceSetup: --&gt; Ok.<br>2019/04/15 15:40:48 GCEInstanceSetup: Setup of WinRM complete.<br>2019/04/15 15:40:48 GCEInstanceSetup: Running startup scripts from metadata server.<br>2019/04/15 15:40:48 GCEInstanceSetup: Running 'schtasks' with arguments '/run /tn GCEStartup'<br>2019/04/15 15:40:48 GCEInstanceSetup: --&gt; SUCCESS: Attempted to run the scheduled task "GCEStartup".<br>2019/04/15 15:40:48 GCEInstanceSetup: ------------------------------------------------------------<br>2019/04/15 15:40:48 GCEInstanceSetup: Instance setup finished. instance-1 is ready to use.<br>2019/04/15 15:40:48 GCEInstanceSetup: ------------------------------------------------------------<br>2019/04/15 15:40:51 GCEInstanceSetup: Checking instance license activation status.<br>2019/04/15 15:40:51 GCEInstanceSetup: instance-1 needs to be activated by a KMS Server.<br>2019/04/15 15:40:51 GCEInstanceSetup: Key Management Service machine name set to kms.windows.googlecloud.com successfully.<br>2019/04/15 15:40:51 GCEInstanceSetup: Installed product key W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9 successfully.<br>2019/04/15 15:40:51 GCEInstanceSetup: Activating instance...<br>2019/04/15 15:40:52 GCEInstanceSetup: Activating Windows(R), ServerDatacenter edition (00091344-1ea4-4f37-b789-01750ba6988c) ...<br>2019/04/15 15:40:52 GCEInstanceSetup: Product activated successfully.<br>2019/04/15 15:40:52 GCEInstanceSetup: Activation successful.<br>2019/04/15 15:40:53 GCEMetadataScripts: Starting startup scripts (version 4.2.1@1).<br>2019/04/15 15:40:53 GCEMetadataScripts: No startup scripts to run.<br>2019/04/15 15:40:53 GCEMetadataScripts: Finished running startup scripts.<br><br><br>Specify --start=4643 in the next get-serial-port-output invocation to get only the new output starting from here.<br></code></pre></td></tr></table></figure><h2 id="連接-instance"><a class="header-anchor" href="#連接-instance"></a>連接 instance</h2><p>點擊 VM 的名稱：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-09-15.png" alt=""></p><p>在「Remote Access」部分點擊「Set Windows Password」按鈕：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-11-50.png" alt=""></p><p>輸入 username 後，點擊「Set」按鈕來產生此 Windows instance 的密碼。如果沒有此 username 的 Windows 帳號，就會建立該帳號並使用新密碼，如果已有此帳號，密碼則會被重設：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-50-21.png" alt=""></p><p>複製密碼並儲存，稍後登入 instance 時會用到：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-14-07.png" alt=""></p><h2 id="使用遠端桌面-rdp-進入-windows-server"><a class="header-anchor" href="#使用遠端桌面-rdp-進入-windows-server"></a>使用遠端桌面 (RDP) 進入 Windows Server</h2><p>可以使用 <a href="https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm" target="_blank" rel="noopener">Chrome RDP for Google Cloud Platform</a> 擴充功能直接從瀏覽器進行 RDP 連接，點擊「RDP」按鈕進行連接：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-16-16.png" alt=""></p><div class="info"><p>如果剛剛是用 Chrome 的無痕模式登入帳號，就會發生點擊「RDP」按鈕沒有反應的狀況，換成原本的模式就可以正常使用。</p></div><p>它會提示你安裝 RDP 擴充功能。安裝完成後，GCP 會打開像下圖的登入畫面，請使用 Windows 使用者和密碼登入 (貼上之前儲存的密碼)：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-17-26.png" alt=""></p><p>點擊「Continue」按鈕以確認你要連接：</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-17-54.png" alt=""></p><p>打開 Server Manager 時，就會連接到 Windows Server 上的 VM instance。</p><p><img src="../images/gcp-vm-windows-server/2019-04-15-23-59-49.png" alt=""></p><h2 id="使用-rdp-client-複製和貼上"><a class="header-anchor" href="#使用-rdp-client-複製和貼上"></a>使用 RDP client 複製和貼上</h2><p>登入到 instance 後，可以按 <code>Ctrl + V</code> 貼上資料 (如果是 Mac 的使用者，按 <code>Cmd + V</code> 會無法貼上）。如果要貼至 PuTTY 和 Powershell，請按滑鼠右鍵就可以貼上。如果在 Powershell 視窗中，請確保已點擊該視窗，否則會無法貼上。</p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/560?parent=catalog" target="_blank" rel="noopener">Compute Engine: Qwik Start - Windows</a> (本篇大多數的圖片來源)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/560?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Compute Engine: Qwik Start - Windows&lt;/a&gt;」這個 quest 所學到的內容，包括如何透過 GCP Console 在 GCP 建立 instance 架設 Windows Server，以及如何使用 &lt;a href=&quot;https://chrome.google.com/webstore/detail/chrome-rdp-for-google-clo/mpbbnannobiobpnfblimoapbephgifkm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Chrome RDP for GCP&lt;/a&gt; 擴充功能直接從瀏覽器進行 RDP 連接至 Windows Server。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows Server" scheme="https://titangene.github.io/categories/windows-server/"/>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/windows-server/cloud/"/>
    
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
      <category term="VM" scheme="https://titangene.github.io/tags/vm/"/>
    
  </entry>
  
  <entry>
    <title>GCP (Google Cloud Platform) 入門</title>
    <link href="https://titangene.github.io/article/getting-started-with-gcp.html"/>
    <id>https://titangene.github.io/article/getting-started-with-gcp.html</id>
    <published>2019-04-15T14:20:20.000Z</published>
    <updated>2019-04-16T12:05:50.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gcp.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/2794?parent=catalog" target="_blank" rel="noopener">A Tour of Qwiklabs and the Google Cloud Platform</a>」這個 quest 所學到的內容，包括如何使用以及認識 Qwiklab 和 GCP。</p><a id="more"></a><p><img src="../images/getting-started-with-gcp/2019-04-15-21-49-27.png" alt=""></p><p><a href="https://cloud.google.com/" target="_blank" rel="noopener">Google Cloud Platform</a> (GCP) 是託管在 Google 基礎架構上的一套雲端服務，從計算和儲存，到資料分析、機器學習、網路、GCP 提供各種服務和 API，可以與任何雲端計算應用程式或專案整合 - 無論是個人還是企業。</p><p>在這個入門等級的 lab 中，可透過使用 <a href="https://cloud.google.com/cloud-console/" target="_blank" rel="noopener">GCP console</a> (瀏覽器內的 UI，可讓您存取和管理 Google Cloud 服務) 來練習使用 GCP，了解 GCP 的主要功能，必了解 Qwiklabs 的環境。</p><h2 id="你會學到什麼"><a class="header-anchor" href="#你會學到什麼"></a>你會學到什麼</h2><ul><li>了解如何使用特定憑證存取 GCP console</li><li>認識 GCP 專案</li><li>了解如何使用 GCP 的導航選單來識別 GCP 服務的類型</li><li>了解 primitive roles 並使用 Cloud IAM 服務檢查特定使用者的可用操作</li><li>了解 Cloud Shell 並使用 <code>gcloud</code> toolkit 來執行指令</li><li>了解 API library 並查看其主要功能</li></ul><blockquote><p>若想了解如何 <a href="./gcp-vm-nignx-web-server.html">在 GCP 上建立 VM 架設 NIGNX Web server</a> 可參考此篇。<br>若想了解如何 <a href="./gcp-vm-windows-server.html">在 GCP 上建立 VM 架設 Windows Server</a> 可參考此篇。</p></blockquote><blockquote><p>其他關於 Qwiklab 的介紹，可至原文 <a href="https://www.qwiklabs.com/focuses/2794?parent=catalog" target="_blank" rel="noopener">A Tour of Qwiklabs and the Google Cloud Platform</a> 查看。</p></blockquote><h2 id="存取-gcp-console"><a class="header-anchor" href="#存取-gcp-console"></a>存取 GCP Console</h2><p>如果已經點擊右上角的「Start Lab」開始，應該會看到左側的「Open Google Console」按鈕變成可以被點擊，而且可以看到有帳號、密碼以及 GCP 專案 ID：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><h3 id="gcp-專案-id"><a class="header-anchor" href="#gcp-專案-id"></a>GCP 專案 ID</h3><p><a href="https://cloud.google.com/docs/overview/#projects" target="_blank" rel="noopener">GCP 專案</a>是你的 Google 雲端資源的組織實體，包含資源和服務，例如：可以包含一個 VM 的 pool，一組資料庫以及將它們彼此連接的網路，專案還包含設定和權限，這些設定和權限可以指定安全規則以及設定誰有權存取哪些資源。而 GCP Project ID 不會重複，用於將 GCP 資源和 API 連接到你的特定專案。</p><h3 id="帳號和密碼"><a class="header-anchor" href="#帳號和密碼"></a>帳號和密碼</h3><p>帳號和密碼是表示在 GCP 身份和存取管理 (Identity and Access Management，IAM) 服務中，具有存取權限身份 (一個或多個角色) 的憑證，允許你在已分配的專案中使用 GCP 資源。這些憑證是臨時的，只能在 lab 限制的存取時間內使用，所以只要計時器倒數到 0 之後，你就無法再使用這些憑證存取這個的 GCP 專案。</p><h2 id="登入-gcp"><a class="header-anchor" href="#登入-gcp"></a>登入 GCP</h2><ol><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><ol start="2"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="3"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="4"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="5"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="gcp-console-中的專案"><a class="header-anchor" href="#gcp-console-中的專案"></a>GCP Console 中的專案</h2><p>GCP Console 的左上角，會看到一個名為 Project info 的面板，畫面如下：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-14-23-05.png" alt=""></p><p>一個專案會有名稱、ID、編號，在使用 GCP 服務時會經常使用這些東西。不過你可以存取多個 GCP 專案。在某些 lab 中，可能會使用多個專案來完成分配的任務。如果點擊帶有專案名稱的下拉式選單並選擇「ALL」，就會看到「Qwiklabs Resources」專案也可見：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-14-31-05.gif" alt=""></p><div class="info"><p>目前不要切換到 Qwiklabs 資源專案！但是，你可以稍後在其他 lab 中使用它。</p></div><p>GCP 的大型企業或有經驗的使用者擁有數十到數千個 GCP 專案的情況還蠻常見的，組織會以不同的方式使用 GCP，因此專案分離在雲端運算服務 (以團隊或產品為例) 是個好方法。</p><p>“Qwiklabs Resources” 是一個包含某些 lab 的檔案，資料集和機器 image 的專案，可以從每個 GCP lab 環境存取。要注意是 “Qwiklabs Resources” 與所有 Qwiklabs 使用者共享資源 (read only)，也就代表你無法刪除或修改它。</p><p>你正在使用名為類似於 <code>qwiklabs-gcp-xxx</code> 的 GCP 專案是臨時的，也就代表專案及其包含的所有內容會在 lab 結束後刪除。每次使用的 lab 都可以存取一個或多個新的 GCP 專案，並且在那裡 (不是 “Qwiklabs Resources” ) 執行所有 lab 的步驟。</p><h2 id="導航選單和服務"><a class="header-anchor" href="#導航選單和服務"></a>導航選單和服務</h2><p>在畫面的左上角有一個類似「三」的 icon：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-15-46-30.png" alt=""></p><p>點擊此按鈕會顯示 (或隱藏) GCP 核心服務的導航選單，如果選單沒有打開，請點擊此 icon 並捲動查看所有提供的服務類型：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-14-32-42.gif" alt=""></p><p>在導航選單可以快速存取平台的服務，可看到共有 7 類 GCP 的服務：</p><ul><li>Compute：包含支援任何類型的工作負載的各種機型。通過不同的運算選項，可以決定你希望如何參與 operational details 和基礎架構等</li><li>Storage：結構化或非結構化、關係資料或非關係資料的資料儲存和資料庫選項</li><li>Networking：平衡應用程式流量和提供安全規則的服務</li><li>Stackdriver：一套跨雲端日誌記錄 (cross-cloud logging)、監控、追蹤和其他服務的可靠性工具</li><li>Tools：管理部署和應用程式建置 pipeline 的開發人員的服務</li><li>Big Data：用於處理和分析大量資料集的服務</li><li>Artificial Intelligence (AI)：可在 GCP 上執行特定的 AI 和機器學習 (ML，machine learning) 任務的一套 API</li></ul><blockquote><p>詳情可查看官方的 <a href="https://cloud.google.com/docs/overview/cloud-platform-services" target="_blank" rel="noopener">About the GCP Services | Google Cloud</a> 文件。</p></blockquote><h2 id="角色和權限"><a class="header-anchor" href="#角色和權限"></a>角色和權限</h2><p>除了雲端運算服務之外，GCP 還包含一組權限和角色，用於定義誰可以存取哪些資源，我們就可以使用雲端身份和存取管理 (<a href="https://cloud.google.com/iam/" target="_blank" rel="noopener">Cloud Identity and Access Management，IAM</a>) 服務來檢查和修改角色和權限。</p><p>請打開導航選單，然後點擊「IAM &amp; admin」，畫面會跳至包含使用者列表的頁面，該頁面指定給予特定帳號的權限和角色。嘗試篩選這些並找到你登入的 “@qwiklabs” 此使用者名稱：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-15-48-30.gif" alt=""></p><p>類似下圖：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-16-27-50.png" alt=""></p><p>member 欄位被設為 <code>google23396_student@qwiklabs.net</code>（與你登入的帳號一樣），name 欄位被設為 <code>google23396_student@qwiklabs.net student</code>。會看到 Role 欄位被設為 <code>Editor</code>，這是 GCP 提供的三種 primitive roles 的其中之一。除非另有指定，否則 primitive roles 是設定專案等級的權限，它們控制對所有 GCP 服務的存取和管理。</p><p>下表是從<a href="https://cloud.google.com/iam/docs/understanding-roles#primitive_roles" target="_blank" rel="noopener">角色文件</a>中提取的定義，其中提供了 viewer、editor 和 owner 角色權限的 overview：</p><table><thead><tr><th>角色名稱</th><th>權限</th></tr></thead><tbody><tr><td>roles/viewer</td><td>不影響狀態的 read-only 操作的權限，例如：查看 (但不能修改) 現有的資源或資料</td></tr><tr><td>roles/editor</td><td>所有 viewer 的權限，以及修改狀態的操作的權限，例如：修改現有資源</td></tr><tr><td>roles/owner</td><td>所有 editor 權限和以下操作的權限：<br>- 管理專案的角色和權限以及專案中的所有資源<br>- 設定專案的計費方式</td></tr></tbody></table><p>因此 editor 能夠建立、修改和刪除 GCP 資源。但是無法在 GCP 專案中新增或刪除 member。</p><h2 id="api-和服務"><a class="header-anchor" href="#api-和服務"></a>API 和服務</h2><p>Google Cloud API 是 GCP 中重要的部分。與服務類似，從企業管理到機器學習等領域的 200 多個 API 都可以輕鬆地與 GCP 專案和應用程式整合。</p><p>API 是 “Application Programming Interfaces”，可以直接或通過 Google Cloud client library 呼叫 (call) 它們。 Cloud API 使用官方的 <a href="https://cloud.google.com/apis/design/" target="_blank" rel="noopener">Google API Design Guide</a> 中描述的資源導向的設計原則。</p><p>當 Qwiklabs 為 lab instance 提供新的 GCP 專案時，它可以在背後啟用大多數的 API，以便你可以立即處理 lab 的任務。但要注意的事，當你在 Qwiklabs 之外建立自己的 GCP 專案時，必須自己啟用某些 API。</p><p>大多數雲端 API 會為你提供有關專案使用該 API 的詳細資訊 (包括流量、錯誤率、延遲時間)，幫助你快速找到使用 Google服務的應用程序問題。你可以通過打開導航選單並點擊「APIs &amp; Services &gt; Library」來查看此資訊：</p><p><img src="../images/getting-started-with-gcp/2019-04-14-17-53-30.gif" alt=""></p><p>在 API 搜尋欄中，輸入 “Dialogflow” 並選擇 Dialogflow API 後，就會看到下圖的頁面：</p><p><img src="../images/getting-started-with-gcp/2019-04-15-17-55-00.png" alt=""></p><p>Dialogflow API 可讓你建置對話式 (conversational) 應用程式 (例如，for Google Assistant)，而無需擔心底層機器學習和自然語言理解 (Natural Language Understanding) schema。</p><p>點擊「ENABLE」按鈕後會跳至新頁面，接著點擊瀏覽器的返回按鈕就可看到「API enabled」：</p><p><img src="../images/getting-started-with-gcp/2019-04-15-18-08-40.png" alt=""></p><p>點擊「Try this API」按鈕會以新分頁的方式開啟 Dialogflow API 的文件，並且可以指定可用的 API 方法。</p><p><img src="../images/getting-started-with-gcp/2019-04-15-22-01-55.png" alt=""></p><blockquote><p>詳情可查看 Google Cloud 中名為 <a href="https://developers.google.com/apis-explorer/#p/" target="_blank" rel="noopener">APIs Explorer</a> 的 hands-on 工具。</p></blockquote><h2 id="cloud-shell"><a class="header-anchor" href="#cloud-shell"></a>Cloud Shell</h2><p><a href="https://cloud.google.com/shell/docs/features" target="_blank" rel="noopener">Cloud Shell</a> 是在瀏覽器內的指令提示 (command prompt) 執行環境，允許你在終端提示 (terminal prompt) 下輸入指令來管理 GCP 專案中的資源和服務。Cloud Shell 能讓你在不離開 console 的情況下執行所有 shell 指令，並有預裝的 command-line 工具。</p><p>在 console 的右上角點擊「Activate Cloud Shell」按鈕，然後在出現提示時點擊「START CLOUD SHELL」按鈕：</p><p><img src="../images/getting-started-with-gcp/2019-04-15-19-08-40.gif" alt=""></p><p>接著會在 console 底部出現一個新的黑色視窗，視窗內會出現類似以下內容的訊息和提示，這代表你已啟動並執行 Cloud Shell session：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">Welcome to Cloud Shell! Type "help" to get started.<br>Your Cloud Platform project in this session is set to qwiklabs-gcp-76ad0f1342e20013.<br>Use "gcloud config set project [PROJECT_ID]" to change to a different project.<br>gcpstaging23396_student@cloudshell:~ (qwiklabs-gcp-76ad0f1342e20013)$<br></code></pre></td></tr></table></figure><p>接著將下面指令複製並貼 (或輸入) 至 Cloud Shell 上，然後按 Enter 鍵執行，應該會看到類似下面的輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> gcloud auth list<br>Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       gcpstaging23396_student@qwiklabs.net<br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>其中 <code>ACTIVE ACCOUNT</code> 是設為你的 GCP IAM 身份 (也就是 <code>googlexxxxxx_student@qwiklabs.net</code> )，<a href="https://cloud.google.com/sdk/gcloud/reference/auth/list" target="_blank" rel="noopener"><code>gcloudauth list</code></a> 指令會列出 GCP 專案中有憑證的帳號。此帳號名稱與之前登入到 console 的 Qwiklabs 帳號相同。：</p><p>如之前所說的，Cloud Shell 預裝了特定的 command-line 工具，主要的 GCP toolkit 是 <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener"><code>gcloud</code></a>，是用於平台上的許多任務，例如：資源管理和使用者身份驗證。除了預裝的 toolkit，Cloud Shell 還附帶標準的 unix CLI 工具和 <a href="https://www.nano-editor.org/" target="_blank" rel="noopener">nano</a> 等文字編輯器，在 Cloud Shell 中可以利用它們來建立和編輯檔案。</p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/2794?parent=catalog" target="_blank" rel="noopener">A Tour of Qwiklabs and the Google Cloud Platform</a> (本篇大多數的圖片來源)</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/2794?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;A Tour of Qwiklabs and the Google Cloud Platform&lt;/a&gt;」這個 quest 所學到的內容，包括如何使用以及認識 Qwiklab 和 GCP。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/cloud/"/>
    
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
  </entry>
  
  <entry>
    <title>在 GCP 上建立 VM 架設 NIGNX Web server</title>
    <link href="https://titangene.github.io/article/gcp-vm-nignx-web-server.html"/>
    <id>https://titangene.github.io/article/gcp-vm-nignx-web-server.html</id>
    <published>2019-04-14T02:17:46.000Z</published>
    <updated>2019-04-30T15:57:08.765Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/gcp.jpg" alt=""></p><p>本篇是紀錄在 Google 的 Qwiklab 平台內，完成「<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine</a>」這個 quest 所學到的內容，包括如何透過 GCP Console 和 command-line 工具 <code>gcloud</code> 在 GCP 建立 instance，如何使用 <code>gcloud</code> 透過 SSH 連接到你的 instance，以及如何在 VM 上部署 NIGNX web server。</p><a id="more"></a><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-13-47-05.png" alt=""></p><p>透過 Google Compute Engine，可在 Google 基礎架構上，建立執行不同作業系統的 VM (virtual machine，虛擬機)，包括多種 Linux (Debian、Ubuntu、Suse、Red Hat、CoreOS) 和 Windows Server。</p><p>可以學到如何使用 Google Cloud Platform (GCP) Console 和 <code>gcloud</code> command-line 建立各種機器類型的虛擬機 instance (實例)，還能學習如何將 NGINX web server 連接到 VM。</p><blockquote><p>若想了解如何 <a href="./gcp-vm-windows-server.html">在 GCP 上建立 VM 架設 Windows Server</a> 可參考此篇。</p></blockquote><h2 id="本篇將會做什麼？"><a class="header-anchor" href="#本篇將會做什麼？"></a>本篇將會做什麼？</h2><ul><li>使用 GCP Console 建立 VM</li><li>使用 <code>gcloud</code> command-line 建立 VM</li><li>在 VM 上部署 web server</li></ul><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><p>在點擊「Start Lab」之前，準備好網路瀏覽器 (推薦用 Google Chrome)，並且至少 40 分鐘可以專注的時間，因為 lab 是有時間限制，當你按下「Start Lab」開始學習時，無法暫停倒數計時，你只能在這段時間內使用 lab 提供給你的全新暫時 GCP Console 可用帳號，時間到之後的幾分鐘就會自動登出。</p><div class="warning"><p>注意：如果你有自己的個人 GCP 帳號或專案，請不要在此 lab 使用</p></div><h2 id="開始你的-lab-然後登入-gcp-console"><a class="header-anchor" href="#開始你的-lab-然後登入-gcp-console"></a>開始你的 Lab，然後登入 GCP Console</h2><ol><li>如果準備要開始，可以點擊右上角的「Start Lab」開始：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-13-47-32.png" alt=""></p><ol start="2"><li>接著會出現這個畫面，因為我參加 <a href="https://www.facebook.com/events/2005848903055499/" target="_blank" rel="noopener">GDG Tainan</a> 的活動，活動有提供 Qwiklabs 一個月的免費額度，所以我點選下圖左邊的「Use Subscription」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-21-15.png" alt=""></p><ol start="3"><li>Lab 會提供給你免費暫時的 GCP 帳號，複製帳號和密碼，然後點擊「Open Google Console」開啟 <a href="https://cloud.google.com/storage/docs/cloud-console" target="_blank" rel="noopener">GCP Console</a>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-33-31.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><ol start="4"><li>接著就會開啟登入頁面，建議另外開 Chrome 無痕模式來登入 lab 提供的帳號和密碼，因為 Chrome 會紀錄帳密，現在登入的只是暫時帳號，未來不需要用到：</li></ol><div class="warning"><p>注意：這邊是登入 lab 提供的帳號 (也就是 email 必須為 <code>googlexxxxxx_student@qwiklabs.net</code> )，如果你有自己的 GCP 帳號，請不要用於此 lab，避免產生費用</p><blockquote><p>類似於 <code>googlexxxxxx_student@qwiklabs.net</code> 的帳號是一個 Google 帳號，專為 Qwiklabs 學生使用而建立的。它具有特定的域名 (也就是 <code>qwiklabs.net</code> )，並且已分配了 IAM 角色，允許你去存取該 GCP 專案。</p></blockquote></div><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-30.png" alt=""></p><ol start="5"><li>接受 terms 和 conditions：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-22-59.png" alt=""></p><ol start="6"><li>不要新增 recovery options 或 two-factor authentication (因為這是一個臨時帳號)</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-23-18.png" alt=""></p><ol start="7"><li>勾選同意服務條款：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-15.png" alt=""></p><p>之後就可以開始使用 GCP Console 囉：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-14-14-23-55.png" alt=""></p><h2 id="啟動-google-cloud-shell"><a class="header-anchor" href="#啟動-google-cloud-shell"></a>啟動 Google Cloud Shell</h2><p>Google Cloud Shell 是載入了開發工具的 VM，它提供 5GB 的 home 目錄，並在 Google Cloud 上執行。可用 Google Cloud Shell 提供的 command-line 來存取 GCP 的資源。</p><ol><li>在 GCP console 的右上方工具列中，點擊「Activate Cloud Shell」按鈕：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-24-42.png" alt=""></p><ol start="2"><li>在打開的對話框內，點擊「START CLOUD SHELL」：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-25-23.png" alt=""></p><ol start="3"><li>連接和提供環境需要一些時間：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-05.png" alt=""></p><ol start="4"><li>連接後，就代表你已經過身份驗證，專案已設置為 <code>PROJECT_ID</code>，以下圖的為例，此專案的 ID 為 <code>qwiklabs-gcp-f9d61ede8167e6b0</code>：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-26-34.png" alt=""></p><p><code>gcloud</code> 是 GCP 的 command-line 工具，他已預先安裝在 Cloud Shell 上，並且支援 tab 自動補齊 (tab-completion)。</p><p>未來可使用 <code>gcloud</code> 的下面指令並透過 <code>PROJECT_ID</code> 來更換成其他專案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud config <span class="hljs-built_in">set</span> project [PROJECT_ID]</span><br></code></pre></td></tr></table></figure><p>使用下面指令可列出有效帳號名稱：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud auth list</span><br>          Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>可以使用以下指令列出專案 ID：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud config list project</span><br>[core]<br>project = qwiklabs-gcp-f9d61ede8167e6b0<br><br>Your active configuration is: [cloudshell-9292]<br></code></pre></td></tr></table></figure><h2 id="理解-regions-和-zones"><a class="header-anchor" href="#理解-regions-和-zones"></a>理解 Regions 和 Zones</h2><p>Compute Engine 資源位於不同的 regions (地區) 或 zones (區域)。region 是你可以執行資源的所在特定地理位置。每個 region 都有一個或多個 zones。例如，<code>us-central1</code> region 代表美國中部地區，其中包含的 Zones 有 <code>us-central1-a</code>、<code>us-central1-b</code>、<code>us-central1-c</code> 與 <code>us-central1-f</code>。</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-17-58-23.png" alt=""></p><p>圖片來源：<a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></p><p>位於 zone 中的資源都稱為 zonel (區域) 資源，VM instance (實例) 和 persistent disk (永久磁碟) 都位於 zone 中，如果要將 persistent disk 附加到 VM instance，這兩個資源都必須位於同一個 zone 中。同樣，如果要將靜態 IP 位址分配到 instance，此 instance 就必須與靜態 IP 位於同一個 region 中。</p><blockquote><p>詳情可參考 GCP 官方的 <a href="https://cloud.google.com/compute/docs/regions-zones/" target="_blank" rel="noopener">Regions &amp; Zones</a> 文件。</p></blockquote><h2 id="從-cloud-console-建立新的-instance"><a class="header-anchor" href="#從-cloud-console-建立新的-instance"></a>從 Cloud Console 建立新的 instance</h2><p>在 GCP Console 的右上角，點選「Navigation menu &gt; Compute Engine &gt; VM Instances」：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-18-16-42.png" alt=""></p><p>接著點擊「Create」建立新的 instance：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-31-03.png" alt=""></p><p>建立新的 instance 時可以設定很多參數。在此 lab 中會使用以下設定：</p><table><thead><tr><th>欄位</th><th>值</th><th>額外資訊</th></tr></thead><tbody><tr><td>name</td><td><code>gcelab</code></td><td></td></tr><tr><td>region</td><td><code>us-central1 (Iowa)</code><br>或<br><code>asia-south1 (Mumbai)</code></td><td><a href="https://cloud.google.com/compute/docs/regions-zones/" target="_blank" rel="noopener">更多關於 regions 的資訊</a></td></tr><tr><td>zone</td><td><code>us-central1-c</code><br>或<br><code>asia-south1-c</code><br>注意：記住你選擇的 zone，之後會用到</td><td><a href="https://cloud.google.com/compute/docs/regions-zones/" target="_blank" rel="noopener">更多關於 zones 的資訊</a></td></tr><tr><td>Machine Type</td><td><code>2 vCPU</code><br>這是一個 ( <code>n1-standard-2</code> )<br>2-CPU, 7.5 GB RAM instance<br><br>有很多機型可以選擇，從 micro instance 類型的到 32-core/208 GB RAM 的都有，詳情可參考<a href="https://cloud.google.com/compute/docs/machine-types" target="_blank" rel="noopener">機型種類</a>文件</td><td>注意：新專案具有預設的<a href="https://cloud.google.com/compute/quotas" target="_blank" rel="noopener">資源配額</a>，可能會限制 CPU 核心數。可在此 lab 之外的專案上申請到更高的規格</td></tr><tr><td>Boot Disk</td><td><code>New 10 GB standard persistent disk</code><br><code>OS Image: Debian GNU/Linux 9 (Stretch)</code></td><td>有很多 images 可以選擇，包括：Debian、Ubuntu、CoreOS，以及 premium images，像是 RedHat Enterprise Linux 和 Windows Server，詳情可參考 <a href="https://cloud.google.com/compute/docs/images" target="_blank" rel="noopener">OS</a> 文件</td></tr><tr><td>Firewall</td><td>勾選 <code>Allow HTTP traffic</code>，勾選此選項才能存取之後安裝的 web server</td><td>注意：這會自動建立防火牆規則，允許 80 port 的 HTTP 流量</td></tr></tbody></table><p>設定好之後，點擊「Create」：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-32-27.png" alt=""></p><p>等待 instance 建立：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-34-20.png" alt=""></p><p>看到下面畫面就代表 instance 已建立完成，接著點擊右邊的「SSH」按鈕，會開啟新的瀏覽器頁面：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-18-44-40.png" alt=""></p><p>此頁面是直接從瀏覽器啟動 SSH client 連接到 VM：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-35-45.png" alt=""></p><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/instances/connecting-to-instance" target="_blank" rel="noopener">Connect to an instance using ssh</a> 文件。</p></blockquote><h2 id="安裝-nginx-web-server"><a class="header-anchor" href="#安裝-nginx-web-server"></a>安裝 NGINX web server</h2><ol><li>透過 SSH 連接 VM 之後，請使用 <code>sudo</code> 取得 <code>root</code> 的存取權限：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo su -</span><br></code></pre></td></tr></table></figure><ol start="2"><li>更新 OS：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> apt-get update</span><br>Get:1 http://security.debian.org stretch/updates InRelease [94.3 kB]<br>Ign:2 http://deb.debian.org/debian stretch InRelease      <br>Get:3 http://deb.debian.org/debian stretch-updates InRelease [91.0 kB]     <br>...<br></code></pre></td></tr></table></figure><ol start="3"><li>安裝 NGINX：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> apt-get install nginx -y</span><br></code></pre></td></tr></table></figure><ol start="4"><li>檢查 NGINX 是否正在執行：</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> ps auwx | grep nginx</span><br>root      2339  0.0  0.0 159532  1628 ?        Ss   06:37   0:00 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;<br>www-data  2340  0.0  0.0 159864  3200 ?        S    06:37   0:00 nginx: worker process<br>www-data  2341  0.0  0.0 159864  3200 ?        S    06:37   0:00 nginx: worker process<br>root      2350  0.0  0.0  12780   952 pts/0    S+   06:37   0:00 grep nginx<br></code></pre></td></tr></table></figure><div class="info"><p>註：如果關掉 NGINX 就不會出現關於 NGINX 的 process：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ service nginx stop<br><br>$ ps auwx | grep nginx<br>root      2359  0.0  0.0  12780  1012 pts/0    S+   14:23   0:00 grep nginx<br></code></pre></td></tr></table></figure><p>使用下面指令可以啟動 NGINX：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> service nginx start</span><br></code></pre></td></tr></table></figure></div><ol start="5"><li>回到 Cloud Console，並點擊 VM instance 的 External IP 連結：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-38-31.png" alt=""></p><ol start="6"><li>就會開啟新分頁，可以看到 NGINX web server 的預設網頁：</li></ol><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-41-35.png" alt=""></p><h2 id="使用-gcloud-建立新的-instance"><a class="header-anchor" href="#使用-gcloud-建立新的-instance"></a>使用 gcloud 建立新的 instance</h2><p>前面介紹的是利用 GCP Console 來建立 VM instance，這邊要介紹的是可以使用預裝在 <a href="https://cloud.google.com/shell/#how_do_i_get_started" target="_blank" rel="noopener">Google Cloud Shell</a> 中的 command-line 工具 <code>gcloud</code> 來完成一樣的事。Cloud Shell 是基於 Debian 的 VM，預載你所需的所有開發工具 (<code>gcloud</code>、<code>git</code> … 等其他)，並提供 5 GB persistent disk 的 home 目錄。</p><blockquote><p>詳情可參考 <a href="https://cloud.google.com/sdk/gcloud/" target="_blank" rel="noopener">gcloud command line tool guide</a>。</p></blockquote><p>在 Cloud Shell 使用 command-line 工具 <code>gcloud</code> 建立一台新的 VM instance，將 <code>[YOUR_ZONE]</code> 替換成前面使用的 zone：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instances create gcelab2 --machine-type n1-standard-2 --zone [your_zone]</span><br></code></pre></td></tr></table></figure><p>像我前面的 zone 是用 <code>asia-south1-c</code>，所以指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instances create gcelab2 --machine-type n1-standard-2 --zone asia-south1-c</span><br>Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-f9d61ede8167e6b0/zones/asia-south1-c/instances/gcelab2].<br>NAME     ZONE           MACHINE_TYPE   PREEMPTIBLE  INTERNAL_IP  EXTERNAL_IP   STATUS<br>gcelab2  asia-south1-c  n1-standard-2               10.160.0.3   35.244.6.170  RUNNING<br></code></pre></td></tr></table></figure><p>建立的 instance 具有以下預設值：</p><ul><li>最新的 <a href="https://cloud.google.com/compute/docs/images#debian" target="_blank" rel="noopener">Debian 9 (stretch)</a> image</li><li>預設機型 (machine type) 為 <code>n1-standard-2</code>，在此 lab 中，你也可以使用 <code>n1-highmem-4</code> 或 <code>n1-highcpu-4</code> 其他<a href="https://cloud.google.com/compute/docs/machine-types" target="_blank" rel="noopener">機型</a>。在 lab 之外的專案可以指定<a href="https://cloud.google.com/compute/docs/instances/creating-instance-with-custom-machine-type" target="_blank" rel="noopener">自訂的機型</a></li><li>root persistent disk 預設與 instance 的名稱一樣，disk 會自動附加到 instance</li></ul><p>執行下面指令可以查看所有預設值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute instances create --<span class="hljs-built_in">help</span></span><br></code></pre></td></tr></table></figure><div class="info"><p>Note：如果你總是使用同一個 region/zone，並且不希望每次都使用 <code>--zone</code> 參數，就可以使用下面指令，將指定的 region 和 zones 設為預設：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud config <span class="hljs-built_in">set</span> compute/zone ...</span><br><span class="hljs-meta">$</span><span class="bash"> gcloud config <span class="hljs-built_in">set</span> compute/region ...</span><br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方的 <a href="https://cloud.google.com/compute/docs/gcloud-compute/#default-properties" target="_blank" rel="noopener">gcloud compute | Compute Engine Documentation</a> 文件。</p></blockquote></div><p>若要查看剛剛建立的 instance 是否成功建立，就要回到「Navigation menu &gt; Compute Engine &gt; VM Instances」頁面，如果還是沒有看到，就可以點擊「REFRESH」按鈕重新整理此頁面，應該就會看到剛剛建立名為 <code>gcelab2</code> 的 instance：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-45-59.png" alt=""></p><p>接著你也可以使用 <code>gcloud</code> 透過 SSH 連接到你的 instance，連線時，請確認指令後面 <code>--zone</code> 參數的 <code>[YOUR_ZONE]</code> 是否和當初建立的一樣，或是如果你已在全域設定預設 (上面 Note 提到的部分)，就可以省略 <code>--zone</code> 參數：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute ssh gcelab2 --zone [YOUR_ZONE]</span><br></code></pre></td></tr></table></figure><p>像我沒有在全域設定預設，所以需要在指令後面加上 <code>--zone</code> 參數，<code>[YOUR_ZONE]</code> 則是當初建立的 <code>asia-south1-c</code>，指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute ssh gcelab2 --zone asia-south1-c</span><br>WARNING: The public SSH key file for gcloud does not exist.<br>WARNING: The private SSH key file for gcloud does not exist.<br>WARNING: You do not have an SSH key for gcloud.<br>WARNING: SSH keygen will be executed to generate a key.<br>This tool needs to create the directory<br>[/home/google3043863_student/.ssh] before being able to generate SSH<br>keys.<br><br>Do you want to continue (Y/n)?<br></code></pre></td></tr></table></figure><p>接著會出現下面畫面，請輸入 <code>Y</code> 繼續：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Do you want to continue (Y/n)?  y<br></code></pre></td></tr></table></figure><p>此時會產生一對公鑰 (public key) 和私鑰 (private key)，接著按 <code>Enter</code> 鍵，不輸入也不設定 passphrase (如果是在真正的專案就建議輸入 passphrase，因為當別人拿走你的私鑰時，就無法直接登入主機，還要輸入 passphrase，安全性會比較高)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Generating public/private rsa key pair.<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /home/google3043863_student/.ssh/google_compute_engine.<br>Your public key has been saved in /home/google3043863_student/.ssh/google_compute_engine.pub.<br>The key fingerprint is:<br>SHA256:LJMylIaZY1aNf2v0uP/a83TSVw506GazmtvrTyPCxqU google3043863_student@cs-6000-devshell-vm-8e6e4e18-0f7e-4771-ac48-22ab57ceb161<br>The key&apos;s randomart image is:<br>+---[RSA 2048]----+<br>|    .o           |<br>|   =...        . |<br>|  B +.        o .|<br>| o +  .oo    o . |<br>|    o +oS+   .* .|<br>|     o o+ + oo *.|<br>|       . . E .+.*|<br>|        . ..o=.+o|<br>|         .oo*==o.|<br>+----[SHA256]-----+<br>Warning: Permanently added &apos;compute.3226821850929314737&apos; (ECDSA) to the list of known hosts.<br>Linux gcelab2 4.9.0-8-amd64 #1 SMP Debian 4.9.144-3.1 (2019-02-19) x86_64<br><br>The programs included with the Debian GNU/Linux system are free software;<br>the exact distribution terms for each program are described in the<br>individual files in /usr/share/doc/*/copyright.<br><br>Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent<br>permitted by applicable law.<br>Creating directory &apos;/home/google3043863_student&apos;.<br></code></pre></td></tr></table></figure><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-48-46.png" alt=""></p><h2 id="使用-gcloud-設定防火牆"><a class="header-anchor" href="#使用-gcloud-設定防火牆"></a>使用 gcloud 設定防火牆</h2><p>如果我已經跟著之前的步驟安裝完 NGINX 了，就會發現剛剛建立的 instance 沒有做防火牆設定，也就是不允許 80 port 的 HTTP 流量，所以就可以是用下面指令來設定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud compute firewall-rules create nginx --allow tcp:80</span><br></code></pre></td></tr></table></figure><p>執行指令後會看到下面訊息，訊息內容是無法建立防火牆，這是因為請求的身分權限不足：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Creating firewall...failed.<br>ERROR: (gcloud.compute.firewall-rules.create) Could not fetch resource:<br> - Insufficient Permission: Request had insufficient authentication scopes.<br></code></pre></td></tr></table></figure><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-55-44.png" alt=""></p><p>那如何知道目前的有效帳號名稱？可以使用下面指令來查看，可以看到目前的帳號不是之前 lab 暫時給我們用的帳號：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud auth list</span><br>                  Credentialed Accounts<br>ACTIVE  ACCOUNT<br>*       721269751803-compute@developer.gserviceaccount.com<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>所以必須登入之前的帳號，可以使用下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud auth login</span><br>You are running on a Google Compute Engine virtual machine.<br>It is recommended that you use service accounts for authentication.<br><br>You can run:<br><span class="hljs-meta"><br>  $</span><span class="bash"> gcloud config <span class="hljs-built_in">set</span> account `ACCOUNT`</span><br><br>to switch accounts if necessary.<br><br>Your credentials may be visible to others with access to this<br>virtual machine. Are you sure you want to authenticate with<br>your personal account?<br><br>Do you want to continue (Y/n)?<br></code></pre></td></tr></table></figure><p>接著會出現下面畫面，請輸入 <code>Y</code> 繼續：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Do you want to continue (Y/n)?<br></code></pre></td></tr></table></figure><p>接著會出現一長串的連結，點擊這個連結：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Do you want to continue (Y/n)?  y<br><br>Go to the following link in your browser:<br><br>    https://accounts.google.com/o/oauth2/auth?redirect_uri=urn%3Aietf%3Awg%3Aoauth%3A2.0%3Aoob&amp;prompt=select_account&amp;response_type=code&amp;client_id=32555940559.apps.googleusercontent.com&amp;scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcloud-platform+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fappengine.admin+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fcompute+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Faccounts.reauth&amp;access_type=offline<br><br><br>Enter verification code:<br></code></pre></td></tr></table></figure><p>該連結就是要你用 lab 提供的帳號登入：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-56-52.png" alt=""></p><p>接著要同意 Google Cloud SDK 存取此帳號：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-14-57-02.png" alt=""></p><p>接著複製此授權碼，將授權碼貼至剛剛的 shell：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-20-16-05.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs undefined">Enter verification code: 4/KwEnGIyzJ0P_ZvFeKt5264lP_3CdzZhUb-ZXoEJ0TbVFQVUQyYSBF58<br>WARNING: `gcloud auth login` no longer writes application default credentials.<br>If you need to use ADC, see:<br>  gcloud auth application-default --help<br><br>You are now logged in as [google3043863_student@qwiklabs.net].<br>Your current project is [qwiklabs-gcp-f9d61ede8167e6b0].  You can change this setting by running:<br>  $ gcloud config set project PROJECT_ID<br></code></pre></td></tr></table></figure><p>登入成功後，可以再次執行下面指令看一下目前有效帳號的名稱，變成 lab 暫時給我們用的帳號囉：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> gcloud auth list</span><br>                  Credentialed Accounts<br>ACTIVE  ACCOUNT<br>        721269751803-compute@developer.gserviceaccount.com<br>*       google3043863_student@qwiklabs.net<br><br>To set the active account, run:<br>    $ gcloud config set account `ACCOUNT`<br></code></pre></td></tr></table></figure><p>接著再次執行下面指令，就可以成功設定防火牆：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">$ gcloud compute firewall-rules create nginx --allow tcp:80<br>Creating firewall...⠶Created [https://www.googleapis.com/compute/v1/projects/qwiklabs-gcp-f9d61ede8167e6b0/global/firewalls/nginx].<br>Creating firewall...done.<br>NAME   NETWORK  DIRECTION  PRIORITY  ALLOW   DENY  DISABLED<br>nginx  default  INGRESS    1000      tcp:80        False<br></code></pre></td></tr></table></figure><p>雖然 GCP Console 介面上 VM instance 的 External IP 沒有變成可以點擊的連結，但可以將 External IP 複製到新的瀏覽器分頁：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-00-02.png" alt=""></p><p>就能成功看到 NGINX web server 的預設網頁：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-21-04-14.png" alt=""></p><p>下圖就是我成功完成此 quest 的畫面：</p><p><img src="../images/gcp-vm-nignx-web-server/2019-04-13-15-01-08.png" alt=""></p><h2 id="參考來源"><a class="header-anchor" href="#參考來源"></a>參考來源</h2><ul><li><a href="https://www.qwiklabs.com/focuses/3563?parent=catalog" target="_blank" rel="noopener">Creating a Virtual Machine | Qwiklabs</a></li><li><a href="https://google.qwiklabs.com/focuses/2794?parent=catalog" target="_blank" rel="noopener">A Tour of Qwiklabs and the Google Cloud Platform | Qwiklabs</a></li><li><a href="https://tn710617.github.io/zh-tw/createAVirtualMachineInGCP/" target="_blank" rel="noopener">在 GCP 上開立一台虛擬機 | Ray’s Coding Journey</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/gcp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;本篇是紀錄在 Google 的 Qwiklab 平台內，完成「&lt;a href=&quot;https://www.qwiklabs.com/focuses/3563?parent=catalog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Creating a Virtual Machine&lt;/a&gt;」這個 quest 所學到的內容，包括如何透過 GCP Console 和 command-line 工具 &lt;code&gt;gcloud&lt;/code&gt; 在 GCP 建立 instance，如何使用 &lt;code&gt;gcloud&lt;/code&gt; 透過 SSH 連接到你的 instance，以及如何在 VM 上部署 NIGNX web server。&lt;/p&gt;
    
    </summary>
    
      <category term="Cloud" scheme="https://titangene.github.io/categories/cloud/"/>
    
    
      <category term="GCP" scheme="https://titangene.github.io/tags/gcp/"/>
    
      <category term="VM" scheme="https://titangene.github.io/tags/vm/"/>
    
      <category term="NIGNX" scheme="https://titangene.github.io/tags/nignx/"/>
    
      <category term="Web Server" scheme="https://titangene.github.io/tags/web-server/"/>
    
  </entry>
  
  <entry>
    <title>Python 爬蟲常用技巧 (持續更新)</title>
    <link href="https://titangene.github.io/article/python-crawler-note.html"/>
    <id>https://titangene.github.io/article/python-crawler-note.html</id>
    <published>2019-02-28T09:33:51.000Z</published>
    <updated>2019-04-30T15:55:09.896Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄個人常用的 Python 爬蟲技巧，未來還會持續更新其他技巧。</p><a id="more"></a><h2 id="載入常用套件"><a class="header-anchor" href="#載入常用套件"></a>載入常用套件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, parse_qs, urlunparse<br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">from</span> user_agent <span class="hljs-keyword">import</span> generate_user_agent<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="解析-html"><a class="header-anchor" href="#解析-html"></a>解析 HTML</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>response = requests.get(url)<br>soup = BeautifulSoup(response.text, <span class="hljs-string">'lxml'</span>)<br>html = soup.find(id=<span class="hljs-string">'some_id'</span>)<br></code></pre></td></tr></table></figure><h2 id="解析網址"><a class="header-anchor" href="#解析網址"></a>解析網址</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse, parse_qs, urlunparse<br><br>url = <span class="hljs-string">'http://xxx.com/api/data?id=123&amp;sub_code=06A1297'</span><br>link_parse = urlparse(url)<br>print(link_parse)<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">ParseResult(scheme=&apos;http&apos;, netloc=&apos;xxx.com&apos;, path=&apos;/api/data&apos;, params=&apos;&apos;, query=&apos;id=123&amp;sub_code=06A1297&apos;, fragment=&apos;&apos;)<br></code></pre></td></tr></table></figure><h3 id="將-parseresult-物件轉成網址字串"><a class="header-anchor" href="#將-parseresult-物件轉成網址字串"></a>將 <code>ParseResult</code> 物件轉成網址字串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">url = urlunparse(link_parse)<br>print(url)<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&apos;http://xxx.com/api/data?id=123&amp;sub_code=06A1297&apos;<br></code></pre></td></tr></table></figure><h3 id="解析網址-query"><a class="header-anchor" href="#解析網址-query"></a>解析網址 query</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">link_query = parse_qs(link_parse.query)<br>print(link_query)<br><br>id = link_query[<span class="hljs-string">'id'</span>][<span class="hljs-number">0</span>]<br>sub_code = link_query[<span class="hljs-string">'sub_code'</span>][<span class="hljs-number">0</span>]<br>print(id, sub_code)<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&#123;&apos;id&apos;: [&apos;123&apos;], &apos;sub_code&apos;: [&apos;06A1297&apos;]&#125;<br>123 06A1297<br></code></pre></td></tr></table></figure><h2 id="隨機生成-user-agent"><a class="header-anchor" href="#隨機生成-user-agent"></a>隨機生成 user-agent</h2><h3 id="fake-useragent-套件"><a class="header-anchor" href="#fake-useragent-套件"></a>fake_useragent 套件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> fake_useragent <span class="hljs-keyword">import</span> UserAgent<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_header_user_agent</span><span class="hljs-params">()</span>:</span><br>    user_agent = UserAgent()<br>    <span class="hljs-keyword">return</span> user_agent.random<br><br>user_agent = set_header_user_agent()<br>response = requests.get(url, headers=&#123; <span class="hljs-string">'user-agent'</span>: user_agent &#125;)<br></code></pre></td></tr></table></figure><h3 id="user-agent-套件"><a class="header-anchor" href="#user-agent-套件"></a>user_agent 套件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> user_agent <span class="hljs-keyword">import</span> generate_user_agent<br><br>user_agent = generate_user_agent()<br>response = requests.get(url, headers=&#123; <span class="hljs-string">'user-agent'</span>: user_agent &#125;)<br></code></pre></td></tr></table></figure><h2 id="讀取表格資料"><a class="header-anchor" href="#讀取表格資料"></a>讀取表格資料</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br>response = requests.get(url)<br>soup = BeautifulSoup(response.text, <span class="hljs-string">'lxml'</span>)<br>html = soup.find(id=<span class="hljs-string">'table_id'</span>)<br>df = pd.read_html(str(html), header=<span class="hljs-number">0</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><h2 id="讀取-解析-json"><a class="header-anchor" href="#讀取-解析-json"></a>讀取/解析 JSON</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><br><span class="hljs-comment"># 讀取</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.json'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:<br>    datas = json.load(file)<br><br><span class="hljs-comment"># 解析</span><br><span class="hljs-keyword">with</span> open(<span class="hljs-string">'data.json'</span>, <span class="hljs-string">'w'</span>, encoding=<span class="hljs-string">'utf-8'</span>) <span class="hljs-keyword">as</span> file:<br>    json.dump(datas, file, ensure_ascii=<span class="hljs-keyword">False</span>)<br></code></pre></td></tr></table></figure><h2 id="讀取-解析-xml"><a class="header-anchor" href="#讀取-解析-xml"></a>讀取/解析 XML</h2><h3 id="讀取-xml-檔"><a class="header-anchor" href="#讀取-xml-檔"></a>讀取 XML 檔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br>tree = ET.parse(<span class="hljs-string">'data.xml'</span>)<br>root = tree.getroot()<br></code></pre></td></tr></table></figure><h3 id="讀取-xml-字串"><a class="header-anchor" href="#讀取-xml-字串"></a>讀取 XML 字串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> xml.etree.ElementTree <span class="hljs-keyword">as</span> ET<br><br>root = ET.fromstring(some_xml_strings)<br></code></pre></td></tr></table></figure><p>以下面的 XML 為範例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version="1.0"?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bookstore</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">ISBN</span>=<span class="hljs-string">"10-000000-001"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Book 1<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>300<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">comments</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">userComment</span> <span class="hljs-attr">rating</span>=<span class="hljs-string">"4"</span>&gt;</span>xxx...<span class="hljs-tag">&lt;/<span class="hljs-name">userComment</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">userComment</span> <span class="hljs-attr">rating</span>=<span class="hljs-string">"2"</span>&gt;</span>yyy...<span class="hljs-tag">&lt;/<span class="hljs-name">userComment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">comments</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">ISBN</span>=<span class="hljs-string">"10-000000-999"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Book 2<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>500<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">comments</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">userComment</span> <span class="hljs-attr">rating</span>=<span class="hljs-string">"3"</span>&gt;</span>zzz...<span class="hljs-tag">&lt;/<span class="hljs-name">userComment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">comments</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bookstore</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="迴圈取得子元素"><a class="header-anchor" href="#迴圈取得子元素"></a>迴圈取得子元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> root:<br>    print(child.tag, child.attrib)<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">book &#123;&apos;ISBN&apos;: &apos;10-000000-001&apos;&#125;<br>book &#123;&apos;ISBN&apos;: &apos;10-000000-999&apos;&#125;<br></code></pre></td></tr></table></figure><h3 id="用-index-取得某元素"><a class="header-anchor" href="#用-index-取得某元素"></a>用 index 取得某元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">root[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].tag<br>root[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>].text<br>root[<span class="hljs-number">0</span>].attrib<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&apos;price&apos;<br>&apos;300&apos;<br>&#123;&apos;ISBN&apos;: &apos;10-000000-001&apos;&#125;<br></code></pre></td></tr></table></figure><h3 id="搜尋指定元素"><a class="header-anchor" href="#搜尋指定元素"></a>搜尋指定元素</h3><p>使用 <code>root.iter()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> comment <span class="hljs-keyword">in</span> root.iter(<span class="hljs-string">'userComment'</span>):<br>    print(comment.attrib)<br>    print(<span class="hljs-string">'comment: &#123;&#125;'</span>.format(comment.text))<br></code></pre></td></tr></table></figure><p>輸出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&#123;&apos;rating&apos;: &apos;4&apos;&#125;<br>comment: xxx...<br>&#123;&apos;rating&apos;: &apos;2&apos;&#125;<br>comment: yyy...<br>&#123;&apos;rating&apos;: &apos;3&apos;&#125;<br>comment: zzz...<br></code></pre></td></tr></table></figure><p>使用 <code>root.findall()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> root.findall(<span class="hljs-string">'book'</span>):<br>    ISBN = book.get(<span class="hljs-string">'ISBN'</span>)<br>    title = book.find(<span class="hljs-string">'title'</span>).text<br>    print(ISBN, title)<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">10-000000-001 Book 1<br>10-000000-999 Book 2<br></code></pre></td></tr></table></figure><h2 id="下載圖片"><a class="header-anchor" href="#下載圖片"></a>下載圖片</h2><p><code>response.raw</code> 是 file-like 物件，預設不會解壓縮 response (使用 gzip 或 deflate，參考至 <a href="https://github.com/kennethreitz/requests/blob/master/requests/utils.py#L808" target="_blank" rel="noopener">Requests 原始碼</a>)，可以透過在 <code>requests.get()</code> 方法中，新增參數 <code>stream=True</code> 來強制解壓縮，並且可以避免立即將大的 response 內容讀入記憶體內，接著使用 <code>shutil.copyfileobj()</code> 讓 Python 將 串流資料轉成檔案物件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> shutil<br><br>url = <span class="hljs-string">"http://www.xxx.com/xxx.png"</span><br>response = requests.get(url, stream=<span class="hljs-keyword">True</span>)<br>file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">with</span> open(file_name, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:<br>    shutil.copyfileobj(response.raw, file)<br></code></pre></td></tr></table></figure><p>如果要下載檔案大的圖片，可參考下個段落「<a href="#%E4%B8%8B%E8%BC%89%E5%A4%A7%E6%AA%94%E6%A1%88">下載大檔案</a>」。</p><div class="info"><p><code>shutil.copyfileobj(fsrc, fdst[, length])</code>：將 file-like 物件 <code>fsrc</code> 的內容複製到 file-like 物件 <code>fdst</code>。<code>length</code> 參數 (int) 是 buffer 的大小。如果 <code>length</code> 為負數則代表是複製資料，而不以 chunk 的形式循環原始資料；預設是資料以 chunk 的形式讀取，以避免不受控制的記憶體消耗。請注意，如果 <code>fsrc</code> 物件的當前檔案位置不為 0，則只複製從當前檔案位置到檔案末端的內容。</p><blockquote><p>參考至 <a href="https://docs.python.org/3/library/shutil.html#shutil.copyfileobj" target="_blank" rel="noopener">shutil - High-level file operations - Python 3.7.3 documentation</a> 官方文件。<br>:::</p></blockquote><blockquote><p>參考來源：<a href="https://stackoverflow.com/questions/13137817/how-to-download-image-using-requests" target="_blank" rel="noopener">python - How to download image using requests - Stack Overflow</a></p></blockquote><h2 id="下載大檔案"><a class="header-anchor" href="#下載大檔案"></a>下載大檔案</h2><p>以迭代的方式取得，預設會以每 128 byte 為一個 chunk 來讀取資料 (參考至 <a href="https://github.com/kennethreitz/requests/blob/master/requests/models.py#L688" target="_blank" rel="noopener">Requests 原始碼</a>)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>response = requests.get(url, stream=<span class="hljs-keyword">True</span>)<br>file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">with</span> open(file_name, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response:<br>        file.write(chunk)<br></code></pre></td></tr></table></figure><p>若要自訂 chunk 大小，可使用 <a href="https://github.com/kennethreitz/requests/blob/master/requests/models.py#L729" target="_blank" rel="noopener"><code>Response.iter_content()</code></a> 方法自訂：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>file_name = url.split(<span class="hljs-string">'/'</span>)[<span class="hljs-number">-1</span>]<br><span class="hljs-keyword">with</span> requests.get(url, stream=<span class="hljs-keyword">True</span>) <span class="hljs-keyword">as</span> response:<br>    response.raise_for_status()<br>    <span class="hljs-keyword">with</span> open(file_name, <span class="hljs-string">'wb'</span>) <span class="hljs-keyword">as</span> file:<br>        <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> response.iter_content(chunk_size=<span class="hljs-number">8192</span>):<br>            <span class="hljs-keyword">if</span> chunk: <span class="hljs-comment"># filter out keep-alive new chunks</span><br>                file.write(chunk)<br>                <span class="hljs-comment"># file.flush()</span><br></code></pre></td></tr></table></figure><blockquote><p>參考來源：<a href="https://stackoverflow.com/questions/16694907/download-large-file-in-python-with-requests" target="_blank" rel="noopener">Download large file in python with requests - Stack Overflow</a></p></blockquote><p>若想要以一次一行的方式迭代 response 資料，可使用 <a href="https://github.com/kennethreitz/requests/blob/master/requests/models.py#L784" target="_blank" rel="noopener"><code>Response.iter_lines()</code></a> 方法，此方法預設一個 chunk 的大小為 512 byte，若要設定分隔符號，可加上 <code>delimiter</code> 參數：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br><br>r = requests.get(url, stream=<span class="hljs-keyword">True</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> r.iter_lines():<br>    <span class="hljs-comment"># filter out keep-alive new lines</span><br>    <span class="hljs-keyword">if</span> line:<br>        print(json.loads(line))<br></code></pre></td></tr></table></figure><blockquote><p>參考來源：<a href="https://www.cnblogs.com/linxiyue/p/3980003.html" target="_blank" rel="noopener">Python Requests 庫：HTTP for Humans - 再見紫羅蘭 - 博客園</a></p></blockquote></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄個人常用的 Python 爬蟲技巧，未來還會持續更新其他技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://titangene.github.io/categories/python/"/>
    
      <category term="Crawler" scheme="https://titangene.github.io/categories/python/crawler/"/>
    
    
      <category term="Python Requests" scheme="https://titangene.github.io/tags/python-requests/"/>
    
  </entry>
  
  <entry>
    <title>在 Hexo 主題內新增程式碼片段複製功能</title>
    <link href="https://titangene.github.io/article/hexo-copy-code-snippet-to-clipboard.html"/>
    <id>https://titangene.github.io/article/hexo-copy-code-snippet-to-clipboard.html</id>
    <published>2019-02-09T02:40:00.000Z</published>
    <updated>2019-04-30T15:38:34.184Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/hexo-copy-code-snippet-to-clipboard.jpg" alt=""></p><p>為了提高 blog 的使用體驗，本文將說明如何在 Hexo 主題內，提供程式碼片段複製至剪貼簿的功能。</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// copy to clipboard</span><br><span class="hljs-keyword">var</span> clipboard = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'pre'</span>);<br></code></pre></td></tr></table></figure><h2 id="載入-clipboard-js"><a class="header-anchor" href="#載入-clipboard-js"></a>載入 clipboard.js</h2><p>在 <code>themes\material-flow\layout\_partial\scripts.ejs</code> 檔案內的載入 clipboard.js：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdnjs.cloudflare.com/ajax/libs/clipboard.js/2.0.0/clipboard.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="新增程式碼片段複製功能"><a class="header-anchor" href="#新增程式碼片段複製功能"></a>新增程式碼片段複製功能</h2><p>每個程式碼片段內都要新增複製功能按鈕，下面說明新增複製按鈕的處理邏輯：</p><ol><li>首先要找到所有程式碼區塊：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> snippets = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'figure.highlight'</span>);<br></code></pre></td></tr></table></figure><ol start="2"><li>準備要新增的按鈕結構：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> htmlCopyButton = <span class="hljs-string">`<br>  &lt;button class="codecopy-btn tooltipped tooltipped-sw" aria-label="Copy to clipboard"&gt;<br>    &lt;i class="far fa-copy" aria-hidden="true"&gt;&lt;/i&gt;<br>  &lt;/button&gt;`</span>;<br></code></pre></td></tr></table></figure><ol start="3"><li>在原本的程式碼區塊的 <code>&lt;figure&gt;</code> 標籤外多包了一層 <code>&lt;div&gt;</code> 標籤</li><li>在 <code>&lt;div&gt;</code> 標籤上新增 <code>.code-highlight</code> class 樣式</li><li>在 <code>&lt;div&gt;</code> 標籤上新增 <code>data-lang</code> 屬性用於記錄此程式碼區塊內的程式碼是哪種程式語言</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">snippets.forEach(<span class="hljs-function"><span class="hljs-params">snippet</span> =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> parent = snippet.parentNode;<br>  <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);<br><br>  parent.replaceChild(wrapper, snippet);<br>  wrapper.appendChild(snippet);<br><br>  wrapper.classList.add(<span class="hljs-string">'code-highlight'</span>);<br>  wrapper.firstChild.insertAdjacentHTML(<span class="hljs-string">'beforebegin'</span>, htmlCopyButton);<br><br>  <span class="hljs-keyword">var</span> lang = (snippet.classList[<span class="hljs-number">1</span>] || <span class="hljs-string">'code'</span>).toUpperCase();<br>  wrapper.setAttribute(<span class="hljs-string">'data-lang'</span>, lang);<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="6"><li>接著將名為 <code>.codecopy-btn</code> 的 element 上新增複製功能，複製的內容是 <code>&lt;figure&gt;</code> 標籤內的程式碼：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(<span class="hljs-string">'.codecopy-btn'</span>, &#123;<br>  <span class="hljs-attr">target</span>: <span class="hljs-function"><span class="hljs-params">trigger</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> trigger.nextSibling;<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="7"><li>只要按複製按鈕且複製成功，就會顯示 <code>Copied!</code> 提示已成功複製程式碼片段：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">clipboard.on(<span class="hljs-string">'success'</span>, e =&gt; &#123;<br>  e.trigger.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copied!'</span>);<br>  e.clearSelection();<br>&#125;);<br></code></pre></td></tr></table></figure><ol start="8"><li>將每個複製按鈕新增兩個監聽事件，分別是 <code>mouseleave</code> 和 <code>click</code>：<ul><li><code>mouseleave</code>：滑鼠離開按鈕就將提示文字變成 <code>Copy to clipboard</code></li><li><code>click</code>：取消事件的預設行為</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.codecopy-btn'</span>);<br><br>btns.forEach(<span class="hljs-function"><span class="hljs-params">btn</span> =&gt;</span> &#123;<br>  btn.addEventListener(<span class="hljs-string">'mouseleave'</span>, e =&gt; &#123;<br>    e.target.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copy to clipboard'</span>);<br>    e.target.blur();<br>  &#125;);<br><br>  btn.addEventListener(<span class="hljs-string">'click'</span>, e =&gt; &#123;<br>    e.preventDefault();<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="完整程式碼"><a class="header-anchor" href="#完整程式碼"></a>完整程式碼</h3><p>在 <code>themes\material-flow\source\js</code> 目錄內建立 <code>clipboard-use.js</code>，檔案內容如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-comment">// ref: https://github.com/zenorocha/codecopy/blob/master/src/scripts/main.js</span><br>  <span class="hljs-keyword">var</span> snippets = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'figure.highlight'</span>);<br>  <span class="hljs-keyword">var</span> htmlCopyButton = <span class="hljs-string">`<br>    &lt;button class="codecopy-btn tooltipped tooltipped-sw" aria-label="Copy to clipboard"&gt;<br>      &lt;i class="far fa-copy" aria-hidden="true"&gt;&lt;/i&gt;<br>    &lt;/button&gt;`</span>;<br><br>  snippets.forEach(<span class="hljs-function"><span class="hljs-params">snippet</span> =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> parent = snippet.parentNode;<br>    <span class="hljs-keyword">var</span> wrapper = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'div'</span>);<br><br>    parent.replaceChild(wrapper, snippet);<br>    wrapper.appendChild(snippet);<br><br>    wrapper.classList.add(<span class="hljs-string">'code-highlight'</span>);<br>    wrapper.firstChild.insertAdjacentHTML(<span class="hljs-string">'beforebegin'</span>, htmlCopyButton);<br><br>    <span class="hljs-keyword">var</span> lang = (snippet.classList[<span class="hljs-number">1</span>] || <span class="hljs-string">'code'</span>).toUpperCase();<br>    wrapper.setAttribute(<span class="hljs-string">'data-lang'</span>, lang);<br>  &#125;);<br><br>  <span class="hljs-comment">// Add copy to clipboard functionality and user feedback</span><br>  <span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> ClipboardJS(<span class="hljs-string">'.codecopy-btn'</span>, &#123;<br>    <span class="hljs-attr">target</span>: <span class="hljs-function"><span class="hljs-params">trigger</span> =&gt;</span> &#123;<br>      <span class="hljs-keyword">return</span> trigger.nextSibling;<br>    &#125;,<br>  &#125;);<br><br>  clipboard.on(<span class="hljs-string">'success'</span>, e =&gt; &#123;<br>    e.trigger.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copied!'</span>);<br>    e.clearSelection();<br>  &#125;);<br><br>  <span class="hljs-comment">// Replace tooltip message when mouse leaves button</span><br>  <span class="hljs-comment">// and prevent page refresh after click button</span><br>  <span class="hljs-keyword">var</span> btns = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">'.codecopy-btn'</span>);<br><br>  btns.forEach(<span class="hljs-function"><span class="hljs-params">btn</span> =&gt;</span> &#123;<br>    btn.addEventListener(<span class="hljs-string">'mouseleave'</span>, e =&gt; &#123;<br>      e.target.setAttribute(<span class="hljs-string">'aria-label'</span>, <span class="hljs-string">'Copy to clipboard'</span>);<br>      e.target.blur();<br>    &#125;);<br><br>    btn.addEventListener(<span class="hljs-string">'click'</span>, e =&gt; &#123;<br>      e.preventDefault();<br>    &#125;);<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>接著在 <code>themes\material-flow\layout\_partial\scripts.ejs</code> 檔案內的載入 <code>clipboard-use.js</code>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">%-</span> <span class="hljs-attr">js</span>('<span class="hljs-attr">js</span>/<span class="hljs-attr">clipboard-use.js</span>') %&gt;</span><br></code></pre></td></tr></table></figure><h2 id="css-樣式"><a class="header-anchor" href="#css-樣式"></a>CSS 樣式</h2><h3 id="提示文字樣式"><a class="header-anchor" href="#提示文字樣式"></a>提示文字樣式</h3><p>在 <code>themes\material-flow\source\less</code> 目錄內建立 <code>_tooltipped.less</code>，檔案內容如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-comment">// ref: https://github.com/primer/primer/blob/master/modules/primer-tooltips/lib/tooltips.scss</span><br><span class="hljs-selector-class">.tooltipped</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br>&#125;<br><br><span class="hljs-comment">// This is the tooltip bubble</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000000</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0.5em</span> <span class="hljs-number">0.75em</span>;<br>  <span class="hljs-attribute">-webkit-font-smoothing</span>: subpixel-antialiased;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>  <span class="hljs-attribute">text-shadow</span>: none;<br>  <span class="hljs-attribute">text-transform</span>: none;<br>  <span class="hljs-attribute">letter-spacing</span>: normal;<br>  <span class="hljs-attribute">word-wrap</span>: break-word;<br>  <span class="hljs-attribute">white-space</span>: pre;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">content</span>: attr(aria-label);<br>  <span class="hljs-attribute">background</span>: <span class="hljs-number">#616161</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">3px</span>;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// This is the tooltip arrow</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1000001</span>;<br>  <span class="hljs-attribute">display</span>: none;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#616161</span>;<br>  <span class="hljs-attribute">pointer-events</span>: none;<br>  <span class="hljs-attribute">content</span>: <span class="hljs-string">''</span>;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">6px</span> solid transparent;<br>  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// delay animation for tooltip</span><br><span class="hljs-keyword">@keyframes</span> tooltip-appear &#123;<br>  <span class="hljs-selector-tag">from</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">to</span> &#123;<br>    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// This will indicate when we'll activate the tooltip</span><br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:hover</span>,<br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:active</span>,<br><span class="hljs-selector-class">.tooltipped</span><span class="hljs-selector-pseudo">:focus</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span>,<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">display</span>: inline-block;<br>    <span class="hljs-attribute">text-decoration</span>: none;<br>    <span class="hljs-attribute">animation-name</span>: tooltip-appear;<br>    <span class="hljs-attribute">animation-duration</span>: <span class="hljs-number">0.1s</span>;<br>    <span class="hljs-attribute">animation-fill-mode</span>: forwards;<br>    <span class="hljs-attribute">animation-timing-function</span>: ease-in;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// Tooltipped south</span><br><span class="hljs-selector-class">.tooltipped-s</span>,<br><span class="hljs-selector-class">.tooltipped-sw</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">100%</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">margin-top</span>: <span class="hljs-number">6px</span>;<br>  &#125;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">top</span>: auto;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">50%</span>;<br>    <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">7px</span>;<br>    <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">6px</span>;<br>    <span class="hljs-attribute">border-bottom-color</span>: <span class="hljs-number">#616161</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.tooltipped-sw</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">margin-right</span>: -<span class="hljs-number">16px</span>;<br>&#125;<br><br><span class="hljs-comment">// Move the tooltip body to the center of the object.</span><br><span class="hljs-selector-class">.tooltipped-s</span><span class="hljs-selector-pseudo">::after</span> &#123;<br>  <span class="hljs-attribute">transform</span>: translateX(<span class="hljs-number">50%</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>接著在 <code>themes\material-flow\source\style.less</code> 檔案內的載入 <code>_tooltipped.less</code>：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-keyword">@import</span> <span class="hljs-string">'less/_tooltipped.less'</span>;<br></code></pre></td></tr></table></figure><h3 id="其他樣式"><a class="header-anchor" href="#其他樣式"></a>其他樣式</h3><p>可參考本站的完整樣式：<a href="https://github.com/titangene/hexo-blog/blob/master/themes/material-flow/source/less/_article.less" target="_blank" rel="noopener">原始碼</a></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">figure</span> &#123;<br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-class">.highlight</span> &#123;<br>    <span class="hljs-attribute">position</span>: relative;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">1rem</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding-top</span>: <span class="hljs-number">22px</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.code-highlight</span> &#123;<br>  <span class="hljs-attribute">position</span>: relative;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">::before</span> &#123;<br>    <span class="hljs-attribute">content</span>: attr(data-lang);<br>    <span class="hljs-attribute">font-family</span>: <span class="hljs-string">'Roboto Mono'</span>, Consolas, monospace, sans-serif;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">0.6em</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#b1b1b1</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;<br>    <span class="hljs-attribute">right</span>: <span class="hljs-number">7px</span>;<br>    <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-selector-class">.codecopy-btn</span> &#123;<br>  <span class="hljs-attribute">width</span>: <span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">26px</span>;<br>  <span class="hljs-attribute">position</span>: absolute;<br>  <span class="hljs-attribute">top</span>: <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">right</span>: -<span class="hljs-number">24px</span>;<br>  <span class="hljs-attribute">border</span>: none;<br>  <span class="hljs-attribute">box-shadow</span>: none;<br>  <span class="hljs-attribute">background</span>: none;<br>  <span class="hljs-attribute">z-index</span>: <span class="hljs-number">1</span>;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">12px</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#fff</span>;<br>  <span class="hljs-attribute">transition</span>: color <span class="hljs-number">0.2s</span>;<br><br>  <span class="hljs-selector-tag">&amp;</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#7bf</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="demo"><a class="header-anchor" href="#demo"></a>Demo</h2><p>下面是原本的 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight javascript"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"gutter"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"line"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs javascript"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用後的 HTML：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code-highlight"</span> <span class="hljs-attr">data-lang</span>=<span class="hljs-string">"JAVASCRIPT"</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"codecopy-btn tooltipped tooltipped-sw"</span> <span class="hljs-attr">aria-label</span>=<span class="hljs-string">"Copy to clipboard"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"far fa-copy"</span> <span class="hljs-attr">aria-hidden</span>=<span class="hljs-string">"true"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">figure</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight javascript"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"gutter"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"line"</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"code"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">pre</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">code</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"hljs javascript"</span>&gt;</span>...<span class="hljs-tag">&lt;/<span class="hljs-name">code</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">pre</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">figure</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>畫面：</p><p><img src="../images/hexo-copy-code-snippet-to-clipboard/copy-to-clipboard.gif" alt=""></p><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://clipboardjs.com/" target="_blank" rel="noopener">clipboard.js — Copy to clipboard without Flash</a></li><li><a href="https://github.com/primer/primer/tree/master/modules/primer-tooltips" target="_blank" rel="noopener">GitHub’s Primer Tooltips</a></li><li><a href="https://github.com/zenorocha/codecopy" target="_blank" rel="noopener">zenorocha/codecopy: A browser extension that adds copy to clipboard buttons on every code block</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/hexo-copy-code-snippet-to-clipboard.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;為了提高 blog 的使用體驗，本文將說明如何在 Hexo 主題內，提供程式碼片段複製至剪貼簿的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="https://titangene.github.io/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://titangene.github.io/tags/hexo/"/>
    
      <category term="Code Snippet" scheme="https://titangene.github.io/tags/code-snippet/"/>
    
      <category term="Clipboard" scheme="https://titangene.github.io/tags/clipboard/"/>
    
  </entry>
  
  <entry>
    <title>在 Docker 下建立並使用 MSSQL Server for Linux</title>
    <link href="https://titangene.github.io/article/docker-mssql-server-for-linux.html"/>
    <id>https://titangene.github.io/article/docker-mssql-server-for-linux.html</id>
    <published>2019-01-30T15:30:00.000Z</published>
    <updated>2019-04-30T15:57:59.868Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/docker-mssql-server-for-linux.jpg" alt=""></p><p>在 SQL Server 2017 時，微軟推出了 Linux 版，同時也在 Docker Hub 上提供了 <a href="https://hub.docker.com/r/microsoft/mssql-server-linux/" target="_blank" rel="noopener">microsoft/mssql-server-linux</a> 的 Docker image。本篇會介紹如何在 Docker 下，透過此 image 來建立並使用 MSSQL Server for Linux。</p><a id="more"></a><h2 id="mssql-server-for-linux-要求"><a class="header-anchor" href="#mssql-server-for-linux-要求"></a>MSSQL Server for Linux 要求</h2><ul><li>必須 Docker Engine 1.8+，支援任何平台 (Windows/Mac/Linux)</li><li>硬碟空間至少 2 GB</li><li>RAM 至少 2 GB</li><li>image 必要的環境變數：<ul><li><code>ACCEPT_EULA=Y</code>：確認同意授權合約</li><li><code>MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;</code>：設定 SA 密碼</li></ul></li><li>A strong system administrator (SA) 密碼必須符合以下規則：<ul><li>至少 8 個字元</li><li>必需包含英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可</li></ul></li></ul><blockquote><p>詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-setup?view=sql-server-2017#system" target="_blank" rel="noopener">SQL Server on Liunx 的系統需求</a> 文件。</p></blockquote><h2 id="建立-container"><a class="header-anchor" href="#建立-container"></a>建立 Container</h2><p>Docker Hub：<a href="https://hub.docker.com/r/microsoft/mssql-server-linux/" target="_blank" rel="noopener">microsoft/mssql-server-linux</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 從 Docker Hub 提取 SQL Server 2017 Linux container image<br><span class="hljs-meta">$</span> docker pull microsoft/mssql-server-linux:2017-latest<br><span class="hljs-meta"><br>#</span> 建立並執行 Docker container<br><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1401:1433 --name sql1 \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><ul><li><code>-e 'ACCEPT_EULA=Y'</code>：確認同意授權合約</li><li><code>-e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;'</code>：必需是強密碼並至少 8 個字元。強密碼英文大寫、英文小寫、數字、非字母數字符號四者中的其中三種即可。</li><li><code>-p hostPort:containerPort</code>：host 對外開 1401 port，container 內開 1433 port</li><li><code>--name</code>：指定 container 名稱</li><li><code>-d</code>：背景執行</li><li><code>microsoft/mssql-server-linux:2017-latest</code>：使用 SQL Server 2017 Linux image 建立 container</li></ul><p>如果列表 <code>NAMES</code> 顯示 sql1 並且 <code>STATUS</code> 顯示 UP 就代表 SQL Server 已在背景執行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查看 container 的狀態<br><span class="hljs-meta">$</span> docker ps<br>CONTAINER ID   IMAGE                                      COMMAND                  CREATED          STATUS          PORTS                    NAMES<br>08e2f151d579   microsoft/mssql-server-linux:2017-latest   "/bin/sh -c /opt/mss…"   31 minutes ago   Up 31 minutes   0.0.0.0:1401-&gt;1433/tcp   sql1<br></code></pre></td></tr></table></figure><h2 id="連接至-sql-server"><a class="header-anchor" href="#連接至-sql-server"></a>連接至 SQL Server</h2><p>使用 SQL Server 命令列工具 <code>sqlcmd</code>，連接到 SQL Server container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 在外部向執行中的 container 內部下指令，啟動 Container 內部的互動式 bash shell，來執行你下的指令<br><span class="hljs-meta">$</span> docker exec -it sql1 bash<br><span class="hljs-meta"><br>#</span> 使用 SQL Server 命令列工具 `sqlcmd`，並登入帳號密碼連接到 SQL Server<br><span class="hljs-meta">$</span> /opt/mssql-tools/bin/sqlcmd -S localhost -U SA<br>Password:<br><span class="hljs-meta"><br>#</span> 出現 "1&gt;" 就代表已成功登入並已進入 sqlcmd<br><span class="hljs-meta">1&gt;</span><br></code></pre></td></tr></table></figure><h2 id="變更-sa-的密碼"><a class="header-anchor" href="#變更-sa-的密碼"></a>變更 SA 的密碼</h2><p>SA 帳號是在安裝期間建立的 SQL Server 實例上的系統管理員。建立 SQL Server container 之後，在 container 中執行 <code>echo $MSSQL_SA_PASSWORD</code>，即可查看 SA 的密碼：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql1 bash<br>root@xxx:/# echo $MSSQL_SA_PASSWORD<br>YourStrong!Passw0rd<br></code></pre></td></tr></table></figure><p>執行下面指令可以變更 SA 的密碼，而 <code>opt/mssql-tools/bin/sqlcmd</code> 是 <code>sqlcmd</code> 所在的路徑：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql1 /opt/mssql-tools/bin/sqlcmd \<br>  -S localhost -U SA -P '&lt;YourStrong!Passw0rd&gt;' \<br>  -Q 'ALTER LOGIN SA WITH PASSWORD="&lt;YourNewStrong!Passw0rd&gt;"'<br></code></pre></td></tr></table></figure><p>參數說明：</p><ul><li><code>-S</code>：server</li><li><code>-U</code>：user name</li><li><code>-P</code>：password</li><li><code>-Q</code>：query，執行 SQL 指令後結束 <code>sqlcmd</code></li></ul><h2 id="建立資料庫及查詢資料"><a class="header-anchor" href="#建立資料庫及查詢資料"></a>建立資料庫及查詢資料</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢 server 上所有 DB 名稱<br><span class="hljs-meta">1&gt;</span> SELECT Name from sys.Databases<br><span class="hljs-meta">#</span> 在 sqlcmd 指令模式下，要輸入 GO 指令才會執行<br><span class="hljs-meta">2&gt;</span> GO<br>Name<br>------------<br>master<br>tempdb<br>model<br>msdb<br><br>(4 rows affected)<br><span class="hljs-meta"><br>#</span> 建立資料庫<br><span class="hljs-meta">1&gt;</span> CREATE DATABASE TestDB<br><span class="hljs-meta">2&gt;</span> GO<br><span class="hljs-meta">#</span> 出現下面畫面 "1&gt;" 就代表已成功建立資料庫<br><span class="hljs-meta">1&gt;</span><br><span class="hljs-meta"><br>#</span> 離開 sqlcmd<br><span class="hljs-meta">1&gt;</span> quit<br></code></pre></td></tr></table></figure><h2 id="使用-azure-data-studio-連接-sql-server"><a class="header-anchor" href="#使用-azure-data-studio-連接-sql-server"></a>使用 Azure Data Studio 連接 SQL Server</h2><p><a href="https://github.com/Microsoft/azuredatastudio" target="_blank" rel="noopener">Azure Data Studio</a> (以前稱為 SQL Operations Studio) 是一個輕量且免費的跨平台 SQL Server 開源管理工具，支援 Windows、macOS、Linux。</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_21-20-32.png" alt=""></p><h3 id="安裝-azure-data-studio"><a class="header-anchor" href="#安裝-azure-data-studio"></a>安裝 Azure Data Studio</h3><h4 id="for-windows"><a class="header-anchor" href="#for-windows"></a>for Windows</h4><p>下載並解壓縮，接著執行 <code>\azuredatastudio-windows\sqlops.exe</code> 即可開始使用。</p><h4 id="for-linux"><a class="header-anchor" href="#for-linux"></a>for Linux</h4><p>下載並解壓縮，接著將 Azure Data Studio 執行檔加入 <code>PATH</code> 環境變數，以後即可在終端機輸入 <code>azuredatastudio</code> 開啟 Azure Data Studio：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> cd ~<br><span class="hljs-meta">$</span> cp ~/Downloads/azuredatastudio-linux-&lt;version string&gt;.tar.gz ~<br><span class="hljs-meta">$</span> tar -xvf ~/azuredatastudio-linux-&lt;version string&gt;.tar.gz<br><span class="hljs-meta">$</span> echo 'export PATH="$PATH:~/azuredatastudio-linux-x64"' &gt;&gt; ~/.bashrc<br><span class="hljs-meta">$</span> source ~/.bashrc<br><span class="hljs-meta">$</span> azuredatastudio<br></code></pre></td></tr></table></figure><h4 id="for-macos"><a class="header-anchor" href="#for-macos"></a>for macOS</h4><p>下載並解壓縮，然後將 Azure Data Studio 加入 Launchpad，將 <code>Studio.app</code> 拖曳到應用程式目錄 (Applications folder) 即可。</p><blockquote><p>安裝詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/azure-data-studio/download?view=sql-server-2017" target="_blank" rel="noopener">下載並安裝 - Azure Data Studio | Microsoft Docs</a> 文件。</p></blockquote><h3 id="登入-sql-server"><a class="header-anchor" href="#登入-sql-server"></a>登入 SQL Server</h3><p>Server name 的格式： <code>IP, Port</code></p><ul><li>IP：<ul><li>Linux：使用 <code>ifconfig</code> 指令查詢 IP</li><li>Windows：使用 <code>ipconfig</code> 指令查詢 IP</li></ul></li><li>Port：要看前面建立的 container 是設定多少 Port</li></ul><p>此範例 (也就是下面的指令) 是設定使用 1401 port，所以只要輸入 <code>YourIP, 1401</code> 就能與 SQL Server 連接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1401:1433 --name sql1 \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_23-02-20.png" alt=""></p><h2 id="建立資料表和資料-並查詢資料"><a class="header-anchor" href="#建立資料表和資料-並查詢資料"></a>建立資料表和資料，並查詢資料</h2><p>執行下面指令，建立資料表和資料，並查詢資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 切換至 TestDB 資料庫</span><br><span class="hljs-keyword">use</span> TestDB;<br><span class="hljs-comment">-- 建立資料表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> People(<span class="hljs-keyword">Name</span> <span class="hljs-keyword">nvarchar</span>(<span class="hljs-number">50</span>), Age <span class="hljs-built_in">int</span>);<br><span class="hljs-comment">-- 新增資料</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'Titan'</span>, <span class="hljs-number">18</span>), (<span class="hljs-string">'John'</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">'Alex'</span>, <span class="hljs-number">40</span>);<br><span class="hljs-comment">-- 查詢年齡小於 20 歲的人</span><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> People <span class="hljs-keyword">WHERE</span> Age &lt; <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>執行完的結果如下圖，看到此查詢結果就代表已成功新增資料：</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_21-20-32.png" alt=""></p><h2 id="刪除-container"><a class="header-anchor" href="#刪除-container"></a>刪除 Container</h2><p>指定刪除名為 <code>sql1</code> 的 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢目前的正在執行的 container<br><span class="hljs-meta">$</span> docker ps<br><span class="hljs-meta"><br>#</span> container 停止執行<br><span class="hljs-meta">$</span> docker stop sql<br><span class="hljs-meta"><br>#</span> 刪除 container<br><span class="hljs-meta">$</span> docker rm sql1<br></code></pre></td></tr></table></figure><p>或是可以在未停止執行 container 的情況下，直接強制刪除 container：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 強制刪除 container<br><span class="hljs-meta">$</span> docker rm -f sql1<br></code></pre></td></tr></table></figure><h2 id="透過-volume-將資料庫的資料儲存至主機"><a class="header-anchor" href="#透過-volume-將資料庫的資料儲存至主機"></a>透過 Volume 將資料庫的資料儲存至主機</h2><p>在 <code>docker run</code> 指令上加 <code>-v</code> 參數可以建立實體資料夾與 container 資料夾的對應關係，將主機上的指定目錄綁定到 container 的指定目錄，也就是可以存資料庫的資料至主機，參數語法為 <code>-v &lt;host directory&gt;:/var/opt/mssql</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 執行 Docker container image<br><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1402:1433 --name sql2 \<br>  -v `pwd`/mssql:/var/opt/mssql \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><h2 id="備份與還原資料庫"><a class="header-anchor" href="#備份與還原資料庫"></a>備份與還原資料庫</h2><h3 id="範例前置準備：建立資料庫-資料表和資料"><a class="header-anchor" href="#範例前置準備：建立資料庫-資料表和資料"></a>範例前置準備：建立資料庫、資料表和資料</h3><p>下面的 SQL 指令是用來立資料庫、資料表和資料，因為此 container 是剛剛另外新建的，之前的 container 已經刪除了 (因為沒有利用 Volume 儲存資料庫的資料)，所以需要重新建立資料：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建立 資料庫</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> TestDB;<br>GO<br><span class="hljs-comment">-- 切換至 TestDB 資料庫</span><br><span class="hljs-keyword">use</span> TestDB;<br><span class="hljs-comment">-- 建立資料表</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> People(<span class="hljs-keyword">Name</span> <span class="hljs-keyword">nvarchar</span>(<span class="hljs-number">50</span>), Age <span class="hljs-built_in">int</span>);<br><span class="hljs-comment">-- 新增資料</span><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> People <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">'Titan'</span>, <span class="hljs-number">18</span>), (<span class="hljs-string">'John'</span>, <span class="hljs-number">6</span>), (<span class="hljs-string">'Alex'</span>, <span class="hljs-number">40</span>);<br></code></pre></td></tr></table></figure><h3 id="備份資料庫"><a class="header-anchor" href="#備份資料庫"></a>備份資料庫</h3><p>使用 sqlcmd 連接到 SQL Server，並完整備份 TestDB 資料庫，備份檔存至 <code>./data/testdb.bak</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql2 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \<br>  -Q "BACKUP DATABASE TestDB TO DISK = N'/var/opt/mssql/data/testdb.bak' WITH NOFORMAT, NOINIT, NAME = 'demodb-full', SKIP, NOREWIND, NOUNLOAD, STATS = 10"<br></code></pre></td></tr></table></figure><p>當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會備份完成，如果備份成功畫面就會顯示「BACKUP DATABASE successfully …」：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">Password: <br>10 percent processed.<br>20 percent processed.<br>30 percent processed.<br>40 percent processed.<br>50 percent processed.<br>60 percent processed.<br>70 percent processed.<br>80 percent processed.<br>90 percent processed.<br>Processed 312 pages for database 'TestDB', file 'TestDB' on file 1.<br>100 percent processed.<br>Processed 6 pages for database 'TestDB', file 'TestDB_log' on file 1.<br>BACKUP DATABASE successfully processed 318 pages in 0.348 seconds (7.139 MB/sec).<br></code></pre></td></tr></table></figure><h3 id="範例前置處理：刪除-container-和資料庫資料"><a class="header-anchor" href="#範例前置處理：刪除-container-和資料庫資料"></a>範例前置處理：刪除 container 和資料庫資料</h3><p>下面是要模擬把 container 刪除後，要如何將剛剛備份的資料庫資料 (也就是 <code>./data/testdb.bak</code> ) 還原，因此也要刪除透過 Volume 儲存的資料庫資料，如以下步驟：</p><ol><li>刪除 container</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查詢目前的正在執行的 container<br><span class="hljs-meta">$</span> docker ps<br><span class="hljs-meta">#</span> 強制刪除 container<br><span class="hljs-meta">$</span> docker rm -f sql2<br></code></pre></td></tr></table></figure><ol start="2"><li>刪除透過 Volume 儲存的資料庫資料</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 查看剛剛刪除的 container 保存下來的 DB 資料檔 (TestDB_log.ldf 和 TestDB.mdf)<br><span class="hljs-meta">$</span> cd mssql/data<br><span class="hljs-meta">$</span> pwd<br>/home/titan/project/mssql/data<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>├── testdb.bak<br>├── TestDB_log.ldf   &lt;---<br>└── TestDB.mdf       &lt;---<br><span class="hljs-meta"><br>#</span> 刪除 TestDB.mdf 和 TestDB_log.ldf<br><span class="hljs-meta">$</span> sudo rm TestDB*<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>└── testdb.bak<br></code></pre></td></tr></table></figure><ol start="3"><li>在建立一個新的 container (用來做還原資料庫用的)</li></ol><p>先回到專案的根目錄：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> pwd<br>/home/titan/project/mssql/data<br><span class="hljs-meta">$</span> cd ../..<br><span class="hljs-meta">$</span> pwd<br>/home/titan/project<br></code></pre></td></tr></table></figure><p>接著建立一個新的 container，名稱叫做 sql3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker run -e 'ACCEPT_EULA=Y' -e 'MSSQL_SA_PASSWORD=&lt;YourStrong!Passw0rd&gt;' \<br>  -p 1403:1433 --name sql3 \<br>  -v `pwd`/mssql:/var/opt/mssql \<br>  -d microsoft/mssql-server-linux:2017-latest<br></code></pre></td></tr></table></figure><h3 id="還原資料庫"><a class="header-anchor" href="#還原資料庫"></a>還原資料庫</h3><p>使用 sqlcmd 連接到 SQL Server，並還原 TestDB 資料庫 (要還原的備份檔存至 <code>./data/testdb.bak</code> )：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> docker exec -it sql3 /opt/mssql-tools/bin/sqlcmd -S localhost -U SA \<br>  -Q "RESTORE DATABASE TestDB FROM DISK = N'/var/opt/mssql/data/testdb.bak' WITH  FILE = 1, NOUNLOAD, REPLACE, STATS = 5"<br></code></pre></td></tr></table></figure><p>當執行此指令時，SQL Server 將會提示需輸入密碼。輸入密碼後，很快就會還原完成，如果還原成功畫面就會顯示「RESTORE DATABASE successfully …」：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">Password: <br>6 percent processed.<br>11 percent processed.<br>15 percent processed.<br>20 percent processed.<br>25 percent processed.<br>31 percent processed.<br>36 percent processed.<br>41 percent processed.<br>45 percent processed.<br>50 percent processed.<br>57 percent processed.<br>61 percent processed.<br>66 percent processed.<br>70 percent processed.<br>75 percent processed.<br>82 percent processed.<br>86 percent processed.<br>91 percent processed.<br>95 percent processed.<br>100 percent processed.<br>Processed 344 pages for database 'TestDB', file 'TestDB' on file 1.<br>Processed 7 pages for database 'TestDB', file 'TestDB_log' on file 1.<br>RESTORE DATABASE successfully processed 351 pages in 0.321 seconds (8.530 MB/sec).<br></code></pre></td></tr></table></figure><p>檢查一下剛剛刪除的 <code>TestDB.mdf</code> 和 <code>TestDB_log.ldf</code> 都正確的還原了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> cd mssql/data<br><span class="hljs-meta">$</span> tree<br>├── master.mdf<br>├── mastlog.ldf<br>├── modellog.ldf<br>├── model.mdf<br>├── msdbdata.mdf<br>├── msdblog.ldf<br>├── tempdb.mdf<br>├── templog.ldf<br>├── testdb.bak<br>├── TestDB_log.ldf   &lt;---<br>└── TestDB.mdf       &lt;---<br></code></pre></td></tr></table></figure><p>使用 <code>select</code> SQL 指令可以看到資料確實已還原：</p><p><img src="../images/docker-mssql-server-for-linux/2019-01-30_22-04-08.png" alt=""></p><h2 id="使用-azure-data-studio-備份或還原資料庫"><a class="header-anchor" href="#使用-azure-data-studio-備份或還原資料庫"></a>使用 Azure Data Studio 備份或還原資料庫</h2><p>如果覺得打指令很麻煩，其實 Azure Data Studio、<a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-manage-ssms?view=sql-server-2017" target="_blank" rel="noopener">SQL Server Management Studio (SSMS)</a>、<a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-develop-use-ssdt?view=sql-server-2017" target="_blank" rel="noopener">SQL Server Data Tools (SSDT)</a> 或 <a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-develop-use-vscode?view=sql-server-2017" target="_blank" rel="noopener">Visual Studio Code (VS Code) 的 mssql 擴充功能</a> 都有提供 GUI 的介面，可以直接備份或還原資料庫。</p><p>下圖是 Azure Data Studio 備份或還原資料庫的畫面：</p><p><img src="https://i.imgur.com/wexszt5.png" alt=""></p><blockquote><p>詳情可參考官方的 <a href="https://docs.microsoft.com/zh-tw/sql/azure-data-studio/tutorial-backup-restore-sql-server?view=sql-server-2017" target="_blank" rel="noopener">備份與還原的資料庫 - Azure Data Studio | Microsoft Docs</a> 文件。</p></blockquote><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/quickstart-install-connect-docker?view=sql-server-2017" target="_blank" rel="noopener">開始使用 Docker （Linux 上執行 SQL Server） 上的 SQL Server 容器 - SQL Server | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/sql-server-linux-configure-docker?view=sql-server-2017" target="_blank" rel="noopener">在 Docker 上的 SQL Server 組態選項 - SQL Server | Microsoft Docs</a></li><li><a href="https://docs.microsoft.com/zh-tw/sql/linux/tutorial-restore-backup-in-sql-server-container?view=sql-server-2017" target="_blank" rel="noopener">在 Docker 中的 SQL Server 資料庫還原 - SQL Server | Microsoft Docs</a></li><li><a href="https://github.com/Microsoft/mssql-docker/tree/master/linux/preview" target="_blank" rel="noopener">Github repo: Microsoft/mssql-docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/docker-mssql-server-for-linux.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;在 SQL Server 2017 時，微軟推出了 Linux 版，同時也在 Docker Hub 上提供了 &lt;a href=&quot;https://hub.docker.com/r/microsoft/mssql-server-linux/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;microsoft/mssql-server-linux&lt;/a&gt; 的 Docker image。本篇會介紹如何在 Docker 下，透過此 image 來建立並使用 MSSQL Server for Linux。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL Server" scheme="https://titangene.github.io/categories/sql-server/"/>
    
      <category term="Linux" scheme="https://titangene.github.io/categories/sql-server/linux/"/>
    
      <category term="Database" scheme="https://titangene.github.io/categories/sql-server/linux/database/"/>
    
      <category term="DevOps" scheme="https://titangene.github.io/categories/sql-server/linux/database/devops/"/>
    
    
      <category term="Docker" scheme="https://titangene.github.io/tags/docker/"/>
    
      <category term="Container" scheme="https://titangene.github.io/tags/container/"/>
    
  </entry>
  
  <entry>
    <title>將 Hexo 的 Markdown 渲染引擎換成 markdown-it</title>
    <link href="https://titangene.github.io/article/hexo-markdown-it.html"/>
    <id>https://titangene.github.io/article/hexo-markdown-it.html</id>
    <published>2019-01-29T14:51:00.000Z</published>
    <updated>2019-09-08T16:34:17.393Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/hexo.jpg" alt=""></p><p>個人很常用 HackMD 紀錄筆記，希望 blog 也可以支援 HackMD 的 Markdown 格式，因此本篇的目標就是要將 Hexo 原本的 Markdown 渲染引擎 <code>marked</code>，換成 HackMD 的 Markdown 渲染引擎：<code>markdown-it</code>。</p><a id="more"></a><h2 id="更換渲染引擎"><a class="header-anchor" href="#更換渲染引擎"></a>更換渲染引擎</h2><p>Hexo 預設的 markdown 渲染引擎是 <a href="https://github.com/markedjs/marked" target="_blank" rel="noopener"><code>marked</code></a>，並使用 <a href="https://github.com/hexojs/hexo-renderer-marked" target="_blank" rel="noopener"><code>hexo-renderer-marked</code></a> 此 Hexo 外掛來將 Markdown 轉換成靜態檔案 HTML，但因前面提到的需求，所以要刪除原本的渲染引擎</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm uninstall hexo-renderer-marked --save<br></code></pre></td></tr></table></figure><p>安裝我們要改用的 Markdown 渲染引擎：<code>markdown-it</code>，而使用此渲染引擎的 Hexo 外掛就是 <a href="https://github.com/hexojs/hexo-renderer-markdown-it" target="_blank" rel="noopener"><code>hexo-renderer-markdown-it</code></a>，所以要在 hexo 的專案中安裝此外掛：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm install git+https://github.com/hexojs/hexo-renderer-markdown-it.git --save<br></code></pre></td></tr></table></figure><p>為何安裝 NPM 套件時要指定 github 的 repo 呢？因為 <code>hexo-renderer-markdown-it</code> 此 NPM 套件的程式沒有更新成 Github 上面的程式版本，請確定剛剛安裝套件中，<code>node_modules\hexo-renderer-markdown-it\lib\renderer.js</code> 這個檔案內的下面這段程式碼是否相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (opt.plugins) &#123;<br>  parser = opt.plugins.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">parser, pugs</span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (pugs <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span> &amp;&amp; pugs.name) &#123;<br>      <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs.name), pugs.options);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs));<br>    &#125;<br>  &#125;, parser);<br>&#125;<br></code></pre></td></tr></table></figure><p>若是從 NPM 下載的套件版本 (也就是直接使用 <code>npm install hexo-renderer-markdown-it --save</code> 此指令)，會少幾句程式，少了可在載入 <code>markdown-it</code> 的外掛時為該外掛設定所需的 options：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (opt.plugins) &#123;<br>  parser = opt.plugins.reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">parser, pugs</span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> parser.use(<span class="hljs-built_in">require</span>(pugs));<br>  &#125;, parser);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="安裝渲染引擎外掛套件"><a class="header-anchor" href="#安裝渲染引擎外掛套件"></a>安裝渲染引擎外掛套件</h2><p>我們可以參考 <a href="https://github.com/hackmdio/codimd/blob/master/package.json" target="_blank" rel="noopener">HackMD</a> 的相依套件，只要是名為 <code>markdown-it-xxx</code> 的套件就是渲染引擎 <code>markdown-it</code> 的外掛：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>  "dependencies": &#123;<br>    // ...<br>    "markdown-it": "^8.2.2",<br>    "markdown-it-abbr": "^1.0.4",<br>    "markdown-it-container": "^2.0.0",<br>    "markdown-it-deflist": "^2.0.1",<br>    "markdown-it-emoji": "^1.3.0",<br>    "markdown-it-footnote": "^3.0.1",<br>    "markdown-it-imsize": "^2.0.1",<br>    "markdown-it-ins": "^2.0.0",<br>    "markdown-it-mark": "^2.0.0",<br>    "markdown-it-mathjax": "^2.0.0",<br>    "markdown-it-regexp": "^0.4.0",<br>    "markdown-it-sub": "^1.0.0",<br>    "markdown-it-sup": "^1.0.0"<br>    // ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而下列是我選擇要安裝的外掛：</p><ul><li><a href="https://github.com/markdown-it/markdown-it-abbr" target="_blank" rel="noopener">markdown-it-abbr</a></li><li><a href="https://github.com/markdown-it/markdown-it-container" target="_blank" rel="noopener">markdown-it-container</a></li><li><a href="https://github.com/markdown-it/markdown-it-deflist" target="_blank" rel="noopener">markdown-it-deflist</a></li><li><a href="https://github.com/markdown-it/markdown-it-emoji" target="_blank" rel="noopener">markdown-it-emoji</a></li><li><a href="https://github.com/markdown-it/markdown-it-footnote" target="_blank" rel="noopener">markdown-it-footnote</a></li><li><a href="https://github.com/tatsy/markdown-it-imsize" target="_blank" rel="noopener">markdown-it-imsize</a></li><li><a href="https://github.com/markdown-it/markdown-it-ins" target="_blank" rel="noopener">markdown-it-ins</a></li><li><a href="https://github.com/markdown-it/markdown-it-mark" target="_blank" rel="noopener">markdown-it-mark</a></li><li><a href="https://github.com/rlidwka/markdown-it-regexp" target="_blank" rel="noopener">markdown-it-regexp</a></li><li><a href="https://github.com/markdown-it/markdown-it-sub" target="_blank" rel="noopener">markdown-it-sub</a></li><li><a href="https://github.com/markdown-it/markdown-it-sup" target="_blank" rel="noopener">markdown-it-sup</a></li><li><a href="https://github.com/linsir/markdown-it-task-checkbox" target="_blank" rel="noopener">markdown-it-task-checkbox</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> npm i markdown-it-abbr markdown-it-checkbox markdown-it-container markdown-it-deflist markdown-it-emoji markdown-it-footnote markdown-it-imsize markdown-it-ins markdown-it-mark markdown-it-regexp markdown-it-sub markdown-it-sup --save<br></code></pre></td></tr></table></figure><h3 id="markdown-it-mathjax"><a class="header-anchor" href="#markdown-it-mathjax"></a>markdown-it-mathjax</h3><p>為何我未安裝 <code>markdown-it-mathjax</code> 這個外掛？這是因為…我之後再單獨寫一篇文章來介紹如何在 Markdown 加上數學式 MathJax。</p><h3 id="markdown-it-task-checkbox"><a class="header-anchor" href="#markdown-it-task-checkbox"></a>markdown-it-task-checkbox</h3><p>為何我會比 HackMD 多安裝 <code>markdown-it-task-checkbox</code> 這個外掛？</p><p>有使用過 HackMD 的朋友都知道，只要在 HackMD 輸入下列 Markdown 語法：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">- </span>[ ] task 1<br><span class="hljs-bullet">- </span>[x] task 2<br></code></pre></td></tr></table></figure><p>就會被轉換成 HTML 的 checkbox：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item-checkbox "</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>task 1<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"checkbox"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"task-list-item-checkbox"</span> <span class="hljs-attr">checked</span>=<span class="hljs-string">""</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>task 2<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><p>畫面會看到一個未被勾選以及一個已被勾選的 checkbox：</p><p><img src="../images/hexo-markdown-it/markdown-it_checkbox.png" alt=""></p><p>不過 HackMD 不是靠著 Markdown 渲染引擎 <code>markdown-it</code> 的外掛來轉換成 HTML 的，而是直接利用正規表示法 (Regular Expression) 找到 <code>[ ]</code> 或 <code>[x]</code> 的文字，再將這些文字直接轉換成 HTML 的 checkbox。我擷取了 HackMD 的這段程式邏輯，若想看詳細的原始碼可至 HackMD 的原始碼內的 <a href="https://github.com/hackmdio/codimd/blob/master/public/js/extra.js#L263" target="_blank" rel="noopener"><code>public/js/extra.js</code> 檔案中的第 263 行左右</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (<span class="hljs-regexp">/^\s*\[[x ]\]\s*/</span>.test(html)) &#123;<br>  li.innerHTML = html<br>    .replace(<br>      <span class="hljs-regexp">/^\s*\[ \]\s*/</span>,<br>      <span class="hljs-string">`&lt;input type="checkbox" class="task-list-item-checkbox" <span class="hljs-subst">$&#123;disabled&#125;</span>&gt;&lt;label&gt;&lt;/label&gt;`</span>,<br>    )<br>    .replace(<br>      <span class="hljs-regexp">/^\s*\[x\]\s*/</span>,<br>      <span class="hljs-string">`&lt;input type="checkbox" class="task-list-item-checkbox" checked <span class="hljs-subst">$&#123;disabled&#125;</span>&gt;&lt;label&gt;&lt;/label&gt;`</span>,<br>    );<br>  <span class="hljs-keyword">if</span> (li.tagName.toLowerCase() !== <span class="hljs-string">'li'</span>) &#123;<br>    li.parentElement.setAttribute(<span class="hljs-string">'class'</span>, <span class="hljs-string">'task-list-item'</span>);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    li.setAttribute(<span class="hljs-string">'class'</span>, <span class="hljs-string">'task-list-item'</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="設定-config-yml"><a class="header-anchor" href="#設定-config-yml"></a>設定 _config.yml</h2><p>將下面這些設定在根目錄的 <code>_config.yml</code> 設定檔中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Markdown-it config</span><br><span class="hljs-comment"># Docs: https://github.com/hexojs/hexo-renderer-markdown-it/wiki</span><br><span class="hljs-attr">markdown:</span><br><span class="hljs-attr">  render:</span><br><span class="hljs-attr">    html:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    xhtmlOut:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">    breaks:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    linkify:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    typographer:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    quotes:</span> <span class="hljs-string">'“”‘’'</span><br><span class="hljs-attr">  plugins:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-abbr</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-footnote</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-ins</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-sub</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-sup</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-deflist</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-imsize</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-mark</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-regexp</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-task-checkbox</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">success</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">info</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">warning</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-container</span><br><span class="hljs-attr">      options:</span> <span class="hljs-string">danger</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">markdown-it-deflist</span><br><span class="hljs-attr">    - name:</span> <span class="hljs-string">markdown-it-emoji</span><br><span class="hljs-attr">      options:</span><br><span class="hljs-attr">        shortcuts:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attr">  anchors:</span><br><span class="hljs-attr">    level:</span> <span class="hljs-number">1</span><br><span class="hljs-attr">    collisionSuffix:</span> <span class="hljs-string">'v'</span><br><span class="hljs-attr">    permalink:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">    permalinkClass:</span> <span class="hljs-string">header-anchor</span><br><span class="hljs-attr">    permalinkSymbol:</span> <span class="hljs-string">''</span><br></code></pre></td></tr></table></figure><blockquote><p>想了解設定詳情可參考 <a href="https://github.com/hexojs/hexo-renderer-markdown-it/wiki/Advanced-Configuration" target="_blank" rel="noopener">Advanced Configuration | hexojs/hexo-renderer-markdown-it Wiki</a> 官方文件。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/hexo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;個人很常用 HackMD 紀錄筆記，希望 blog 也可以支援 HackMD 的 Markdown 格式，因此本篇的目標就是要將 Hexo 原本的 Markdown 渲染引擎 &lt;code&gt;marked&lt;/code&gt;，換成 HackMD 的 Markdown 渲染引擎：&lt;code&gt;markdown-it&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Blog" scheme="https://titangene.github.io/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://titangene.github.io/tags/hexo/"/>
    
      <category term="Markdown" scheme="https://titangene.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Flutter 載入圖片</title>
    <link href="https://titangene.github.io/article/flutter-loading-images.html"/>
    <id>https://titangene.github.io/article/flutter-loading-images.html</id>
    <published>2018-12-31T13:10:00.000Z</published>
    <updated>2019-04-30T15:57:23.428Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/flutter.jpg" alt=""></p><p>要如何在 Flutter 內載入圖片？這篇做個小記錄。</p><a id="more"></a><h2 id="指定資源"><a class="header-anchor" href="#指定資源"></a>指定資源</h2><p>Flutter 是在根目錄內的 <code>pubspec.yaml</code> 檔案來設定應用程式所需的資源，設定的資源沒有順序關係。</p><p>若要指定某些資源，資源的路徑是相對於 <code>pubspec.yaml</code> 檔案的相對路徑：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/avatar.jpg</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/background.jpg</span><br></code></pre></td></tr></table></figure><p>也可以指定某個目錄，代表可以存取到這個目錄下的所有資源，但記得要在目錄的最後加上 <code>/</code> 這個符號：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/</span><br></code></pre></td></tr></table></figure><p>若要存取子目錄內的資源，請記得要另外為子目錄設定，例如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">flutter:</span><br><span class="hljs-attr">  assets:</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/</span><br><span class="hljs-bullet">    -</span> <span class="hljs-string">assets/images/</span><br></code></pre></td></tr></table></figure><h2 id="載入圖片"><a class="header-anchor" href="#載入圖片"></a>載入圖片</h2><p>可使用 <code>Image.asset()</code> 來載入圖片，裡面的參數就是圖片的路徑：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> Image.asset(<span class="hljs-string">'assets/images/background.jpg'</span>);<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>或是在 <code>Image()</code> 內的 <code>image</code> 參數使用 <code>AssetImage()</code>：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dart">Widget build(BuildContext context) &#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-keyword">return</span> Image(<br>    image: AssetImage(<span class="hljs-string">'assets/images/background.jpg'</span>),<br>  );<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最後顯示的結果會一樣：</p><p><img src="../images/flutter-loading-images/flutter_loading-images.png" alt=""></p><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://flutter.io/docs/development/ui/assets-and-images" target="_blank" rel="noopener">Adding assets and images - Flutter</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/flutter.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;要如何在 Flutter 內載入圖片？這篇做個小記錄。&lt;/p&gt;
    
    </summary>
    
      <category term="Flutter" scheme="https://titangene.github.io/categories/flutter/"/>
    
      <category term="Mobile App" scheme="https://titangene.github.io/categories/flutter/mobile-app/"/>
    
    
      <category term="Dart" scheme="https://titangene.github.io/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>Python - 日誌 (logging) 模組</title>
    <link href="https://titangene.github.io/article/python-logging.html"/>
    <id>https://titangene.github.io/article/python-logging.html</id>
    <published>2018-12-13T10:32:46.000Z</published>
    <updated>2019-04-30T15:55:01.854Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/python.png" alt=""></p><p>開發 Python 時，很常使用 <code>print()</code> 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 <code>print()</code>。而 Python 內建提供了 <code>logging</code> 模組可以用來取代 <code>print()</code>，<code>logging</code> 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 <code>logging</code> 模組。</p><a id="more"></a><h2 id="載入-logging-模組"><a class="header-anchor" href="#載入-logging-模組"></a>載入 logging 模組</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br></code></pre></td></tr></table></figure><h2 id="logging-等級"><a class="header-anchor" href="#logging-等級"></a>logging 等級</h2><p><code>logging</code> 模組預先定義了 6 種等級以及對應的 log 輸出函數 (除了 <code>logging.NOTSET</code> 沒有對應的輸出函數)：</p><table><thead><tr><th>等級</th><th>等級數值</th><th>輸出函數</th><th>說明</th></tr></thead><tbody><tr><td>NOTSET</td><td>0</td><td>無對應的輸出函數</td><td>未設定</td></tr><tr><td>DEBUG</td><td>10</td><td><code>logging.debug()</code></td><td>除錯</td></tr><tr><td>INFO</td><td>20</td><td><code>logging.info()</code></td><td>訊息</td></tr><tr><td>WARNING</td><td>30</td><td><code>logging.warning()</code></td><td>警告</td></tr><tr><td>ERROR</td><td>40</td><td><code>logging.error()</code></td><td>錯誤</td></tr><tr><td>CRITICAL</td><td>50</td><td><code>logging.critical()</code></td><td>嚴重錯誤</td></tr></tbody></table><p>若要查詢各等級的數值，可直接呼叫該等級：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>print(logging.NOTSET)   <span class="hljs-comment"># 0</span><br>print(logging.DEBUG)    <span class="hljs-comment"># 10</span><br>print(logging.INFO)     <span class="hljs-comment"># 20</span><br>print(logging.WARNING)  <span class="hljs-comment"># 30</span><br>print(logging.ERROR)    <span class="hljs-comment"># 40</span><br>print(logging.CRITICAL) <span class="hljs-comment"># 50</span><br></code></pre></td></tr></table></figure><p>若要用等級數值來查詢是哪個等級的訊息，可使用 <code>logging.getLevelName(level)</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>print(logging.getLevelName(<span class="hljs-number">0</span>))    <span class="hljs-comment"># NOTSET</span><br>print(logging.getLevelName(<span class="hljs-number">10</span>))   <span class="hljs-comment"># DEBUG</span><br>print(logging.getLevelName(<span class="hljs-number">20</span>))   <span class="hljs-comment"># INFO</span><br>print(logging.getLevelName(<span class="hljs-number">30</span>))   <span class="hljs-comment"># WARNING</span><br>print(logging.getLevelName(<span class="hljs-number">40</span>))   <span class="hljs-comment"># ERROR</span><br>print(logging.getLevelName(<span class="hljs-number">50</span>))   <span class="hljs-comment"># CRITICAL</span><br></code></pre></td></tr></table></figure><h2 id="輸出-logging"><a class="header-anchor" href="#輸出-logging"></a>輸出 logging</h2><p><code>logging</code> 模組預設等級為 <code>WARNING</code>，大於或等於 <code>WARNING</code> 等級的訊息才會被記錄：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果，可以看到比 <code>WARNING</code> 等級還要低的訊息有 <code>DEBUG</code> 和 <code>INFO</code> 就不會被輸出：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">WARNING:root:warning message<br>ERROR:root:error message<br>CRITICAL:root:critical message<br></code></pre></td></tr></table></figure><p>若將等級設為 <code>DEBUG</code>，就會將所有等級的訊息都輸出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果，預設的訊息輸出格式是 <code>%(levelname)s:%(name)s:%(message)s</code> (後面會介紹如何自訂輸出格式)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEBUG:root:debug message<br>INFO:root:info message<br>WARNING:root:warning message<br>ERROR:root:error message<br>CRITICAL:root:critical message<br></code></pre></td></tr></table></figure><h2 id="紀錄堆疊追蹤資訊"><a class="header-anchor" href="#紀錄堆疊追蹤資訊"></a>紀錄堆疊追蹤資訊</h2><p><code>logging</code> 模組也提供可以紀錄完整的堆疊追蹤 (stack traces)，若在 <code>logging.error()</code> 加上 <code>exc_info</code> 參數，並將該參數設為 <code>True</code>，就可以紀錄 Exception，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.error(<span class="hljs-string">"Catch an exception."</span>, exc_info=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p>若沒有加上 <code>exc_info=True</code> 則無法紀錄 Exception：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.error(<span class="hljs-string">"Catch an exception."</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br></code></pre></td></tr></table></figure><p>若要在 logging 內紀錄 exception 訊息，可使用 <code>logging.exception()</code>，它會將 exception 添加至訊息中，此方法的等級為 <code>ERROR</code>，也就是說 <code>logging.exception()</code> 就等同於 <code>logging.error(exc_info=True)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.exception(<span class="hljs-string">'Catch an exception.'</span>)<br></code></pre></td></tr></table></figure><p>輸出結果和 <code>logging.error(exc_info=True)</code> 相同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">ERROR:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><p>若不想使用 <code>ERROR</code> 級別紀錄 exception 訊息，可使用 <code>DEBUG</code>、<code>INFO</code>、<code>WARNING</code>、<code>CRITICAL</code> 級別並加上參數 <code>exc_info=True</code> 的設定：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>logging.basicConfig(level=logging.DEBUG)<br><br><span class="hljs-keyword">try</span>:<br>    x = <span class="hljs-number">5</span> / <span class="hljs-number">0</span><br><span class="hljs-keyword">except</span>:<br>    logging.debug(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.info(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.warning(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br>    logging.critical(<span class="hljs-string">'Catch an exception.'</span>, exc_info=<span class="hljs-keyword">True</span>)<br></code></pre></td></tr></table></figure><p>下面是輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">DEBUG:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>INFO:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>WARNING:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br>CRITICAL:root:Catch an exception.<br>Traceback (most recent call last):<br>  File "main.py", line 14, in &lt;module&gt;<br>    x = 5 / 0<br>ZeroDivisionError: division by zero<br></code></pre></td></tr></table></figure><h2 id="自訂-logging-輸出格式"><a class="header-anchor" href="#自訂-logging-輸出格式"></a>自訂 logging 輸出格式</h2><p>預設的訊息輸出格式只有 <code>levelname</code>、<code>name</code>、<code>message</code>，下面是其他相關的資訊：</p><table><thead><tr><th>格式化字串</th><th>說明</th></tr></thead><tbody><tr><td><code>%(asctime)s</code></td><td>日期時間, 格式為 <code>YYYY-MM-DD HH:mm:SS,ms</code>，例如：2018-12-13 17:20:30,567</td></tr><tr><td><code>%(filename)s</code></td><td>模組檔名</td></tr><tr><td><code>%(funcName)s</code></td><td>函數名稱</td></tr><tr><td><code>%(levelname)s</code></td><td>日誌的等級名稱</td></tr><tr><td><code>%(levelno)s</code></td><td>日誌的等級數值</td></tr><tr><td><code>%(lineno)d</code></td><td>呼叫日誌函數所在的行數</td></tr><tr><td><code>%(message)s</code></td><td>訊息</td></tr><tr><td><code>%(module)s</code></td><td>模組名稱</td></tr><tr><td><code>%(name)s</code></td><td>logger 的名稱</td></tr><tr><td><code>%(pathname)s</code></td><td>檔案的完整路徑 (如果可用)</td></tr><tr><td><code>%(process)d</code></td><td>process ID (如果可用)</td></tr><tr><td><code>%(thread)d</code></td><td>執行緒 ID (如果可用)</td></tr><tr><td><code>%(threradName)s</code></td><td>執行緒名稱</td></tr></tbody></table><p>可將這些資訊加入 <code>logging.basicConfig()</code> 內的 <code>format</code> 參數：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>logging.basicConfig(level=logging.DEBUG, format=FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是自訂訊息的輸出結果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">2018-12-13 17:40:34,604 DEBUG: debug message<br>2018-12-13 17:40:34,604 INFO: info message<br>2018-12-13 17:40:34,604 WARNING: warning message<br>2018-12-13 17:40:34,604 ERROR: error message<br>2018-12-13 17:40:34,608 CRITICAL: critical message<br></code></pre></td></tr></table></figure><h3 id="自訂輸出的時間格式"><a class="header-anchor" href="#自訂輸出的時間格式"></a>自訂輸出的時間格式</h3><p>在 <code>logging.basicConfig()</code> 內的 <code>datefmt</code> 參數可設定所需的時間格式，要使用 <code>time.strftime()</code> 接受的時間格式：</p><table><thead><tr><th>參數</th><th>說明</th></tr></thead><tbody><tr><td>%Y</td><td>長年份，例如：2019</td></tr><tr><td>%y</td><td>短年份，例如：19</td></tr><tr><td>%m</td><td>月份：01 ~ 12</td></tr><tr><td>%B</td><td>月份完整名稱，例如：February</td></tr><tr><td>%b</td><td>月份縮寫名稱，例如：Feb</td></tr><tr><td>%d</td><td>日期：01 ~ 31</td></tr><tr><td>%H</td><td>小時 (24 小時制)：00 ~ 23</td></tr><tr><td>%I</td><td>小時 (12 小時制)：01 ~ 12</td></tr><tr><td>%w</td><td>星期：0 ~ 6，0 代表星期日</td></tr><tr><td>%A</td><td>星期完整名稱，例如：Friday</td></tr><tr><td>%a</td><td>星期縮寫名稱，例如：Fri</td></tr><tr><td>%P</td><td>AM 或 PM</td></tr><tr><td>%M</td><td>分鐘：00 ~ 59</td></tr><tr><td>%S</td><td>秒：00 ~ 61</td></tr></tbody></table><blockquote><p><code>time.strftime()</code> 的時間參數詳情可參考 Python 官方的 <a href="https://docs.python.org/3/library/time.html#time.strftime" target="_blank" rel="noopener">time — Time access and conversions — Python 3.7.2 documentation</a> 文件。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>LOGGING_FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>DATE_FORMAT = <span class="hljs-string">'%Y%m%d %H:%M:%S'</span><br>logging.basicConfig(level=logging.DEBUG, format=LOGGING_FORMAT, datefmt=DATE_FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>下面是自訂訊息的輸出結果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">20190107 08:57:07 DEBUG: debug message<br>20190107 08:57:07 INFO: info message<br>20190107 08:57:07 WARNING: warning message<br>20190107 08:57:07 ERROR: error message<br>20190107 08:57:07 CRITICAL: critical message<br></code></pre></td></tr></table></figure><h2 id="儲存-logging"><a class="header-anchor" href="#儲存-logging"></a>儲存 logging</h2><p>只要在 <code>logging.basicConfig()</code> 內的 <code>filename</code> 參數設定要儲存的日誌檔名，就可以將 logging 儲存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br>FORMAT = <span class="hljs-string">'%(asctime)s %(levelname)s: %(message)s'</span><br>logging.basicConfig(level=logging.DEBUG, filename=<span class="hljs-string">'myLog.log'</span>, filemode=<span class="hljs-string">'w'</span>, format=FORMAT)<br><br>logging.debug(<span class="hljs-string">'debug message'</span>)<br>logging.info(<span class="hljs-string">'info message'</span>)<br>logging.warning(<span class="hljs-string">'warning message'</span>)<br>logging.error(<span class="hljs-string">'error message'</span>)<br>logging.critical(<span class="hljs-string">'critical message'</span>)<br></code></pre></td></tr></table></figure><p>預設 <code>filemode</code> 參數是設為 <code>a</code>，代表 append (附加) 的意思，每次執行程式時，Logging 會將新的訊息加在舊的訊息後面，不會覆蓋舊的訊息。若要改成新訊息覆蓋就訊息，那可以將 <code>filemode</code> 參數設為 <code>w</code>，代表 write 的意思。</p><p>下面是剛剛執行後儲存的 <code>myLog.log</code> 日誌檔：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">2018-12-13 17:47:18,686 DEBUG: debug message<br>2018-12-13 17:47:18,687 INFO: info message<br>2018-12-13 17:47:18,687 WARNING: warning message<br>2018-12-13 17:47:18,687 ERROR: error message<br>2018-12-13 17:47:18,687 CRITICAL: critical message<br></code></pre></td></tr></table></figure><blockquote><p>詳情可參考官方文件 <a href="https://docs.python.org/3/library/logging.html" target="_blank" rel="noopener">Logging facility for Python — Python documentation</a>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/python.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;開發 Python 時，很常使用 &lt;code&gt;print()&lt;/code&gt; 來輸出變數以方便 debug，但要部署時，不需要這些訊息，需要自己手動去註解或刪除那些放在各處的 &lt;code&gt;print()&lt;/code&gt;。而 Python 內建提供了 &lt;code&gt;logging&lt;/code&gt; 模組可以用來取代 &lt;code&gt;print()&lt;/code&gt;，&lt;code&gt;logging&lt;/code&gt; 除了可以輸出訊息，也可以將訊息儲存至日誌檔保存。下面紀錄如何使用 &lt;code&gt;logging&lt;/code&gt; 模組。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://titangene.github.io/categories/python/"/>
    
    
      <category term="Logging" scheme="https://titangene.github.io/tags/logging/"/>
    
  </entry>
  
  <entry>
    <title>設定 Windows 工作排程定期執行 Python 爬蟲程式</title>
    <link href="https://titangene.github.io/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html"/>
    <id>https://titangene.github.io/article/set-up-windows-task-scheduler-to-periodically-execute-python-crawler.html</id>
    <published>2018-12-01T04:55:00.000Z</published>
    <updated>2019-04-30T15:54:19.642Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/python_crawler.png" alt=""></p><p>如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。</p><a id="more"></a><p>最近有些資料想透過爬蟲來擷取，而且希望可以定期 (例如：每 10 分鐘一次) 自動執行爬蟲程式，因此就有了這篇筆記。下面介紹如何以 Windows 工作排程器來定期執行爬蟲程式。</p><h2 id="目標"><a class="header-anchor" href="#目標"></a>目標</h2><p>每 10 分鐘自動執行 Python 爬蟲程式，將爬蟲抓到的最新降雨量資料存入 CSV 檔內收集。</p><h2 id="準備"><a class="header-anchor" href="#準備"></a>準備</h2><ul><li>Windows</li><li>Python 環境：建議安裝 Anaconda，可參考 <a href="./create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a></li><li>Python 套件 (這是本篇爬蟲範例所需的相依套件，可依各自需求來選擇)<ul><li><a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a></li><li><a href="http://www.numpy.org/" target="_blank" rel="noopener">Numpy</a></li><li><a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">Requests</a></li></ul></li></ul><h2 id="python-爬蟲程式原始碼"><a class="header-anchor" href="#python-爬蟲程式原始碼"></a>Python 爬蟲程式原始碼</h2><p>source code: <a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.py" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo/crawler.py</a></p><p>簡單說明一下程式的執行步驟：</p><ol><li>利用 Python 的 <a href="http://docs.python-requests.org/en/master/" target="_blank" rel="noopener">Requests</a> 套件來建立 HTTP 的 GET 請求，從中央氣象局提供的開放資料 API 中取得資料，回傳的格式是 JSON</li><li>解析 API 回傳的 JSON 資料，並將 JSON 轉成 <a href="https://pandas.pydata.org/" target="_blank" rel="noopener">Pandas</a> 的 <code>DataFrame</code> 型別的資料格式</li><li>將 <code>DataFrame</code> 儲存成 CSV 檔保存資料</li></ol><blockquote><p>若想了解中央氣象局開放資料的相關內容，詳情可參考 <a href="https://opendata.cwb.gov.tw/devManual/insrtuction" target="_blank" rel="noopener">中央氣象局開放資料 - 開發指南</a>。</p></blockquote><h2 id="python-爬蟲程式的批次檔"><a class="header-anchor" href="#python-爬蟲程式的批次檔"></a>Python 爬蟲程式的批次檔</h2><p>建立一個副檔名為 <code>.bat</code> 的批次檔，批次檔是用來執行 Python 爬蟲程式，因此就能讓 Windows 工作排程器在定期時間自動執行批次檔，以達成自動化執行爬蟲的目的。</p><p>下面就來說明批次檔每行都做了甚麼：</p><ul><li>第一行：切到指定目錄</li><li>第二行：指定 Python 虛擬環境 (可參考 <a href="./create-a-virtual-environment-and-manage-dependencies-with-conda.html">用 Conda 建立虛擬環境和管理相依套件</a>。如果要在全域環境下執行就不需要這行)</li><li>第三行：執行 Python 爬蟲程式</li><li>第四行：若想查看 Python 爬蟲程式執行過程中所輸出 (也就是執行 <code>print</code> 方法的部分) 內容，就需要取消這行的註解<ul><li><code>REM</code>：單行註解</li><li><code>pause</code>：用來暫停批次檔的執行</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /d D:/Project/Python/cwb-opendata-crawler<br>call activate dev<br>call python crawler.py<br>REM pause<br></code></pre></td></tr></table></figure><p>source code: <a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.bat" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo/crawler.bat</a></p><h2 id="windows-工作排程器-簡介"><a class="header-anchor" href="#windows-工作排程器-簡介"></a>Windows 工作排程器 簡介</h2><p>可預先設定工作在特定時間或指定時間時，會自動執行程式或批次檔以達成工作自動化。下圖為 Windows 10 的工作排程器介面：</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-46-33.png" alt=""></p><h2 id="建立工作-設定定期執行爬蟲程式"><a class="header-anchor" href="#建立工作-設定定期執行爬蟲程式"></a>建立工作，設定定期執行爬蟲程式</h2><p>開啟 Windows 的「工作排程器」，點擊右上角的「建立工作」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-47-29.png" alt=""></p><p>自訂工作名稱，若有權限需求可勾選「以最高權限執行」選項</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-48-27.png" alt=""></p><p>接著新增「觸發程序」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_22-13-47.png" alt=""></p><p>設定工作的開始時間，並選擇「僅一次」，以及設定工作要每隔多久就執行一次，並且要持續多久時間</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-49-02.png" alt=""></p><p>然後新增「動作」</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_22-14-07.png" alt=""></p><p>設定要自動執行的程式，這邊選擇的就是剛剛提到的 <a href="#Python-%E7%88%AC%E8%9F%B2%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%89%B9%E6%AC%A1%E6%AA%94">批次檔</a> (<a href="https://github.com/titangene/cwb-opendata-crawler-demo/blob/master/crawler.bat" target="_blank" rel="noopener">原始碼</a>)</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-49-54.png" alt=""></p><p>如果設定好了就可以按確定完成建立工作，此時就會看到在「工作排程器程式庫」內的工作清單中，多了剛剛新增的工作</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-11-30_13-46-05.png" alt=""></p><h2 id="成果"><a class="header-anchor" href="#成果"></a>成果</h2><p>可以看到爬蟲程式會在定期自動執行，執行的時候會跳出一個 <code>cmd</code> 視窗。若剛剛提到的 <a href="#Python-%E7%88%AC%E8%9F%B2%E7%A8%8B%E5%BC%8F%E7%9A%84%E6%89%B9%E6%AC%A1%E6%AA%94">批次檔</a> 內沒有將 <code>REM pause</code> 這行註解，就會看到爬蟲程式執行完成後，不會自動關閉 <code>cmd</code> 視窗，這是為了可以立即看到該次爬蟲執行過程中輸出的訊息。</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-12-01_00-19-10.png" alt=""></p><p>下圖就是自動執行爬蟲所抓到的資料：</p><p><img src="../images/set-up-windows-task-scheduler-to-periodically-execute-python-crawler/2018-12-01_09-14-48.png" alt=""></p><blockquote><p>完整 source code：<a href="https://github.com/titangene/cwb-opendata-crawler-demo" target="_blank" rel="noopener">titangene/cwb-opendata-crawler-demo</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/python_crawler.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;如何將 Python 爬蟲程式定期執行？使用 Windows 的使用者可以選擇「工作排程器」來解決。&lt;/p&gt;
    
    </summary>
    
      <category term="Windows" scheme="https://titangene.github.io/categories/windows/"/>
    
      <category term="Python" scheme="https://titangene.github.io/categories/windows/python/"/>
    
      <category term="Crawler" scheme="https://titangene.github.io/categories/windows/python/crawler/"/>
    
      <category term="OS" scheme="https://titangene.github.io/categories/windows/python/crawler/os/"/>
    
    
      <category term="Python Requests" scheme="https://titangene.github.io/tags/python-requests/"/>
    
      <category term="Windows 工作排程" scheme="https://titangene.github.io/tags/windows-%E5%B7%A5%E4%BD%9C%E6%8E%92%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用 Conda 建立虛擬環境和管理相依套件</title>
    <link href="https://titangene.github.io/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html"/>
    <id>https://titangene.github.io/article/create-a-virtual-environment-and-manage-dependencies-with-conda.html</id>
    <published>2018-11-19T09:10:00.000Z</published>
    <updated>2019-05-12T07:21:26.188Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../images/cover/python_anaconda.png" alt=""></p><p>學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。</p><a id="more"></a><h2 id="anaconda"><a class="header-anchor" href="#anaconda"></a>Anaconda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/anaconda-logo.png" alt=""></p><p>Anaconda 是最受歡迎的 Python 資料科學 (Data Science) 平台，它特點就是本來就包含了各種數據分析、科學計算的相關套件 (例如：NumPy、SciPy、Matplotlib、SymPy、Pandas … 等)，而 Anaconda 的套件管理工具就是 conda。</p><h2 id="conda"><a class="header-anchor" href="#conda"></a>Conda</h2><p><img src="../images/create-a-virtual-environment-and-manage-dependencies-with-conda/conda-logo.png" alt=""></p><p>Conda 是一個開源的套件與環境管理的系統，可以在 Windows、macOS 和 Linux 上使用。可利用 Conda 來安裝、執行、更新套件以及其相依的套件，並且還可用來建立不同的開發環境 (例如：不同環境有不同的 Python 版本)。</p><!-- more --><h2 id="安裝-anaconda"><a class="header-anchor" href="#安裝-anaconda"></a>安裝 Anaconda</h2><p>至 <a href="https://www.anaconda.com/download/" target="_blank" rel="noopener">Anaconda</a> 官網下載並安裝，建議選擇 Python 3.x 的版本。</p><h2 id="建立虛擬環境"><a class="header-anchor" href="#建立虛擬環境"></a>建立虛擬環境</h2><p>從指定套件列表中建立新的 conda 環境：</p><ul><li><code>-n</code>，<code>--name</code>：設定環境名稱</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 安裝包含 Anaconda 發行版的套件<br><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; anaconda<br><span class="hljs-meta"><br>#</span> 指定 Python 版本<br><span class="hljs-meta">$</span> conda create -n &lt;environment&gt; python=3.6<br></code></pre></td></tr></table></figure><ul><li><code>-e</code>，<code>--envs</code>：列出已建立的環境</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 顯示虛擬環境列表，並顯示正在使用的虛擬環境<br><span class="hljs-meta">$</span> conda info -e<br><span class="hljs-meta">#</span> conda environments:<br><span class="hljs-meta">#</span><br>base                  *  D:\Users\Titan\Anaconda3<br>hello                    D:\Users\Titan\Anaconda3\envs\hello<br></code></pre></td></tr></table></figure><p>使用或 <code>activate</code> 至指定環境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> Windows<br><span class="hljs-meta">$</span> activate &lt;environment&gt;<br><span class="hljs-meta"><br>#</span> Linux and macOS<br><span class="hljs-meta">$</span> source activate &lt;environment&gt;<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 顯示虛擬環境列表，並顯示正在使用的虛擬環境<br><span class="hljs-meta">$</span> conda info -e<br><span class="hljs-meta">#</span> conda environments:<br><span class="hljs-meta">#</span><br>base                     D:\Users\Titan\Anaconda3<br>hello                 *  D:\Users\Titan\Anaconda3\envs\hello<br></code></pre></td></tr></table></figure><blockquote><p><code>*</code> 代表目前正在使用的虛擬環境</p></blockquote><h2 id="離開虛擬環境"><a class="header-anchor" href="#離開虛擬環境"></a>離開虛擬環境</h2><p>如果要將現在環境改回預設值 <code>base</code> (離開目前環境) 可使用下面指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> Windows<br><span class="hljs-meta">$</span> deactivate<br><span class="hljs-meta"><br>#</span> Linux and macOS<br><span class="hljs-meta">$</span> source deactivate<br></code></pre></td></tr></table></figure><h2 id="利用-conda-安裝套件"><a class="header-anchor" href="#利用-conda-安裝套件"></a>利用 conda 安裝套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 安裝多個套件<br><span class="hljs-meta">$</span> conda install &lt;package-1&gt; &lt;package-2&gt;<br></code></pre></td></tr></table></figure><h2 id="查看資訊"><a class="header-anchor" href="#查看資訊"></a>查看資訊</h2><p>查看 conda 目前版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda -V<br>conda 4.5.11<br></code></pre></td></tr></table></figure><p>查看目前環境已安裝的套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda list<br><span class="hljs-meta">#</span> packages in environment at D:\Users\Titan\Anaconda3:<br><span class="hljs-meta">#</span><br><span class="hljs-meta">#</span> Name                    Version                   Build  Channel<br>...<br>jupyter                   1.0.0                    py35_3<br>jupyter_client            5.2.3                    py35_0<br>jupyter_console           4.1.1                    py35_0<br>jupyter_core              4.4.0            py35h629ba7f_0<br>jupyterlab                0.32.1                    &lt;pip&gt;<br>jupyterlab-launcher       0.10.5                    &lt;pip&gt;<br>...<br></code></pre></td></tr></table></figure><p>查看 conda 是否有某套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda search &lt;package&gt;<br><span class="hljs-meta"><br>$</span> conda search pandas<br>Loading channels: done<br><span class="hljs-meta">#</span> Name                  Version           Build  Channel<br>pandas                    0.9.0      np16py27_0  pkgs/free<br>pandas                    0.9.1      np16py27_0  pkgs/free<br>...<br></code></pre></td></tr></table></figure><p>如果 conda 沒有該套件，可以使用 pip 來安裝套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 安裝套件<br><span class="hljs-meta">$</span> pip install &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 更新套件<br><span class="hljs-meta">$</span> pip install --upgrade &lt;package&gt;<br></code></pre></td></tr></table></figure><h2 id="刪除套件"><a class="header-anchor" href="#刪除套件"></a>刪除套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 刪除環境內的套件<br><span class="hljs-meta">$</span> conda remove -n &lt;environment&gt; &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 刪除目前環境內的套件<br><span class="hljs-meta">$</span> conda remove &lt;package&gt;<br><span class="hljs-meta"><br>#</span> 刪除多個套件<br><span class="hljs-meta">$</span> conda remove &lt;package-1&gt; &lt;package-2&gt;<br></code></pre></td></tr></table></figure><h2 id="更新套件"><a class="header-anchor" href="#更新套件"></a>更新套件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span> 更新 conda<br><span class="hljs-meta">$</span> conda update conda<br><span class="hljs-meta"><br>#</span> 更新 Anaconda<br><span class="hljs-meta">$</span> conda update anaconda<br><span class="hljs-meta"><br>#</span> 更新 Python<br><span class="hljs-meta">$</span> conda update python<br><span class="hljs-meta"><br>#</span> 更新特定套件<br><span class="hljs-meta">$</span> conda update &lt;package&gt;<br></code></pre></td></tr></table></figure><h2 id="刪除虛擬環境"><a class="header-anchor" href="#刪除虛擬環境"></a>刪除虛擬環境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda env remove -n &lt;environment&gt;<br></code></pre></td></tr></table></figure><h2 id="更新-python"><a class="header-anchor" href="#更新-python"></a>更新 Python</h2><h3 id="更新全域環境"><a class="header-anchor" href="#更新全域環境"></a>更新全域環境</h3><p>若目前 Python 版本是 3.6.1，下面指令只會將 Python 更新至 3.6.x 的最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update python<br></code></pre></td></tr></table></figure><p>若是要更新到其他版本可指定 Python 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install python=3.6<br></code></pre></td></tr></table></figure><h2 id="更新-anaconda"><a class="header-anchor" href="#更新-anaconda"></a>更新 Anaconda</h2><p>更新套件管理器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update conda<br></code></pre></td></tr></table></figure><div class="warning"><p>注意：Conda 會更新該版本列表中的最高版本，因此 Python 2.7 更新到 2.x 中的最高版本，而 3.x 系列依此類推。</p></div><p>更新 anaconda 此 meta-package，可更新 Anaconda 發行版包含的套件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda update anaconda<br></code></pre></td></tr></table></figure><p>如果要更新 Python 的特定版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">$</span> conda install python==$pythonversion$<br></code></pre></td></tr></table></figure><h2 id="參考連結"><a class="header-anchor" href="#參考連結"></a>參考連結</h2><ul><li><a href="https://conda.io/docs/user-guide/tasks/manage-pkgs.html" target="_blank" rel="noopener">Managing packages | Conda documentation</a></li><li><a href="https://stackoverflow.com/questions/41535881/how-do-i-upgrade-to-python-3-6-with-conda" target="_blank" rel="noopener">macos - How do I upgrade to Python 3.6 with conda? - Stack Overflow</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;../images/cover/python_anaconda.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;p&gt;學習如何利用 Conda 來建立不同需求所需的 Python 開發環境，並如何管理相依套件。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://titangene.github.io/categories/python/"/>
    
    
      <category term="Anaconda" scheme="https://titangene.github.io/tags/anaconda/"/>
    
      <category term="Conda" scheme="https://titangene.github.io/tags/conda/"/>
    
      <category term="Virtual Environment" scheme="https://titangene.github.io/tags/virtual-environment/"/>
    
      <category term="Package Management" scheme="https://titangene.github.io/tags/package-management/"/>
    
  </entry>
  
</feed>
